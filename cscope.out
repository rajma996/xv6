cscope 15 $HOME/IIIT/thirdsem/OS/xv6               0000277998
	@asm.h

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

16 
	#STA_X
 0x8

17 
	#STA_E
 0x4

18 
	#STA_C
 0x4

19 
	#STA_W
 0x2

20 
	#STA_R
 0x2

21 
	#STA_A
 0x1

	@bio.c

23 
	~"ty≥s.h
"

24 
	~"defs.h
"

25 
	~"∑øm.h
"

26 
	~"•ölock.h
"

27 
	~"fs.h
"

28 
	~"buf.h
"

31 
•ölock
 
	mlock
;

32 
buf
 
	mbuf
[
NBUF
];

36 
buf
 
	mhód
;

37 } 
	gbˇche
;

40 
	$böô
()

42 
buf
 *
b
;

44 
	`öôlock
(&
bˇche
.
lock
, "bcache");

48 
bˇche
.
hód
.
¥ev
 = &bcache.head;

49 
bˇche
.
hód
.
√xt
 = &bcache.head;

50 
b
 = 
bˇche
.
buf
; b < bˇche.buf+
NBUF
; b++){

51 
b
->
√xt
 = 
bˇche
.
hód
.next;

52 
b
->
¥ev
 = &
bˇche
.
hód
;

53 
b
->
dev
 = -1;

54 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

55 
bˇche
.
hód
.
√xt
 = 
b
;

57 
	}
}

62 
buf
*

63 
	$bgë
(
uöt
 
dev
, uöà
blockno
)

65 
buf
 *
b
;

67 
	`acquúe
(&
bˇche
.
lock
);

69 
lo›
:

71 
b
 = 
bˇche
.
hód
.
√xt
; b != &bcache.head; b = b->next){

72 if(
b
->
dev
 =dev && b->
blockno
 == blockno){

73 if(!(
b
->
Êags
 & 
B_BUSY
)){

74 
b
->
Êags
 |
B_BUSY
;

75 
	`ªÀa£
(&
bˇche
.
lock
);

76  
b
;

78 
	`¶ìp
(
b
, &
bˇche
.
lock
);

79 
lo›
;

86 
b
 = 
bˇche
.
hód
.
¥ev
; b != &bcache.head; b = b->prev){

87 if((
b
->
Êags
 & 
B_BUSY
Ë=0 && (b->Êag†& 
B_DIRTY
) == 0){

88 
b
->
dev
 = dev;

89 
b
->
blockno
 = blockno;

90 
b
->
Êags
 = 
B_BUSY
;

91 
	`ªÀa£
(&
bˇche
.
lock
);

92  
b
;

95 
	`∑nic
("bget:Ço buffers");

96 
	}
}

99 
buf
*

100 
	$bªad
(
uöt
 
dev
, uöà
blockno
)

102 
buf
 *
b
;

104 
b
 = 
	`bgë
(
dev
, 
blockno
);

105 if(!(
b
->
Êags
 & 
B_VALID
)) {

106 
	`idîw
(
b
);

108  
b
;

109 
	}
}

113 
	$bwrôe
(
buf
 *
b
)

115 if((
b
->
Êags
 & 
B_BUSY
) == 0)

116 
	`∑nic
("bwrite");

117 
b
->
Êags
 |
B_DIRTY
;

118 
	`idîw
(
b
);

119 
	}
}

124 
	$bªl£
(
buf
 *
b
)

126 if((
b
->
Êags
 & 
B_BUSY
) == 0)

127 
	`∑nic
("brelse");

129 
	`acquúe
(&
bˇche
.
lock
);

131 
b
->
√xt
->
¥ev
 = b->prev;

132 
b
->
¥ev
->
√xt
 = b->next;

133 
b
->
√xt
 = 
bˇche
.
hód
.next;

134 
b
->
¥ev
 = &
bˇche
.
hód
;

135 
bˇche
.
hód
.
√xt
->
¥ev
 = 
b
;

136 
bˇche
.
hód
.
√xt
 = 
b
;

138 
b
->
Êags
 &~
B_BUSY
;

139 
	`wakeup
(
b
);

141 
	`ªÀa£
(&
bˇche
.
lock
);

142 
	}
}

	@bootmain.c

8 
	~"ty≥s.h
"

9 
	~"ñf.h
"

10 
	~"x86.h
"

11 
	~"memœyout.h
"

13 
	#SECTSIZE
 512

	)

15 
ªad£g
(
uch¨
*, 
uöt
, uint);

18 
	$boŸmaö
()

20 
ñfhdr
 *
ñf
;

21 
¥oghdr
 *
ph
, *
ïh
;

22 (*
íåy
)();

23 
uch¨
* 
∑
;

25 
ñf
 = (
ñfhdr
*)0x10000;

28 
	`ªad£g
((
uch¨
*)
ñf
, 4096, 0);

31 if(
ñf
->
magic
 !
ELF_MAGIC
)

35 
ph
 = (
¥oghdr
*)((
uch¨
*)
ñf
 +Élf->
phoff
);

36 
ïh
 = 
ph
 + 
ñf
->
phnum
;

37 ; 
ph
 < 
ïh
;Öh++){

38 
∑
 = (
uch¨
*)
ph
->
∑ddr
;

39 
	`ªad£g
(
∑
, 
ph
->
fûesz
,Öh->
off
);

40 if(
ph
->
memsz
 >Öh->
fûesz
)

41 
	`°osb
(
∑
 + 
ph
->
fûesz
, 0,Öh->
memsz
 -Öh->filesz);

46 
íåy
 = ((*)())(
ñf
->entry);

47 
	`íåy
();

48 
	}
}

51 
	$waôdisk
()

54 (
	`öb
(0x1F7) & 0xC0) != 0x40)

56 
	}
}

60 
	$ªad£˘
(*
d°
, 
uöt
 
off£t
)

63 
	`waôdisk
();

64 
	`outb
(0x1F2, 1);

65 
	`outb
(0x1F3, 
off£t
);

66 
	`outb
(0x1F4, 
off£t
 >> 8);

67 
	`outb
(0x1F5, 
off£t
 >> 16);

68 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

69 
	`outb
(0x1F7, 0x20);

72 
	`waôdisk
();

73 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

74 
	}
}

79 
	$ªad£g
(
uch¨
* 
∑
, 
uöt
 
cou¡
, uöà
off£t
)

81 
uch¨
* 
ïa
;

83 
ïa
 = 
∑
 + 
cou¡
;

86 
∑
 -
off£t
 % 
SECTSIZE
;

89 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

94 ; 
∑
 < 
ïa
;Ö®+
SECTSIZE
, 
off£t
++)

95 
	`ªad£˘
(
∑
, 
off£t
);

96 
	}
}

	@buf.h

1 
	sbuf
 {

2 
	mÊags
;

3 
uöt
 
	mdev
;

4 
uöt
 
	mblockno
;

5 
buf
 *
	m¥ev
;

6 
buf
 *
	m√xt
;

7 
buf
 *
	mq√xt
;

8 
uch¨
 
	md©a
[
BSIZE
];

10 
	#B_BUSY
 0x1

11 
	#B_VALID
 0x2

12 
	#B_DIRTY
 0x4

13 

	)

	@cat.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$ˇt
(
fd
)

10 
n
;

12 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

13 
	`wrôe
(1, 
buf
, 
n
);

14 if(
n
 < 0){

15 
	`¥ötf
(1, "cat:ÑeadÉrror\n");

16 
	`exô
();

18 
	}
}

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
fd
, 
i
;

25 if(
¨gc
 <= 1){

26 
	`ˇt
(0);

27 
	`exô
();

30 
i
 = 1; i < 
¨gc
; i++){

31 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

32 
	`¥ötf
(1, "ˇt: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

33 
	`exô
();

35 
	`ˇt
(
fd
);

36 
	`˛o£
(
fd
);

38 
	`exô
();

39 
	}
}

	@console.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

10 
	~"fs.h
"

11 
	~"fûe.h
"

12 
	~"memœyout.h
"

13 
	~"mmu.h
"

14 
	~"¥oc.h
"

15 
	~"x86.h
"

17 
c⁄•utc
();

19 
	g∑nicked
 = 0;

22 
•ölock
 
	mlock
;

23 
	mlockög
;

24 } 
	gc⁄s
;

27 
	$¥ötöt
(
xx
, 
ba£
, 
sign
)

29 
digôs
[] = "0123456789abcdef";

30 
buf
[16];

31 
i
;

32 
uöt
 
x
;

34 if(
sign
 && (sig¿
xx
 < 0))

35 
x
 = -
xx
;

37 
x
 = 
xx
;

39 
i
 = 0;

41 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

42 }(
x
 /
ba£
) != 0);

44 if(
sign
)

45 
buf
[
i
++] = '-';

47 --
i
 >= 0)

48 
	`c⁄•utc
(
buf
[
i
]);

49 
	}
}

54 
	$˝rötf
(*
fmt
, ...)

56 
i
, 
c
, 
lockög
;

57 
uöt
 *
¨gp
;

58 *
s
;

60 
lockög
 = 
c⁄s
.locking;

61 if(
lockög
)

62 
	`acquúe
(&
c⁄s
.
lock
);

64 i‡(
fmt
 == 0)

65 
	`∑nic
("null fmt");

67 
¨gp
 = (
uöt
*)(*)(&
fmt
 + 1);

68 
i
 = 0; (
c
 = 
fmt
[i] & 0xff) != 0; i++){

69 if(
c
 != '%'){

70 
	`c⁄•utc
(
c
);

73 
c
 = 
fmt
[++
i
] & 0xff;

74 if(
c
 == 0)

76 
c
){

78 
	`¥ötöt
(*
¨gp
++, 10, 1);

82 
	`¥ötöt
(*
¨gp
++, 16, 0);

85 if((
s
 = (*)*
¨gp
++) == 0)

86 
s
 = "(null)";

87 ; *
s
; s++)

88 
	`c⁄•utc
(*
s
);

91 
	`c⁄•utc
('%');

95 
	`c⁄•utc
('%');

96 
	`c⁄•utc
(
c
);

101 if(
lockög
)

102 
	`ªÀa£
(&
c⁄s
.
lock
);

103 
	}
}

106 
	$∑nic
(*
s
)

108 
i
;

109 
uöt
 
pcs
[10];

111 
	`˛i
();

112 
c⁄s
.
lockög
 = 0;

113 
	`˝rötf
("˝u%d:Ö™ic: ", 
˝u
->
id
);

114 
	`˝rötf
(
s
);

115 
	`˝rötf
("\n");

116 
	`gëˇŒîpcs
(&
s
, 
pcs
);

117 
i
=0; i<10; i++)

118 
	`˝rötf
(" %p", 
pcs
[
i
]);

119 
∑nicked
 = 1;

122 
	}
}

125 
	#BACKSPACE
 0x100

	)

126 
	#CRTPORT
 0x3d4

	)

127 
ush‹t
 *
	g¸t
 = (ush‹t*)
P2V
(0xb8000);

130 
	$cg≠utc
(
c
)

132 
pos
;

135 
	`outb
(
CRTPORT
, 14);

136 
pos
 = 
	`öb
(
CRTPORT
+1) << 8;

137 
	`outb
(
CRTPORT
, 15);

138 
pos
 |
	`öb
(
CRTPORT
+1);

140 if(
c
 == '\n')

141 
pos
 += 80 -Öos%80;

142 if(
c
 =
BACKSPACE
){

143 if(
pos
 > 0) --pos;

145 
¸t
[
pos
++] = (
c
&0xff) | 0x0700;

147 if((
pos
/80) >= 24){

148 
	`memmove
(
¸t
, crt+80, (crt[0])*23*80);

149 
pos
 -= 80;

150 
	`mem£t
(
¸t
+
pos
, 0, (crt[0])*(24*80 -Öos));

153 
	`outb
(
CRTPORT
, 14);

154 
	`outb
(
CRTPORT
+1, 
pos
>>8);

155 
	`outb
(
CRTPORT
, 15);

156 
	`outb
(
CRTPORT
+1, 
pos
);

157 
¸t
[
pos
] = ' ' | 0x0700;

158 
	}
}

161 
	$c⁄•utc
(
c
)

163 if(
∑nicked
){

164 
	`˛i
();

169 if(
c
 =
BACKSPACE
){

170 
	`u¨çutc
('\b'); uartputc(' '); uartputc('\b');

172 
	`u¨çutc
(
c
);

173 
	`cg≠utc
(
c
);

174 
	}
}

176 
	#INPUT_BUF
 128

	)

178 
•ölock
 
	mlock
;

179 
	mbuf
[
INPUT_BUF
];

180 
uöt
 
	mr
;

181 
uöt
 
	mw
;

182 
uöt
 
	me
;

183 } 
	göput
;

185 
	#C
(
x
) ((x)-'@')

186 

	)

188 
c⁄sﬁeöå
((*
gëc
)())

190 
c
;

192 
	`acquúe
(&
öput
.
lock
);

193 (
c
 = 
	`gëc
()) >= 0){

194 
c
){

195 
	`C
('P'):

196 
	`¥ocdump
();

198 
	`C
('U'):

199 
öput
.
e
 !öput.
w
 &&

200 
öput
.
buf
[(öput.
e
-1Ë% 
INPUT_BUF
] != '\n'){

201 
öput
.
e
--;

202 
	`c⁄•utc
(
BACKSPACE
);

205 
	`C
('H'): '\x7f':

206 if(
öput
.
e
 !öput.
w
){

207 
öput
.
e
--;

208 
	`c⁄•utc
(
BACKSPACE
);

212 if(
c
 !0 && 
öput
.
e
-öput.
r
 < 
INPUT_BUF
){

213 
c
 = (c == '\r') ? '\n' : c;

214 
öput
.
buf
[öput.
e
++ % 
INPUT_BUF
] = 
c
;

215 
	`c⁄•utc
(
c
);

216 if(
c
 ='\n' || c =
	`C
('D'Ë|| 
öput
.
e
 =öput.
r
+
INPUT_BUF
){

217 
öput
.
w
 = i≈ut.
e
;

218 
	`wakeup
(&
öput
.
r
);

224 
	`ªÀa£
(&
öput
.
lock
);

225 
	}
}

228 
	$c⁄sﬁîód
(
öode
 *
ù
, *
d°
, 
n
)

230 
uöt
 
èrgë
;

231 
c
;

233 
	`iu∆ock
(
ù
);

234 
èrgë
 = 
n
;

235 
	`acquúe
(&
öput
.
lock
);

236 
n
 > 0){

237 
öput
.
r
 =öput.
w
){

238 if(
¥oc
->
kûÀd
){

239 
	`ªÀa£
(&
öput
.
lock
);

240 
	`ûock
(
ù
);

243 
	`¶ìp
(&
öput
.
r
, &öput.
lock
);

245 
c
 = 
öput
.
buf
[öput.
r
++ % 
INPUT_BUF
];

246 if(
c
 =
	`C
('D')){

247 if(
n
 < 
èrgë
){

250 
öput
.
r
--;

254 *
d°
++ = 
c
;

255 --
n
;

256 if(
c
 == '\n')

259 
	`ªÀa£
(&
öput
.
lock
);

260 
	`ûock
(
ù
);

262  
èrgë
 - 
n
;

263 
	}
}

266 
	$c⁄sﬁewrôe
(
öode
 *
ù
, *
buf
, 
n
)

268 
i
;

270 
	`iu∆ock
(
ù
);

271 
	`acquúe
(&
c⁄s
.
lock
);

272 
i
 = 0; i < 
n
; i++)

273 
	`c⁄•utc
(
buf
[
i
] & 0xff);

274 
	`ªÀa£
(&
c⁄s
.
lock
);

275 
	`ûock
(
ù
);

277  
n
;

278 
	}
}

281 
	$c⁄sﬁeöô
()

283 
	`öôlock
(&
c⁄s
.
lock
, "console");

284 
	`öôlock
(&
öput
.
lock
, "input");

286 
devsw
[
CONSOLE
].
wrôe
 = 
c⁄sﬁewrôe
;

287 
devsw
[
CONSOLE
].
ªad
 = 
c⁄sﬁîód
;

288 
c⁄s
.
lockög
 = 1;

290 
	`pi˚«bÀ
(
IRQ_KBD
);

291 
	`iﬂpi˚«bÀ
(
IRQ_KBD
, 0);

292 
	}
}

	@date.h

1 
	sπcd©e
 {

2 
uöt
 
	m£c⁄d
;

3 
uöt
 
	mmöuã
;

4 
uöt
 
	mhour
;

5 
uöt
 
	mday
;

6 
uöt
 
	mm⁄th
;

7 
uöt
 
	myór
;

	@defs.h

1 
	gbuf
;

2 
	gc⁄ãxt
;

3 
	gfûe
;

4 
	göode
;

5 
	gpùe
;

6 
	g¥oc
;

7 
	gπcd©e
;

8 
	g•ölock
;

9 
	g°©
;

10 
	gsu≥rblock
;

13 
böô
();

14 
buf
* 
bªad
(
uöt
, uint);

15 
bªl£
(
buf
*);

16 
bwrôe
(
buf
*);

19 
c⁄sﬁeöô
();

20 
˝rötf
(*, ...);

21 
c⁄sﬁeöå
((*)());

22 
	$∑nic
(*Ë
	`__©åibuã__
((
n‹ëu∫
));

25 
	`exec
(*, **);

28 
fûe
* 
	`fûóŒoc
();

29 
	`fûe˛o£
(
fûe
*);

30 
fûe
* 
	`fûedup
(file*);

31 
	`fûeöô
();

32 
	`fûîód
(
fûe
*, *, 
n
);

33 
	`fûe°©
(
fûe
*, 
°©
*);

34 
	`fûewrôe
(
fûe
*, *, 
n
);

37 
	`ªadsb
(
dev
, 
su≥rblock
 *
sb
);

38 
	`dúlök
(
öode
*, *, 
uöt
);

39 
öode
* 
	`dúlookup
(öode*, *, 
uöt
*);

40 
öode
* 
	`üŒoc
(
uöt
, );

41 
öode
* 
	`idup
(inode*);

42 
	`iöô
(
dev
);

43 
	`ûock
(
öode
*);

44 
	`ùut
(
öode
*);

45 
	`iu∆ock
(
öode
*);

46 
	`iu∆ockput
(
öode
*);

47 
	`iupd©e
(
öode
*);

48 
	`«mecmp
(const *, const *);

49 
öode
* 
	`«mei
(*);

50 
öode
* 
	`«meù¨ít
(*, *);

51 
	`ªadi
(
öode
*, *, 
uöt
, uint);

52 
	`°©i
(
öode
*, 
°©
*);

53 
	`wrôei
(
öode
*, *, 
uöt
, uint);

56 
	`ideöô
();

57 
	`ideöå
();

58 
	`idîw
(
buf
*);

61 
	`iﬂpi˚«bÀ
(
úq
, 
˝u
);

62 
uch¨
 
iﬂpicid
;

63 
	`iﬂpicöô
();

66 * 
	`kÆloc
();

67 
	`k‰ì
(*);

68 
	`köô1
(*, *);

69 
	`köô2
(*, *);

72 
	`kbdöå
();

75 
	`cmo°ime
(
πcd©e
 *
r
);

76 
	`˝unum
();

77 vﬁ©ûê
uöt
* 
œpic
;

78 
	`œpi˚oi
();

79 
	`œpicöô
();

80 
	`œpic°¨èp
(
uch¨
, 
uöt
);

81 
	`mi¸odñay
();

84 
	`öôlog
(
dev
);

85 
	`log_wrôe
(
buf
*);

86 
	`begö_›
();

87 
	`íd_›
();

90 
ismp
;

91 
	`mpb˝u
();

92 
	`mpöô
();

93 
	`mp°¨âhem
();

96 
	`pi˚«bÀ
();

97 
	`picöô
();

100 
	`pùóŒoc
(
fûe
**, file**);

101 
	`pùe˛o£
(
pùe
*, );

102 
	`pùîód
(
pùe
*, *, );

103 
	`pùewrôe
(
pùe
*, *, );

107 
¥oc
* 
	`c›y¥oc
(proc*);

108 
	`exô
();

109 
	`f‹k
();

110 
	`grow¥oc
();

111 
	`kûl
();

112 
	`pöô
();

113 
	`¥ocdump
();

114 
	$scheduÀr
(Ë
	`__©åibuã__
((
n‹ëu∫
));

115 
	`sched
();

116 
	`¶ìp
(*, 
•ölock
*);

117 
	`u£röô
();

118 
	`waô
();

119 
	`wakeup
(*);

120 
	`yõld
();

123 
	`swtch
(
c⁄ãxt
**, context*);

126 
	`acquúe
(
•ölock
*);

127 
	`gëˇŒîpcs
(*, 
uöt
*);

128 
	`hﬁdög
(
•ölock
*);

129 
	`öôlock
(
•ölock
*, *);

130 
	`ªÀa£
(
•ölock
*);

131 
	`push˛i
();

132 
	`p›˛i
();

135 
	`memcmp
(c⁄° *, c⁄° *, 
uöt
);

136 * 
	`memmove
(*, c⁄° *, 
uöt
);

137 * 
	`mem£t
(*, , 
uöt
);

138 * 
	`ß„°r˝y
(*, const *, );

139 
	`°æí
(const *);

140 
	`°∫cmp
(c⁄° *, c⁄° *, 
uöt
);

141 * 
	`°∫˝y
(*, const *, );

144 
	`¨göt
(, *);

145 
	`¨g±r
(, **, );

146 
	`¨g°r
(, **);

147 
	`„tchöt
(
uöt
, *);

148 
	`„tch°r
(
uöt
, **);

149 
	`sysˇŒ
();

152 
	`timîöô
();

155 
	`idtöô
();

156 
uöt
 
ticks
;

157 
	`tvöô
();

158 
•ölock
 
tick¶ock
;

161 
	`u¨töô
();

162 
	`u¨töå
();

163 
	`u¨çutc
();

166 
	`£göô
();

167 
	`kvmÆloc
();

168 
	`vmíabÀ
();

169 
pde_t
* 
	`£tupkvm
();

170 * 
	`uva2ka
(
pde_t
*, *);

171 
	`Ælocuvm
(
pde_t
*, 
uöt
, uint);

172 
	`dóŒocuvm
(
pde_t
*, 
uöt
, uint);

173 
	`‰ìvm
(
pde_t
*);

174 
	`öôuvm
(
pde_t
*, *, 
uöt
);

175 
	`lﬂduvm
(
pde_t
*, *, 
öode
*, 
uöt
, uint);

176 
pde_t
* 
	`c›yuvm
’de_t*, 
uöt
);

177 
	`swôchuvm
(
¥oc
*);

178 
	`swôchkvm
();

179 
	`c›yout
(
pde_t
*, 
uöt
, *, uint);

180 
	`˛óΩãu
(
pde_t
 *
pgdú
, *
uva
);

183 
	#NELEM
(
x
Ë((x)/((x)[0]))

	)

	@echo.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 
i
 = 1; i < 
¨gc
; i++)

11 
	`¥ötf
(1, "%s%s", 
¨gv
[
i
], i+1 < 
¨gc
 ? " " : "\n");

12 
	`exô
();

13 
	}
}

	@elf.h

3 
	#ELF_MAGIC
 0x464C457FU

4 

	)

6 
	sñfhdr
 {

7 
uöt
 
	mmagic
;

8 
uch¨
 
	mñf
[12];

9 
ush‹t
 
	mty≥
;

10 
ush‹t
 
	mmachöe
;

11 
uöt
 
	mvîsi⁄
;

12 
uöt
 
	míåy
;

13 
uöt
 
	mphoff
;

14 
uöt
 
	mshoff
;

15 
uöt
 
	mÊags
;

16 
ush‹t
 
	mehsize
;

17 
ush‹t
 
	mphítsize
;

18 
ush‹t
 
	mphnum
;

19 
ush‹t
 
	mshítsize
;

20 
ush‹t
 
	mshnum
;

21 
ush‹t
 
	msh°∫dx
;

25 
	s¥oghdr
 {

26 
uöt
 
	mty≥
;

27 
uöt
 
	moff
;

28 
uöt
 
	mvaddr
;

29 
uöt
 
	m∑ddr
;

30 
uöt
 
	mfûesz
;

31 
uöt
 
	mmemsz
;

32 
uöt
 
	mÊags
;

33 
uöt
 
	mÆign
;

37 
	#ELF_PROG_LOAD
 1

	)

40 
	#ELF_PROG_FLAG_EXEC
 1

	)

41 
	#ELF_PROG_FLAG_WRITE
 2

	)

42 
	#ELF_PROG_FLAG_READ
 4

	)

	@exec.c

1 
	~"ty≥s.h
"

2 
	~"∑øm.h
"

3 
	~"memœyout.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"defs.h
"

7 
	~"x86.h
"

8 
	~"ñf.h
"

11 
	$exec
(*
∑th
, **
¨gv
)

13 *
s
, *
œ°
;

14 
i
, 
off
;

15 
uöt
 
¨gc
, 
sz
, 
•
, 
u°ack
[3+
MAXARG
+1];

16 
ñfhdr
 
ñf
;

17 
öode
 *
ù
;

18 
¥oghdr
 
ph
;

19 
pde_t
 *
pgdú
, *
ﬁdpgdú
;

21 
	`begö_›
();

22 if((
ù
 = 
	`«mei
(
∑th
)) == 0){

23 
	`íd_›
();

26 
	`ûock
(
ù
);

27 
pgdú
 = 0;

30 if(
	`ªadi
(
ù
, (*)&
ñf
, 0, (elf)) < (elf))

31 
bad
;

32 if(
ñf
.
magic
 !
ELF_MAGIC
)

33 
bad
;

35 if((
pgdú
 = 
	`£tupkvm
()) == 0)

36 
bad
;

39 
sz
 = 0;

40 
i
=0, 
off
=
ñf
.
phoff
; i<ñf.
phnum
; i++, off+=(
ph
)){

41 if(
	`ªadi
(
ù
, (*)&
ph
, 
off
, (ph)) != (ph))

42 
bad
;

43 if(
ph
.
ty≥
 !
ELF_PROG_LOAD
)

45 if(
ph
.
memsz
 <Öh.
fûesz
)

46 
bad
;

47 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, 
ph
.
vaddr
 +Öh.
memsz
)) == 0)

48 
bad
;

49 if(
	`lﬂduvm
(
pgdú
, (*)
ph
.
vaddr
, 
ù
,Öh.
off
,Öh.
fûesz
) < 0)

50 
bad
;

52 
	`iu∆ockput
(
ù
);

53 
	`íd_›
();

54 
ù
 = 0;

58 
sz
 = 
	`PGROUNDUP
(sz);

59 if((
sz
 = 
	`Ælocuvm
(
pgdú
, sz, sz + 2*
PGSIZE
)) == 0)

60 
bad
;

61 
	`˛óΩãu
(
pgdú
, (*)(
sz
 - 2*
PGSIZE
));

62 
•
 = 
sz
;

65 
¨gc
 = 0; 
¨gv
[argc];árgc++) {

66 if(
¨gc
 >
MAXARG
)

67 
bad
;

68 
•
 = (• - (
	`°æí
(
¨gv
[
¨gc
]) + 1)) & ~3;

69 if(
	`c›yout
(
pgdú
, 
•
, 
¨gv
[
¨gc
], 
	`°æí
(argv[argc]) + 1) < 0)

70 
bad
;

71 
u°ack
[3+
¨gc
] = 
•
;

73 
u°ack
[3+
¨gc
] = 0;

75 
u°ack
[0] = 0xffffffff;

76 
u°ack
[1] = 
¨gc
;

77 
u°ack
[2] = 
•
 - (
¨gc
+1)*4;

79 
•
 -(3+
¨gc
+1) * 4;

80 if(
	`c›yout
(
pgdú
, 
•
, 
u°ack
, (3+
¨gc
+1)*4) < 0)

81 
bad
;

84 
œ°
=
s
=
∑th
; *s; s++)

85 if(*
s
 == '/')

86 
œ°
 = 
s
+1;

87 
	`ß„°r˝y
(
¥oc
->
«me
, 
œ°
, (proc->name));

90 
ﬁdpgdú
 = 
¥oc
->
pgdú
;

91 
¥oc
->
pgdú
 =Ögdir;

92 
¥oc
->
sz
 = sz;

93 
¥oc
->
tf
->
eù
 = 
ñf
.
íåy
;

94 
¥oc
->
tf
->
e•
 = 
•
;

95 
	`swôchuvm
(
¥oc
);

96 
	`‰ìvm
(
ﬁdpgdú
);

99 
bad
:

100 if(
pgdú
)

101 
	`‰ìvm
(
pgdú
);

102 if(
ù
){

103 
	`iu∆ockput
(
ù
);

104 
	`íd_›
();

107 
	}
}

	@fcntl.h

1 
	#O_RDONLY
 0x000

	)

2 
	#O_WRONLY
 0x001

	)

3 
	#O_RDWR
 0x002

	)

4 
	#O_CREATE
 0x200

	)

	@file.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"•ölock.h
"

12 
devsw
 
	gdevsw
[
NDEV
];

14 
•ölock
 
	mlock
;

15 
fûe
 
	mfûe
[
NFILE
];

16 } 
	g·abÀ
;

19 
	$fûeöô
()

21 
	`öôlock
(&
·abÀ
.
lock
, "ftable");

22 
	}
}

25 
fûe
*

26 
	$fûóŒoc
()

28 
fûe
 *
f
;

30 
	`acquúe
(&
·abÀ
.
lock
);

31 
f
 = 
·abÀ
.
fûe
; f < fèbÀ.fûê+ 
NFILE
; f++){

32 if(
f
->
ªf
 == 0){

33 
f
->
ªf
 = 1;

34 
	`ªÀa£
(&
·abÀ
.
lock
);

35  
f
;

38 
	`ªÀa£
(&
·abÀ
.
lock
);

40 
	}
}

43 
fûe
*

44 
	$fûedup
(
fûe
 *
f
)

46 
	`acquúe
(&
·abÀ
.
lock
);

47 if(
f
->
ªf
 < 1)

48 
	`∑nic
("filedup");

49 
f
->
ªf
++;

50 
	`ªÀa£
(&
·abÀ
.
lock
);

51  
f
;

52 
	}
}

56 
	$fûe˛o£
(
fûe
 *
f
)

58 
fûe
 
ff
;

60 
	`acquúe
(&
·abÀ
.
lock
);

61 if(
f
->
ªf
 < 1)

62 
	`∑nic
("fileclose");

63 if(--
f
->
ªf
 > 0){

64 
	`ªÀa£
(&
·abÀ
.
lock
);

67 
ff
 = *
f
;

68 
f
->
ªf
 = 0;

69 
f
->
ty≥
 = 
FD_NONE
;

70 
	`ªÀa£
(&
·abÀ
.
lock
);

72 if(
ff
.
ty≥
 =
FD_PIPE
)

73 
	`pùe˛o£
(
ff
.
pùe
, ff.
wrôabÀ
);

74 if(
ff
.
ty≥
 =
FD_INODE
){

75 
	`begö_›
();

76 
	`ùut
(
ff
.
ù
);

77 
	`íd_›
();

79 
	}
}

83 
	$fûe°©
(
fûe
 *
f
, 
°©
 *
°
)

85 if(
f
->
ty≥
 =
FD_INODE
){

86 
	`ûock
(
f
->
ù
);

87 
	`°©i
(
f
->
ù
, 
°
);

88 
	`iu∆ock
(
f
->
ù
);

92 
	}
}

96 
	$fûîód
(
fûe
 *
f
, *
addr
, 
n
)

98 
r
;

100 if(
f
->
ªadabÀ
 == 0)

102 if(
f
->
ty≥
 =
FD_PIPE
)

103  
	`pùîód
(
f
->
pùe
, 
addr
, 
n
);

104 if(
f
->
ty≥
 =
FD_INODE
){

105 
	`ûock
(
f
->
ù
);

106 if((
r
 = 
	`ªadi
(
f
->
ù
, 
addr
, f->
off
, 
n
)) > 0)

107 
f
->
off
 +
r
;

108 
	`iu∆ock
(
f
->
ù
);

109  
r
;

111 
	`∑nic
("fileread");

112 
	}
}

117 
	$fûewrôe
(
fûe
 *
f
, *
addr
, 
n
)

119 
r
;

121 if(
f
->
wrôabÀ
 == 0)

123 if(
f
->
ty≥
 =
FD_PIPE
)

124  
	`pùewrôe
(
f
->
pùe
, 
addr
, 
n
);

125 if(
f
->
ty≥
 =
FD_INODE
){

132 
max
 = ((
LOGSIZE
-1-1-2) / 2) * 512;

133 
i
 = 0;

134 
i
 < 
n
){

135 
n1
 = 
n
 - 
i
;

136 if(
n1
 > 
max
)

137 
n1
 = 
max
;

139 
	`begö_›
();

140 
	`ûock
(
f
->
ù
);

141 i‡((
r
 = 
	`wrôei
(
f
->
ù
, 
addr
 + 
i
, f->
off
, 
n1
)) > 0)

142 
f
->
off
 +
r
;

143 
	`iu∆ock
(
f
->
ù
);

144 
	`íd_›
();

146 if(
r
 < 0)

148 if(
r
 !
n1
)

149 
	`∑nic
("short filewrite");

150 
i
 +
r
;

152  
i
 =
n
 ?Ç : -1;

154 
	`∑nic
("filewrite");

155 
	}
}

	@file.h

1 
	sfûe
 {

2 íum { 
	mFD_NONE
, 
	mFD_PIPE
, 
	mFD_INODE
 } 
	mty≥
;

3 
	mªf
;

4 
	mªadabÀ
;

5 
	mwrôabÀ
;

6 
pùe
 *
	mpùe
;

7 
öode
 *
	mù
;

8 
uöt
 
	moff
;

13 
	söode
 {

14 
uöt
 
	mdev
;

15 
uöt
 
	möum
;

16 
	mªf
;

17 
	mÊags
;

19 
	mty≥
;

20 
	mmaj‹
;

21 
	mmö‹
;

22 
	m∆ök
;

23 
uöt
 
	msize
;

24 
uöt
 
	maddrs
[
NDIRECT
+1];

26 
	#I_BUSY
 0x1

	)

27 
	#I_VALID
 0x2

	)

31 
	sdevsw
 {

32 (*
	mªad
)(
	möode
*, *, );

33 (*
	mwrôe
)(
	möode
*, *, );

36 
devsw
 devsw[];

38 
	#CONSOLE
 1

	)

	@forktest.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

8 
	#N
 1000

	)

11 
	$¥ötf
(
fd
, *
s
, ...)

13 
	`wrôe
(
fd
, 
s
, 
	`°æí
(s));

14 
	}
}

17 
	$f‹kã°
()

19 
n
, 
pid
;

21 
	`¥ötf
(1, "forkÅest\n");

23 
n
=0;Ç<
N
;Ç++){

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0)

27 if(
pid
 == 0)

28 
	`exô
();

31 if(
n
 =
N
){

32 
	`¥ötf
(1, "f‹k cœimedÅÿw‹k NÅimes!\n", 
N
);

33 
	`exô
();

36 ; 
n
 > 0;Ç--){

37 if(
	`waô
() < 0){

38 
	`¥ötf
(1, "wait stoppedÉarly\n");

39 
	`exô
();

43 if(
	`waô
() != -1){

44 
	`¥ötf
(1, "wait gotÅoo many\n");

45 
	`exô
();

48 
	`¥ötf
(1, "forkÅest OK\n");

49 
	}
}

52 
	$maö
()

54 
	`f‹kã°
();

55 
	`exô
();

56 
	}
}

	@fs.c

12 
	~"ty≥s.h
"

13 
	~"defs.h
"

14 
	~"∑øm.h
"

15 
	~"°©.h
"

16 
	~"mmu.h
"

17 
	~"¥oc.h
"

18 
	~"•ölock.h
"

19 
	~"fs.h
"

20 
	~"buf.h
"

21 
	~"fûe.h
"

23 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

24 
ôrunc
(
öode
*);

25 
su≥rblock
 
	gsb
;

29 
	$ªadsb
(
dev
, 
su≥rblock
 *
sb
)

31 
buf
 *
bp
;

33 
bp
 = 
	`bªad
(
dev
, 1);

34 
	`memmove
(
sb
, 
bp
->
d©a
, (*sb));

35 
	`bªl£
(
bp
);

36 
	}
}

40 
	$bzîo
(
dev
, 
bno
)

42 
buf
 *
bp
;

44 
bp
 = 
	`bªad
(
dev
, 
bno
);

45 
	`mem£t
(
bp
->
d©a
, 0, 
BSIZE
);

46 
	`log_wrôe
(
bp
);

47 
	`bªl£
(
bp
);

48 
	}
}

53 
uöt


54 
	$bÆloc
(
uöt
 
dev
)

56 
b
, 
bi
, 
m
;

57 
buf
 *
bp
;

59 
bp
 = 0;

60 
b
 = 0; b < 
sb
.
size
; b +
BPB
){

61 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
));

62 
bi
 = 0; bò< 
BPB
 && 
b
 + bò< 
sb
.
size
; bi++){

63 
m
 = 1 << (
bi
 % 8);

64 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0){

65 
bp
->
d©a
[
bi
/8] |
m
;

66 
	`log_wrôe
(
bp
);

67 
	`bªl£
(
bp
);

68 
	`bzîo
(
dev
, 
b
 + 
bi
);

69  
b
 + 
bi
;

72 
	`bªl£
(
bp
);

74 
	`∑nic
("balloc: out of blocks");

75 
	}
}

79 
	$b‰ì
(
dev
, 
uöt
 
b
)

81 
buf
 *
bp
;

82 
bi
, 
m
;

84 
	`ªadsb
(
dev
, &
sb
);

85 
bp
 = 
	`bªad
(
dev
, 
	`BBLOCK
(
b
, 
sb
));

86 
bi
 = 
b
 % 
BPB
;

87 
m
 = 1 << (
bi
 % 8);

88 if((
bp
->
d©a
[
bi
/8] & 
m
) == 0)

89 
	`∑nic
("freeing free block");

90 
bp
->
d©a
[
bi
/8] &~
m
;

91 
	`log_wrôe
(
bp
);

92 
	`bªl£
(
bp
);

93 
	}
}

158 
•ölock
 
	mlock
;

159 
öode
 
	möode
[
NINODE
];

160 } 
	giˇche
;

163 
	$iöô
(
dev
)

165 
	`öôlock
(&
iˇche
.
lock
, "icache");

166 
	`ªadsb
(
dev
, &
sb
);

167 
	`˝rötf
("sb: sizê%dÇblock†%dÇöode†%dÇlog %dÜog°¨à%d inode°¨à%d bm≠ sèπ %d\n", 
sb
.
size
,

168 
sb
.
nblocks
, sb.
nöodes
, sb.
∆og
, sb.
log°¨t
, sb.
öode°¨t
, sb.
bm≠°¨t
);

169 
	}
}

171 
öode
* 
igë
(
uöt
 
dev
, uöà
öum
);

176 
öode
*

177 
	$üŒoc
(
uöt
 
dev
, 
ty≥
)

179 
öum
;

180 
buf
 *
bp
;

181 
döode
 *
dù
;

183 
öum
 = 1; inum < 
sb
.
nöodes
; inum++){

184 
bp
 = 
	`bªad
(
dev
, 
	`IBLOCK
(
öum
, 
sb
));

185 
dù
 = (
döode
*)
bp
->
d©a
 + 
öum
%
IPB
;

186 if(
dù
->
ty≥
 == 0){

187 
	`mem£t
(
dù
, 0, (*dip));

188 
dù
->
ty≥
 =Åype;

189 
	`log_wrôe
(
bp
);

190 
	`bªl£
(
bp
);

191  
	`igë
(
dev
, 
öum
);

193 
	`bªl£
(
bp
);

195 
	`∑nic
("ialloc:Ço inodes");

196 
	}
}

200 
	$iupd©e
(
öode
 *
ù
)

202 
buf
 *
bp
;

203 
döode
 *
dù
;

205 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
, 
sb
));

206 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

207 
dù
->
ty≥
 = 
ù
->type;

208 
dù
->
maj‹
 = 
ù
->major;

209 
dù
->
mö‹
 = 
ù
->minor;

210 
dù
->
∆ök
 = 
ù
->nlink;

211 
dù
->
size
 = 
ù
->size;

212 
	`memmove
(
dù
->
addrs
, 
ù
->addrs, (ip->addrs));

213 
	`log_wrôe
(
bp
);

214 
	`bªl£
(
bp
);

215 
	}
}

220 
öode
*

221 
	$igë
(
uöt
 
dev
, uöà
öum
)

223 
öode
 *
ù
, *
em±y
;

225 
	`acquúe
(&
iˇche
.
lock
);

228 
em±y
 = 0;

229 
ù
 = &
iˇche
.
öode
[0]; i∞< &iˇche.öode[
NINODE
]; ip++){

230 if(
ù
->
ªf
 > 0 && ip->
dev
 =dev && ip->
öum
 == inum){

231 
ù
->
ªf
++;

232 
	`ªÀa£
(&
iˇche
.
lock
);

233  
ù
;

235 if(
em±y
 =0 && 
ù
->
ªf
 == 0)

236 
em±y
 = 
ù
;

240 if(
em±y
 == 0)

241 
	`∑nic
("iget:Ço inodes");

243 
ù
 = 
em±y
;

244 
ù
->
dev
 = dev;

245 
ù
->
öum
 = inum;

246 
ù
->
ªf
 = 1;

247 
ù
->
Êags
 = 0;

248 
	`ªÀa£
(&
iˇche
.
lock
);

250  
ù
;

251 
	}
}

255 
öode
*

256 
	$idup
(
öode
 *
ù
)

258 
	`acquúe
(&
iˇche
.
lock
);

259 
ù
->
ªf
++;

260 
	`ªÀa£
(&
iˇche
.
lock
);

261  
ù
;

262 
	}
}

267 
	$ûock
(
öode
 *
ù
)

269 
buf
 *
bp
;

270 
döode
 *
dù
;

272 if(
ù
 =0 || ip->
ªf
 < 1)

273 
	`∑nic
("ilock");

275 
	`acquúe
(&
iˇche
.
lock
);

276 
ù
->
Êags
 & 
I_BUSY
)

277 
	`¶ìp
(
ù
, &
iˇche
.
lock
);

278 
ù
->
Êags
 |
I_BUSY
;

279 
	`ªÀa£
(&
iˇche
.
lock
);

281 if(!(
ù
->
Êags
 & 
I_VALID
)){

282 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`IBLOCK
(ù->
öum
, 
sb
));

283 
dù
 = (
döode
*)
bp
->
d©a
 + 
ù
->
öum
%
IPB
;

284 
ù
->
ty≥
 = 
dù
->type;

285 
ù
->
maj‹
 = 
dù
->major;

286 
ù
->
mö‹
 = 
dù
->minor;

287 
ù
->
∆ök
 = 
dù
->nlink;

288 
ù
->
size
 = 
dù
->size;

289 
	`memmove
(
ù
->
addrs
, 
dù
->addrs, (ip->addrs));

290 
	`bªl£
(
bp
);

291 
ù
->
Êags
 |
I_VALID
;

292 if(
ù
->
ty≥
 == 0)

293 
	`∑nic
("ilock:ÇoÅype");

295 
	}
}

299 
	$iu∆ock
(
öode
 *
ù
)

301 if(
ù
 =0 || !(ù->
Êags
 & 
I_BUSY
Ë|| ip->
ªf
 < 1)

302 
	`∑nic
("iunlock");

304 
	`acquúe
(&
iˇche
.
lock
);

305 
ù
->
Êags
 &~
I_BUSY
;

306 
	`wakeup
(
ù
);

307 
	`ªÀa£
(&
iˇche
.
lock
);

308 
	}
}

318 
	$ùut
(
öode
 *
ù
)

320 
	`acquúe
(&
iˇche
.
lock
);

321 if(
ù
->
ªf
 =1 && (ù->
Êags
 & 
I_VALID
Ë&& ip->
∆ök
 == 0){

323 if(
ù
->
Êags
 & 
I_BUSY
)

324 
	`∑nic
("iput busy");

325 
ù
->
Êags
 |
I_BUSY
;

326 
	`ªÀa£
(&
iˇche
.
lock
);

327 
	`ôrunc
(
ù
);

328 
ù
->
ty≥
 = 0;

329 
	`iupd©e
(
ù
);

330 
	`acquúe
(&
iˇche
.
lock
);

331 
ù
->
Êags
 = 0;

332 
	`wakeup
(
ù
);

334 
ù
->
ªf
--;

335 
	`ªÀa£
(&
iˇche
.
lock
);

336 
	}
}

340 
	$iu∆ockput
(
öode
 *
ù
)

342 
	`iu∆ock
(
ù
);

343 
	`ùut
(
ù
);

344 
	}
}

356 
uöt


357 
	$bm≠
(
öode
 *
ù
, 
uöt
 
bn
)

359 
uöt
 
addr
, *
a
;

360 
buf
 *
bp
;

362 if(
bn
 < 
NDIRECT
){

363 if((
addr
 = 
ù
->
addrs
[
bn
]) == 0)

364 
ù
->
addrs
[
bn
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

365  
addr
;

367 
bn
 -
NDIRECT
;

369 if(
bn
 < 
NINDIRECT
){

371 if((
addr
 = 
ù
->
addrs
[
NDIRECT
]) == 0)

372 
ù
->
addrs
[
NDIRECT
] = 
addr
 = 
	`bÆloc
(ù->
dev
);

373 
bp
 = 
	`bªad
(
ù
->
dev
, 
addr
);

374 
a
 = (
uöt
*)
bp
->
d©a
;

375 if((
addr
 = 
a
[
bn
]) == 0){

376 
a
[
bn
] = 
addr
 = 
	`bÆloc
(
ù
->
dev
);

377 
	`log_wrôe
(
bp
);

379 
	`bªl£
(
bp
);

380  
addr
;

383 
	`∑nic
("bmap: out ofÑange");

384 
	}
}

392 
	$ôrunc
(
öode
 *
ù
)

394 
i
, 
j
;

395 
buf
 *
bp
;

396 
uöt
 *
a
;

398 
i
 = 0; i < 
NDIRECT
; i++){

399 if(
ù
->
addrs
[
i
]){

400 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
i
]);

401 
ù
->
addrs
[
i
] = 0;

405 if(
ù
->
addrs
[
NDIRECT
]){

406 
bp
 = 
	`bªad
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

407 
a
 = (
uöt
*)
bp
->
d©a
;

408 
j
 = 0; j < 
NINDIRECT
; j++){

409 if(
a
[
j
])

410 
	`b‰ì
(
ù
->
dev
, 
a
[
j
]);

412 
	`bªl£
(
bp
);

413 
	`b‰ì
(
ù
->
dev
, ip->
addrs
[
NDIRECT
]);

414 
ù
->
addrs
[
NDIRECT
] = 0;

417 
ù
->
size
 = 0;

418 
	`iupd©e
(
ù
);

419 
	}
}

423 
	$°©i
(
öode
 *
ù
, 
°©
 *
°
)

425 
°
->
dev
 = 
ù
->dev;

426 
°
->
öo
 = 
ù
->
öum
;

427 
°
->
ty≥
 = 
ù
->type;

428 
°
->
∆ök
 = 
ù
->nlink;

429 
°
->
size
 = 
ù
->size;

430 
	}
}

435 
	$ªadi
(
öode
 *
ù
, *
d°
, 
uöt
 
off
, uöà
n
)

437 
uöt
 
tŸ
, 
m
;

438 
buf
 *
bp
;

440 if(
ù
->
ty≥
 =
T_DEV
){

441 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
ªad
)

443  
devsw
[
ù
->
maj‹
].
	`ªad
(ù, 
d°
, 
n
);

446 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

448 if(
off
 + 
n
 > 
ù
->
size
)

449 
n
 = 
ù
->
size
 - 
off
;

451 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
d°
+=m){

452 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

453 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

454 
	`memmove
(
d°
, 
bp
->
d©a
 + 
off
%
BSIZE
, 
m
);

455 
	`bªl£
(
bp
);

457  
n
;

458 
	}
}

463 
	$wrôei
(
öode
 *
ù
, *
§c
, 
uöt
 
off
, uöà
n
)

465 
uöt
 
tŸ
, 
m
;

466 
buf
 *
bp
;

468 if(
ù
->
ty≥
 =
T_DEV
){

469 if(
ù
->
maj‹
 < 0 || ip->maj‹ >
NDEV
 || !
devsw
[ù->maj‹].
wrôe
)

471  
devsw
[
ù
->
maj‹
].
	`wrôe
(ù, 
§c
, 
n
);

474 if(
off
 > 
ù
->
size
 || of‡+ 
n
 < off)

476 if(
off
 + 
n
 > 
MAXFILE
*
BSIZE
)

479 
tŸ
=0;ÅŸ<
n
;ÅŸ+=
m
, 
off
+=m, 
§c
+=m){

480 
bp
 = 
	`bªad
(
ù
->
dev
, 
	`bm≠
(ù, 
off
/
BSIZE
));

481 
m
 = 
	`mö
(
n
 - 
tŸ
, 
BSIZE
 - 
off
%BSIZE);

482 
	`memmove
(
bp
->
d©a
 + 
off
%
BSIZE
, 
§c
, 
m
);

483 
	`log_wrôe
(
bp
);

484 
	`bªl£
(
bp
);

487 if(
n
 > 0 && 
off
 > 
ù
->
size
){

488 
ù
->
size
 = 
off
;

489 
	`iupd©e
(
ù
);

491  
n
;

492 
	}
}

498 
	$«mecmp
(c⁄° *
s
, c⁄° *
t
)

500  
	`°∫cmp
(
s
, 
t
, 
DIRSIZ
);

501 
	}
}

505 
öode
*

506 
	$dúlookup
(
öode
 *
dp
, *
«me
, 
uöt
 *
poff
)

508 
uöt
 
off
, 
öum
;

509 
dúít
 
de
;

511 if(
dp
->
ty≥
 !
T_DIR
)

512 
	`∑nic
("dirlookupÇot DIR");

514 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

515 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

516 
	`∑nic
("dirlinkÑead");

517 if(
de
.
öum
 == 0)

519 if(
	`«mecmp
(
«me
, 
de
.name) == 0){

521 if(
poff
)

522 *
poff
 = 
off
;

523 
öum
 = 
de
.inum;

524  
	`igë
(
dp
->
dev
, 
öum
);

529 
	}
}

533 
	$dúlök
(
öode
 *
dp
, *
«me
, 
uöt
 
öum
)

535 
off
;

536 
dúít
 
de
;

537 
öode
 *
ù
;

540 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, 0)) != 0){

541 
	`ùut
(
ù
);

546 
off
 = 0; of‡< 
dp
->
size
; of‡+(
de
)){

547 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

548 
	`∑nic
("dirlinkÑead");

549 if(
de
.
öum
 == 0)

553 
	`°∫˝y
(
de
.
«me
,Çame, 
DIRSIZ
);

554 
de
.
öum
 = inum;

555 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

556 
	`∑nic
("dirlink");

559 
	}
}

577 
	$skùñem
(*
∑th
, *
«me
)

579 *
s
;

580 
Àn
;

582 *
∑th
 == '/')

583 
∑th
++;

584 if(*
∑th
 == 0)

586 
s
 = 
∑th
;

587 *
∑th
 != '/' && *path != 0)

588 
∑th
++;

589 
Àn
 = 
∑th
 - 
s
;

590 if(
Àn
 >
DIRSIZ
)

591 
	`memmove
(
«me
, 
s
, 
DIRSIZ
);

593 
	`memmove
(
«me
, 
s
, 
Àn
);

594 
«me
[
Àn
] = 0;

596 *
∑th
 == '/')

597 
∑th
++;

598  
∑th
;

599 
	}
}

605 
öode
*

606 
	$«mex
(*
∑th
, 
«meù¨ít
, *
«me
)

608 
öode
 *
ù
, *
√xt
;

610 if(*
∑th
 == '/')

611 
ù
 = 
	`igë
(
ROOTDEV
, 
ROOTINO
);

613 
ù
 = 
	`idup
(
¥oc
->
cwd
);

615 (
∑th
 = 
	`skùñem
’©h, 
«me
)) != 0){

616 
	`ûock
(
ù
);

617 if(
ù
->
ty≥
 !
T_DIR
){

618 
	`iu∆ockput
(
ù
);

621 if(
«meù¨ít
 && *
∑th
 == '\0'){

623 
	`iu∆ock
(
ù
);

624  
ù
;

626 if((
√xt
 = 
	`dúlookup
(
ù
, 
«me
, 0)) == 0){

627 
	`iu∆ockput
(
ù
);

630 
	`iu∆ockput
(
ù
);

631 
ù
 = 
√xt
;

633 if(
«meù¨ít
){

634 
	`ùut
(
ù
);

637  
ù
;

638 
	}
}

640 
öode
*

641 
	$«mei
(*
∑th
)

643 
«me
[
DIRSIZ
];

644  
	`«mex
(
∑th
, 0, 
«me
);

645 
	}
}

647 
öode
*

648 
	$«meù¨ít
(*
∑th
, *
«me
)

650  
	`«mex
(
∑th
, 1, 
«me
);

651 
	}
}

	@fs.h

5 
	#ROOTINO
 1

6 
	#BSIZE
 512

7 

	)

13 
	ssu≥rblock
 {

14 
uöt
 
	msize
;

15 
uöt
 
	mnblocks
;

16 
uöt
 
	mnöodes
;

17 
uöt
 
	m∆og
;

18 
uöt
 
	mlog°¨t
;

19 
uöt
 
	möode°¨t
;

20 
uöt
 
	mbm≠°¨t
;

23 
	#NDIRECT
 12

	)

24 
	#NINDIRECT
 (
BSIZE
 / (
uöt
))

	)

25 
	#MAXFILE
 (
NDIRECT
 + 
NINDIRECT
)

	)

28 
	sdöode
 {

29 
	mty≥
;

30 
	mmaj‹
;

31 
	mmö‹
;

32 
	m∆ök
;

33 
uöt
 
	msize
;

34 
uöt
 
	maddrs
[
NDIRECT
+1];

38 
	#IPB
 (
BSIZE
 / (
döode
))

	)

41 
	#IBLOCK
(
i
, 
sb
Ë((iË/ 
IPB
 + sb.
öode°¨t
)

	)

44 
	#BPB
 (
BSIZE
*8)

	)

47 
	#BBLOCK
(
b
, 
sb
Ë(b/
BPB
 + sb.
bm≠°¨t
)

	)

50 
	#DIRSIZ
 14

	)

52 
	sdúít
 {

53 
ush‹t
 
	möum
;

54 
	m«me
[
DIRSIZ
];

	@grep.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

7 
	gbuf
[1024];

8 
m©ch
(*, *);

11 
	$gªp
(*
∑âîn
, 
fd
)

13 
n
, 
m
;

14 *
p
, *
q
;

16 
m
 = 0;

17 (
n
 = 
	`ªad
(
fd
, 
buf
+
m
, (buf)-m-1)) > 0){

18 
m
 +
n
;

19 
buf
[
m
] = '\0';

20 
p
 = 
buf
;

21 (
q
 = 
	`°rchr
(
p
, '\n')) != 0){

22 *
q
 = 0;

23 if(
	`m©ch
(
∑âîn
, 
p
)){

24 *
q
 = '\n';

25 
	`wrôe
(1, 
p
, 
q
+1 -Ö);

27 
p
 = 
q
+1;

29 if(
p
 =
buf
)

30 
m
 = 0;

31 if(
m
 > 0){

32 
m
 -
p
 - 
buf
;

33 
	`memmove
(
buf
, 
p
, 
m
);

36 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
fd
, 
i
;

42 *
∑âîn
;

44 if(
¨gc
 <= 1){

45 
	`¥ötf
(2, "usage: grepÖattern [file ...]\n");

46 
	`exô
();

48 
∑âîn
 = 
¨gv
[1];

50 if(
¨gc
 <= 2){

51 
	`gªp
(
∑âîn
, 0);

52 
	`exô
();

55 
i
 = 2; i < 
¨gc
; i++){

56 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

57 
	`¥ötf
(1, "gªp: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

58 
	`exô
();

60 
	`gªp
(
∑âîn
, 
fd
);

61 
	`˛o£
(
fd
);

63 
	`exô
();

64 
	}
}

69 
m©chhîe
(*, *);

70 
m©ch°¨
(, *, *);

73 
	$m©ch
(*
ª
, *
ãxt
)

75 if(
ª
[0] == '^')

76  
	`m©chhîe
(
ª
+1, 
ãxt
);

78 if(
	`m©chhîe
(
ª
, 
ãxt
))

80 }*
ãxt
++ != '\0');

82 
	}
}

85 
	$m©chhîe
(*
ª
, *
ãxt
)

87 if(
ª
[0] == '\0')

89 if(
ª
[1] == '*')

90  
	`m©ch°¨
(
ª
[0],Ñe+2, 
ãxt
);

91 if(
ª
[0] == '$' &&Ñe[1] == '\0')

92  *
ãxt
 == '\0';

93 if(*
ãxt
!='\0' && (
ª
[0]=='.' ||Ñe[0]==*text))

94  
	`m©chhîe
(
ª
+1, 
ãxt
+1);

96 
	}
}

99 
	$m©ch°¨
(
c
, *
ª
, *
ãxt
)

102 if(
	`m©chhîe
(
ª
, 
ãxt
))

104 }*
ãxt
!='\0' && (*ãxt++==
c
 || c=='.'));

106 
	}
}

	@ide.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"fs.h
"

13 
	~"buf.h
"

15 
	#SECTOR_SIZE
 512

	)

16 
	#IDE_BSY
 0x80

	)

17 
	#IDE_DRDY
 0x40

	)

18 
	#IDE_DF
 0x20

	)

19 
	#IDE_ERR
 0x01

	)

21 
	#IDE_CMD_READ
 0x20

	)

22 
	#IDE_CMD_WRITE
 0x30

	)

28 
•ölock
 
	gidñock
;

29 
buf
 *
	gidequeue
;

31 
	ghavedisk1
;

32 
ide°¨t
(
buf
*);

36 
	$idewaô
(
checkîr
)

38 
r
;

40 ((
r
 = 
	`öb
(0x1f7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

42 if(
checkîr
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

45 
	}
}

48 
	$ideöô
()

50 
i
;

52 
	`öôlock
(&
idñock
, "ide");

53 
	`pi˚«bÀ
(
IRQ_IDE
);

54 
	`iﬂpi˚«bÀ
(
IRQ_IDE
, 
n˝u
 - 1);

55 
	`idewaô
(0);

58 
	`outb
(0x1f6, 0xe0 | (1<<4));

59 
i
=0; i<1000; i++){

60 if(
	`öb
(0x1f7) != 0){

61 
havedisk1
 = 1;

67 
	`outb
(0x1f6, 0xe0 | (0<<4));

68 
	}
}

72 
	$ide°¨t
(
buf
 *
b
)

74 if(
b
 == 0)

75 
	`∑nic
("idestart");

76 if(
b
->
blockno
 >
FSSIZE
)

77 
	`∑nic
("incorrect blockno");

78 
£˘‹_≥r_block
 = 
BSIZE
/
SECTOR_SIZE
;

79 
£˘‹
 = 
b
->
blockno
 * 
£˘‹_≥r_block
;

81 i‡(
£˘‹_≥r_block
 > 7Ë
	`∑nic
("idestart");

83 
	`idewaô
(0);

84 
	`outb
(0x3f6, 0);

85 
	`outb
(0x1f2, 
£˘‹_≥r_block
);

86 
	`outb
(0x1f3, 
£˘‹
 & 0xff);

87 
	`outb
(0x1f4, (
£˘‹
 >> 8) & 0xff);

88 
	`outb
(0x1f5, (
£˘‹
 >> 16) & 0xff);

89 
	`outb
(0x1f6, 0xe0 | ((
b
->
dev
&1)<<4Ë| ((
£˘‹
>>24)&0x0f));

90 if(
b
->
Êags
 & 
B_DIRTY
){

91 
	`outb
(0x1f7, 
IDE_CMD_WRITE
);

92 
	`out¶
(0x1f0, 
b
->
d©a
, 
BSIZE
/4);

94 
	`outb
(0x1f7, 
IDE_CMD_READ
);

96 
	}
}

100 
	$ideöå
()

102 
buf
 *
b
;

105 
	`acquúe
(&
idñock
);

106 if((
b
 = 
idequeue
) == 0){

107 
	`ªÀa£
(&
idñock
);

111 
idequeue
 = 
b
->
q√xt
;

114 if(!(
b
->
Êags
 & 
B_DIRTY
Ë&& 
	`idewaô
(1) >= 0)

115 
	`ö¶
(0x1f0, 
b
->
d©a
, 
BSIZE
/4);

118 
b
->
Êags
 |
B_VALID
;

119 
b
->
Êags
 &~
B_DIRTY
;

120 
	`wakeup
(
b
);

123 if(
idequeue
 != 0)

124 
	`ide°¨t
(
idequeue
);

126 
	`ªÀa£
(&
idñock
);

127 
	}
}

134 
	$idîw
(
buf
 *
b
)

136 
buf
 **
µ
;

138 if(!(
b
->
Êags
 & 
B_BUSY
))

139 
	`∑nic
("iderw: bufÇot busy");

140 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

141 
	`∑nic
("iderw:ÇothingÅo do");

142 if(
b
->
dev
 !0 && !
havedisk1
)

143 
	`∑nic
("iderw: ide disk 1ÇotÖresent");

145 
	`acquúe
(&
idñock
);

148 
b
->
q√xt
 = 0;

149 
µ
=&
idequeue
; *µ;Öp=&(*µ)->
q√xt
)

151 *
µ
 = 
b
;

154 if(
idequeue
 =
b
)

155 
	`ide°¨t
(
b
);

158 (
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) != B_VALID){

159 
	`¶ìp
(
b
, &
idñock
);

162 
	`ªÀa£
(&
idñock
);

163 
	}
}

	@init.c

3 
	~"ty≥s.h
"

4 
	~"°©.h
"

5 
	~"u£r.h
"

6 
	~"f˙é.h
"

8 *
	g¨gv
[] = { "sh", 0 };

11 
	$maö
()

13 
pid
, 
wpid
;

15 if(
	`›í
("c⁄sﬁe", 
O_RDWR
) < 0){

16 
	`mknod
("console", 1, 1);

17 
	`›í
("c⁄sﬁe", 
O_RDWR
);

19 
	`dup
(0);

20 
	`dup
(0);

23 
	`¥ötf
(1, "init: starting sh\n");

24 
pid
 = 
	`f‹k
();

25 if(
pid
 < 0){

26 
	`¥ötf
(1, "init: fork failed\n");

27 
	`exô
();

29 if(
pid
 == 0){

30 
	`exec
("sh", 
¨gv
);

31 
	`¥ötf
(1, "init:Éxec sh failed\n");

32 
	`exô
();

34 (
wpid
=
	`waô
()Ë>0 && wpid !
pid
)

35 
	`¥ötf
(1, "zombie!\n");

37 
	}
}

	@ioapic.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

9 
	#IOAPIC
 0xFEC00000

10 

	)

11 
	#REG_ID
 0x00

12 
	#REG_VER
 0x01

13 
	#REG_TABLE
 0x10

14 

	)

20 
	#INT_DISABLED
 0x00010000

21 
	#INT_LEVEL
 0x00008000

22 
	#INT_ACTIVELOW
 0x00002000

23 
	#INT_LOGICAL
 0x00000800

24 

	)

25 vﬁ©ûê
iﬂpic
 *
	giﬂpic
;

28 
	siﬂpic
 {

29 
uöt
 
	mªg
;

30 
uöt
 
	m∑d
[3];

31 
uöt
 
	md©a
;

34 
uöt


35 
	$iﬂpi¸ód
(
ªg
)

37 
iﬂpic
->
ªg
 =Ñeg;

38  
iﬂpic
->
d©a
;

39 
	}
}

42 
	$iﬂpicwrôe
(
ªg
, 
uöt
 
d©a
)

44 
iﬂpic
->
ªg
 =Ñeg;

45 
iﬂpic
->
d©a
 = data;

46 
	}
}

49 
	$iﬂpicöô
()

51 
i
, 
id
, 
maxöå
;

53 if(!
ismp
)

56 
iﬂpic
 = (vﬁ©ûêiﬂpic*)
IOAPIC
;

57 
maxöå
 = (
	`iﬂpi¸ód
(
REG_VER
) >> 16) & 0xFF;

58 
id
 = 
	`iﬂpi¸ód
(
REG_ID
) >> 24;

59 if(
id
 !
iﬂpicid
)

60 
	`˝rötf
("ioapicinit: id isn'tÉqualÅo ioapicid;Çotá MP\n");

64 
i
 = 0; i <
maxöå
; i++){

65 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
, 
INT_DISABLED
 | (
T_IRQ0
 + i));

66 
	`iﬂpicwrôe
(
REG_TABLE
+2*
i
+1, 0);

68 
	}
}

71 
	$iﬂpi˚«bÀ
(
úq
, 
˝unum
)

73 if(!
ismp
)

79 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
, 
T_IRQ0
 + irq);

80 
	`iﬂpicwrôe
(
REG_TABLE
+2*
úq
+1, 
˝unum
 << 24);

81 
	}
}

	@kalloc.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mmu.h
"

10 
	~"•ölock.h
"

12 
‰ìønge
(*
v°¨t
, *
víd
);

13 
íd
[];

15 
	srun
 {

16 
run
 *
	m√xt
;

20 
•ölock
 
	mlock
;

21 
	mu£_lock
;

22 
run
 *
	m‰ìli°
;

23 } 
	gkmem
;

31 
	$köô1
(*
v°¨t
, *
víd
)

33 
	`öôlock
(&
kmem
.
lock
, "kmem");

34 
kmem
.
u£_lock
 = 0;

35 
	`‰ìønge
(
v°¨t
, 
víd
);

36 
	}
}

39 
	$köô2
(*
v°¨t
, *
víd
)

41 
	`‰ìønge
(
v°¨t
, 
víd
);

42 
kmem
.
u£_lock
 = 1;

43 
	}
}

46 
	$‰ìønge
(*
v°¨t
, *
víd
)

48 *
p
;

49 
p
 = (*)
	`PGROUNDUP
((
uöt
)
v°¨t
);

50 ; 
p
 + 
PGSIZE
 <(*)
víd
;Ö += PGSIZE)

51 
	`k‰ì
(
p
);

52 
	}
}

60 
	$k‰ì
(*
v
)

62 
run
 *
r
;

64 if((
uöt
)
v
 % 
PGSIZE
 || v < 
íd
 || 
	`v2p
(vË>
PHYSTOP
)

65 
	`∑nic
("kfree");

68 
	`mem£t
(
v
, 1, 
PGSIZE
);

70 if(
kmem
.
u£_lock
)

71 
	`acquúe
(&
kmem
.
lock
);

72 
r
 = (
run
*)
v
;

73 
r
->
√xt
 = 
kmem
.
‰ìli°
;

74 
kmem
.
‰ìli°
 = 
r
;

75 if(
kmem
.
u£_lock
)

76 
	`ªÀa£
(&
kmem
.
lock
);

77 
	}
}

83 
	$kÆloc
()

85 
run
 *
r
;

87 if(
kmem
.
u£_lock
)

88 
	`acquúe
(&
kmem
.
lock
);

89 
r
 = 
kmem
.
‰ìli°
;

90 if(
r
)

91 
kmem
.
‰ìli°
 = 
r
->
√xt
;

92 if(
kmem
.
u£_lock
)

93 
	`ªÀa£
(&
kmem
.
lock
);

94  (*)
r
;

95 
	}
}

	@kbd.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"kbd.h
"

7 
	$kbdgëc
()

9 
uöt
 
shi·
;

10 
uch¨
 *
ch¨code
[4] = {

11 
n‹mÆm≠
, 
shi·m≠
, 
˘lm≠
, ctlmap

13 
uöt
 
°
, 
d©a
, 
c
;

15 
°
 = 
	`öb
(
KBSTATP
);

16 if((
°
 & 
KBS_DIB
) == 0)

18 
d©a
 = 
	`öb
(
KBDATAP
);

20 if(
d©a
 == 0xE0){

21 
shi·
 |
E0ESC
;

23 } if(
d©a
 & 0x80){

25 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

26 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

28 } if(
shi·
 & 
E0ESC
){

30 
d©a
 |= 0x80;

31 
shi·
 &~
E0ESC
;

34 
shi·
 |
shi·code
[
d©a
];

35 
shi·
 ^
toggÀcode
[
d©a
];

36 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

37 if(
shi·
 & 
CAPSLOCK
){

38 if('a' <
c
 && c <= 'z')

39 
c
 += 'A' - 'a';

40 if('A' <
c
 && c <= 'Z')

41 
c
 += 'a' - 'A';

43  
c
;

44 
	}
}

47 
	$kbdöå
()

49 
	`c⁄sﬁeöå
(
kbdgëc
);

50 
	}
}

	@kbd.h

3 
	#KBSTATP
 0x64

4 
	#KBS_DIB
 0x01

5 
	#KBDATAP
 0x60

6 

	)

7 
	#NO
 0

	)

9 
	#SHIFT
 (1<<0)

	)

10 
	#CTL
 (1<<1)

	)

11 
	#ALT
 (1<<2)

	)

13 
	#CAPSLOCK
 (1<<3)

	)

14 
	#NUMLOCK
 (1<<4)

	)

15 
	#SCROLLLOCK
 (1<<5)

	)

17 
	#E0ESC
 (1<<6)

	)

20 
	#KEY_HOME
 0xE0

	)

21 
	#KEY_END
 0xE1

	)

22 
	#KEY_UP
 0xE2

	)

23 
	#KEY_DN
 0xE3

	)

24 
	#KEY_LF
 0xE4

	)

25 
	#KEY_RT
 0xE5

	)

26 
	#KEY_PGUP
 0xE6

	)

27 
	#KEY_PGDN
 0xE7

	)

28 
	#KEY_INS
 0xE8

	)

29 
	#KEY_DEL
 0xE9

	)

32 
	#C
(
x
Ë(x - '@')

	)

34 
uch¨
 
	gshi·code
[256] =

36 [0x1D] 
CTL
,

37 [0x2A] 
SHIFT
,

38 [0x36] 
SHIFT
,

39 [0x38] 
ALT
,

40 [0x9D] 
CTL
,

41 [0xB8] 
ALT


44 
uch¨
 
	gtoggÀcode
[256] =

46 [0x3A] 
CAPSLOCK
,

47 [0x45] 
NUMLOCK
,

48 [0x46] 
SCROLLLOCK


51 
uch¨
 
	gn‹mÆm≠
[256] =

53 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

56 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

58 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

59 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

60 
NO
, ' ', NO, NO, NO, NO, NO, NO,

61 
NO
, NO, NO, NO, NO, NO, NO, '7',

63 '2', '3', '0', '.', 
NO
, NO, NO, NO,

66 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

67 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

68 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

69 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

70 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


73 
uch¨
 
	gshi·m≠
[256] =

75 
NO
, 033, '!', '@', '#', '$', '%', '^',

78 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

80 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

81 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

82 
NO
, ' ', NO, NO, NO, NO, NO, NO,

83 
NO
, NO, NO, NO, NO, NO, NO, '7',

85 '2', '3', '0', '.', 
NO
, NO, NO, NO,

88 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

89 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

90 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

91 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

92 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


95 
uch¨
 
	g˘lm≠
[256] =

97 
NO
, NO, NO, NO, NO, NO, NO, NO,

98 
NO
, NO, NO, NO, NO, NO, NO, NO,

99 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

100 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

101 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

102 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

103 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

105 [0xB5] 
C
('/'),

106 [0xC8] 
KEY_UP
, [0xD0] 
KEY_DN
,

107 [0xC9] 
KEY_PGUP
, [0xD1] 
KEY_PGDN
,

108 [0xCB] 
KEY_LF
, [0xCD] 
KEY_RT
,

109 [0x97] 
KEY_HOME
, [0xCF] 
KEY_END
,

110 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


	@kill.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "usage: killÖid...\n");

12 
	`exô
();

14 
i
=1; i<
¨gc
; i++)

15 
	`kûl
(
	`©oi
(
¨gv
[
i
]));

16 
	`exô
();

17 
	}
}

	@lapic.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"d©e.h
"

7 
	~"memœyout.h
"

8 
	~"å≠s.h
"

9 
	~"mmu.h
"

10 
	~"x86.h
"

13 
	#ID
 (0x0020/4)

14 
	#VER
 (0x0030/4)

15 
	#TPR
 (0x0080/4)

16 
	#EOI
 (0x00B0/4)

17 
	#SVR
 (0x00F0/4)

18 
	#ENABLE
 0x00000100

19 
	#ESR
 (0x0280/4)

20 
	#ICRLO
 (0x0300/4)

21 
	#INIT
 0x00000500

22 
	#STARTUP
 0x00000600

23 
	#DELIVS
 0x00001000

24 
	#ASSERT
 0x00004000

25 
	#DEASSERT
 0x00000000

	)

26 
	#LEVEL
 0x00008000

27 
	#BCAST
 0x00080000

28 
	#BUSY
 0x00001000

	)

29 
	#FIXED
 0x00000000

	)

30 
	#ICRHI
 (0x0310/4)

31 
	#TIMER
 (0x0320/4)

32 
	#X1
 0x0000000B

33 
	#PERIODIC
 0x00020000

34 
	#PCINT
 (0x0340/4)

35 
	#LINT0
 (0x0350/4)

36 
	#LINT1
 (0x0360/4)

37 
	#ERROR
 (0x0370/4)

38 
	#MASKED
 0x00010000

39 
	#TICR
 (0x0380/4)

40 
	#TCCR
 (0x0390/4)

41 
	#TDCR
 (0x03E0/4)

42 

	)

43 vﬁ©ûê
uöt
 *
	gœpic
;

46 
	$œpicw
(
ödex
, 
vÆue
)

48 
œpic
[
ödex
] = 
vÆue
;

49 
œpic
[
ID
];

50 
	}
}

54 
	$œpicöô
()

56 if(!
œpic
)

60 
	`œpicw
(
SVR
, 
ENABLE
 | (
T_IRQ0
 + 
IRQ_SPURIOUS
));

66 
	`œpicw
(
TDCR
, 
X1
);

67 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
T_IRQ0
 + 
IRQ_TIMER
));

68 
	`œpicw
(
TICR
, 10000000);

71 
	`œpicw
(
LINT0
, 
MASKED
);

72 
	`œpicw
(
LINT1
, 
MASKED
);

76 if(((
œpic
[
VER
]>>16) & 0xFF) >= 4)

77 
	`œpicw
(
PCINT
, 
MASKED
);

80 
	`œpicw
(
ERROR
, 
T_IRQ0
 + 
IRQ_ERROR
);

83 
	`œpicw
(
ESR
, 0);

84 
	`œpicw
(
ESR
, 0);

87 
	`œpicw
(
EOI
, 0);

90 
	`œpicw
(
ICRHI
, 0);

91 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

92 
œpic
[
ICRLO
] & 
DELIVS
)

96 
	`œpicw
(
TPR
, 0);

97 
	}
}

100 
	$˝unum
()

107 if(
	`ªadeÊags
()&
FL_IF
){

108 
n
;

109 if(
n
++ == 0)

110 
	`˝rötf
("cpu called from %x with interruptsÉnabled\n",

111 
	`__buûtö_ªtu∫_addªss
(0));

114 if(
œpic
)

115  
œpic
[
ID
]>>24;

117 
	}
}

121 
	$œpi˚oi
()

123 if(
œpic
)

124 
	`œpicw
(
EOI
, 0);

125 
	}
}

130 
	$mi¸odñay
(
us
)

132 
	}
}

134 
	#CMOS_PORT
 0x70

	)

135 
	#CMOS_RETURN
 0x71

	)

140 
	$œpic°¨èp
(
uch¨
 
≠icid
, 
uöt
 
addr
)

142 
i
;

143 
ush‹t
 *
wrv
;

148 
	`outb
(
CMOS_PORT
, 0xF);

149 
	`outb
(
CMOS_PORT
+1, 0x0A);

150 
wrv
 = (
ush‹t
*)
	`P2V
((0x40<<4 | 0x67));

151 
wrv
[0] = 0;

152 
wrv
[1] = 
addr
 >> 4;

156 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

157 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

158 
	`mi¸odñay
(200);

159 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

160 
	`mi¸odñay
(100);

167 
i
 = 0; i < 2; i++){

168 
	`œpicw
(
ICRHI
, 
≠icid
<<24);

169 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
>>12));

170 
	`mi¸odñay
(200);

172 
	}
}

174 
	#CMOS_STATA
 0x0a

	)

175 
	#CMOS_STATB
 0x0b

	)

176 
	#CMOS_UIP
 (1 << 7)

177 

	)

178 
	#SECS
 0x00

	)

179 
	#MINS
 0x02

	)

180 
	#HOURS
 0x04

	)

181 
	#DAY
 0x07

	)

182 
	#MONTH
 0x08

	)

183 
	#YEAR
 0x09

	)

185 
uöt
 
	$cmos_ªad
(
uöt
 
ªg
)

187 
	`outb
(
CMOS_PORT
, 
ªg
);

188 
	`mi¸odñay
(200);

190  
	`öb
(
CMOS_RETURN
);

191 
	}
}

193 
	$fûl_πcd©e
(
πcd©e
 *
r
)

195 
r
->
£c⁄d
 = 
	`cmos_ªad
(
SECS
);

196 
r
->
möuã
 = 
	`cmos_ªad
(
MINS
);

197 
r
->
hour
 = 
	`cmos_ªad
(
HOURS
);

198 
r
->
day
 = 
	`cmos_ªad
(
DAY
);

199 
r
->
m⁄th
 = 
	`cmos_ªad
(
MONTH
);

200 
r
->
yór
 = 
	`cmos_ªad
(
YEAR
);

201 
	}
}

204 
	$cmo°ime
(
πcd©e
 *
r
)

206 
πcd©e
 
t1
, 
t2
;

207 
sb
, 
bcd
;

209 
sb
 = 
	`cmos_ªad
(
CMOS_STATB
);

211 
bcd
 = (
sb
 & (1 << 2)) == 0;

215 
	`fûl_πcd©e
(&
t1
);

216 i‡(
	`cmos_ªad
(
CMOS_STATA
Ë& 
CMOS_UIP
)

218 
	`fûl_πcd©e
(&
t2
);

219 i‡(
	`memcmp
(&
t1
, &
t2
, (t1)) == 0)

224 i‡(
bcd
) {

225 
	#CONV
(
x
Ë(
t1
.x = (—1.x >> 4Ë* 10Ë+ (t1.x & 0xf))

	)

226 
	`CONV
(
£c⁄d
);

227 
	`CONV
(
möuã
);

228 
	`CONV
(
hour
 );

229 
	`CONV
(
day
 );

230 
	`CONV
(
m⁄th
 );

231 
	`CONV
(
yór
 );

232 #unde‡
CONV


235 *
r
 = 
t1
;

236 
r
->
yór
 += 2000;

237 
	}
}

	@ln.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 if(
¨gc
 != 3){

9 
	`¥ötf
(2, "Usage:Ün oldÇew\n");

10 
	`exô
();

12 if(
	`lök
(
¨gv
[1],árgv[2]) < 0)

13 
	`¥ötf
(2, "lök %†%s: faûed\n", 
¨gv
[1],árgv[2]);

14 
	`exô
();

15 
	}
}

	@log.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"•ölock.h
"

5 
	~"fs.h
"

6 
	~"buf.h
"

33 
	sloghódî
 {

34 
	mn
;

35 
	mblock
[
LOGSIZE
];

38 
	slog
 {

39 
•ölock
 
	mlock
;

40 
	m°¨t
;

41 
	msize
;

42 
	mout°™dög
;

43 
	mcommôtög
;

44 
	mdev
;

45 
loghódî
 
	mlh
;

47 
log
 
	glog
;

49 
ªcovî_‰om_log
();

50 
commô
();

53 
	$öôlog
(
dev
)

55 i‡((
loghódî
Ë>
BSIZE
)

56 
	`∑nic
("initlog:Åoo bigÜogheader");

58 
su≥rblock
 
sb
;

59 
	`öôlock
(&
log
.
lock
, "log");

60 
	`ªadsb
(
dev
, &
sb
);

61 
log
.
°¨t
 = 
sb
.
log°¨t
;

62 
log
.
size
 = 
sb
.
∆og
;

63 
log
.
dev
 = dev;

64 
	`ªcovî_‰om_log
();

65 
	}
}

69 
	$ö°Æl_å™s
()

71 
èû
;

73 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++) {

74 
buf
 *
lbuf
 = 
	`bªad
(
log
.
dev
,Üog.
°¨t
+
èû
+1);

75 
buf
 *
dbuf
 = 
	`bªad
(
log
.
dev
,Üog.
lh
.
block
[
èû
]);

76 
	`memmove
(
dbuf
->
d©a
, 
lbuf
->d©a, 
BSIZE
);

77 
	`bwrôe
(
dbuf
);

78 
	`bªl£
(
lbuf
);

79 
	`bªl£
(
dbuf
);

81 
	}
}

85 
	$ªad_hód
()

87 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

88 
loghódî
 *
lh
 = (loghódî *Ë(
buf
->
d©a
);

89 
i
;

90 
log
.
lh
.
n
 =Üh->n;

91 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

92 
log
.
lh
.
block
[
i
] =Üh->block[i];

94 
	`bªl£
(
buf
);

95 
	}
}

101 
	$wrôe_hód
()

103 
buf
 *bu‡
	`bªad
(
log
.
dev
,Üog.
°¨t
);

104 
loghódî
 *
hb
 = (loghódî *Ë(
buf
->
d©a
);

105 
i
;

106 
hb
->
n
 = 
log
.
lh
.n;

107 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

108 
hb
->
block
[
i
] = 
log
.
lh
.block[i];

110 
	`bwrôe
(
buf
);

111 
	`bªl£
(
buf
);

112 
	}
}

115 
	$ªcovî_‰om_log
()

117 
	`ªad_hód
();

118 
	`ö°Æl_å™s
();

119 
log
.
lh
.
n
 = 0;

120 
	`wrôe_hód
();

121 
	}
}

125 
	$begö_›
()

127 
	`acquúe
(&
log
.
lock
);

129 if(
log
.
commôtög
){

130 
	`¶ìp
(&
log
, &log.
lock
);

131 } if(
log
.
lh
.
n
 + (log.
out°™dög
+1)*
MAXOPBLOCKS
 > 
LOGSIZE
){

133 
	`¶ìp
(&
log
, &log.
lock
);

135 
log
.
out°™dög
 += 1;

136 
	`ªÀa£
(&
log
.
lock
);

140 
	}
}

145 
	$íd_›
()

147 
do_commô
 = 0;

149 
	`acquúe
(&
log
.
lock
);

150 
log
.
out°™dög
 -= 1;

151 if(
log
.
commôtög
)

152 
	`∑nic
("log.committing");

153 if(
log
.
out°™dög
 == 0){

154 
do_commô
 = 1;

155 
log
.
commôtög
 = 1;

158 
	`wakeup
(&
log
);

160 
	`ªÀa£
(&
log
.
lock
);

162 if(
do_commô
){

165 
	`commô
();

166 
	`acquúe
(&
log
.
lock
);

167 
log
.
commôtög
 = 0;

168 
	`wakeup
(&
log
);

169 
	`ªÀa£
(&
log
.
lock
);

171 
	}
}

175 
	$wrôe_log
()

177 
èû
;

179 
èû
 = 0;Åaû < 
log
.
lh
.
n
;Åail++) {

180 
buf
 *
to
 = 
	`bªad
(
log
.
dev
,Üog.
°¨t
+
èû
+1);

181 
buf
 *
‰om
 = 
	`bªad
(
log
.
dev
,Üog.
lh
.
block
[
èû
]);

182 
	`memmove
(
to
->
d©a
, 
‰om
->d©a, 
BSIZE
);

183 
	`bwrôe
(
to
);

184 
	`bªl£
(
‰om
);

185 
	`bªl£
(
to
);

187 
	}
}

190 
	$commô
()

192 i‡(
log
.
lh
.
n
 > 0) {

193 
	`wrôe_log
();

194 
	`wrôe_hód
();

195 
	`ö°Æl_å™s
();

196 
log
.
lh
.
n
 = 0;

197 
	`wrôe_hód
();

199 
	}
}

211 
	$log_wrôe
(
buf
 *
b
)

213 
i
;

215 i‡(
log
.
lh
.
n
 >
LOGSIZE
 ||Üog.lh.¿>log.
size
 - 1)

216 
	`∑nic
("too bigáÅransaction");

217 i‡(
log
.
out°™dög
 < 1)

218 
	`∑nic
("log_write outside ofÅrans");

220 
	`acquúe
(&
log
.
lock
);

221 
i
 = 0; i < 
log
.
lh
.
n
; i++) {

222 i‡(
log
.
lh
.
block
[
i
] =
b
->
blockno
)

225 
log
.
lh
.
block
[
i
] = 
b
->
blockno
;

226 i‡(
i
 =
log
.
lh
.
n
)

227 
log
.
lh
.
n
++;

228 
b
->
Êags
 |
B_DIRTY
;

229 
	`ªÀa£
(&
log
.
lock
);

230 
	}
}

	@ls.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"fs.h
"

7 
	$fmäame
(*
∑th
)

9 
buf
[
DIRSIZ
+1];

10 *
p
;

13 
p
=
∑th
+
	`°æí
(path);Ö >=Öath && *p != '/';Ö--)

15 
p
++;

18 if(
	`°æí
(
p
Ë>
DIRSIZ
)

19  
p
;

20 
	`memmove
(
buf
, 
p
, 
	`°æí
(p));

21 
	`mem£t
(
buf
+
	`°æí
(
p
), ' ', 
DIRSIZ
-strlen(p));

22  
buf
;

23 
	}
}

26 
	$ls
(*
∑th
)

28 
buf
[512], *
p
;

29 
fd
;

30 
dúít
 
de
;

31 
°©
 
°
;

33 if((
fd
 = 
	`›í
(
∑th
, 0)) < 0){

34 
	`¥ötf
(2, "ls: c™nŸ o≥¿%s\n", 
∑th
);

38 if(
	`f°©
(
fd
, &
°
) < 0){

39 
	`¥ötf
(2, "ls: c™nŸ sèà%s\n", 
∑th
);

40 
	`˛o£
(
fd
);

44 
°
.
ty≥
){

45 
T_FILE
:

46 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
∑th
), 
°
.
ty≥
, st.
öo
, st.
size
);

49 
T_DIR
:

50 if(
	`°æí
(
∑th
Ë+ 1 + 
DIRSIZ
 + 1 >  
buf
){

51 
	`¥ötf
(1, "ls:ÖathÅooÜong\n");

54 
	`°r˝y
(
buf
, 
∑th
);

55 
p
 = 
buf
+
	`°æí
(buf);

56 *
p
++ = '/';

57 
	`ªad
(
fd
, &
de
, (de)) == (de)){

58 if(
de
.
öum
 == 0)

60 
	`memmove
(
p
, 
de
.
«me
, 
DIRSIZ
);

61 
p
[
DIRSIZ
] = 0;

62 if(
	`°©
(
buf
, &
°
) < 0){

63 
	`¥ötf
(1, "ls: c™nŸ sèà%s\n", 
buf
);

66 
	`¥ötf
(1, "%†%d %d %d\n", 
	`fmäame
(
buf
), 
°
.
ty≥
, st.
öo
, st.
size
);

70 
	`˛o£
(
fd
);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

77 
øj
=
	`hñlo
();

78 
	`¥ötf
(1,"%d\n",
øj
);

79 if(
¨gc
 < 2){

80 
	`ls
(".");

81 
	`exô
();

83 
i
=1; i<
¨gc
; i++)

84 
	`ls
(
¨gv
[
i
]);

85 
	`exô
();

86 
	}
}

	@main.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

9 
°¨tŸhîs
();

10 
	$mpmaö
(Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
pde_t
 *
kpgdú
;

12 
íd
[];

18 
	$maö
()

20 
	`köô1
(
íd
, 
	`P2V
(4*1024*1024));

21 
	`kvmÆloc
();

22 
	`mpöô
();

23 
	`œpicöô
();

24 
	`£göô
();

25 
	`˝rötf
("\n˝u%d: sèπög xv6\n\n", 
˝u
->
id
);

26 
	`picöô
();

27 
	`iﬂpicöô
();

28 
	`c⁄sﬁeöô
();

29 
	`u¨töô
();

30 
	`pöô
();

31 
	`tvöô
();

32 
	`böô
();

33 
	`fûeöô
();

34 
	`ideöô
();

35 if(!
ismp
)

36 
	`timîöô
();

37 
	`°¨tŸhîs
();

38 
	`köô2
(
	`P2V
(4*1024*1024), P2V(
PHYSTOP
));

39 
	`u£röô
();

41 
	`mpmaö
();

42 
	}
}

46 
	$m≥¡î
()

48 
	`swôchkvm
();

49 
	`£göô
();

50 
	`œpicöô
();

51 
	`mpmaö
();

52 
	}
}

56 
	$mpmaö
()

58 
	`˝rötf
("˝u%d: sèπög\n", 
˝u
->
id
);

59 
	`idtöô
();

60 
	`xchg
(&
˝u
->
°¨ãd
, 1);

61 
	`scheduÀr
();

62 
	}
}

64 
pde_t
 
	gíåypgdú
[];

68 
	$°¨tŸhîs
()

70 
uch¨
 
_bö¨y_íåyŸhî_°¨t
[], 
_bö¨y_íåyŸhî_size
[];

71 
uch¨
 *
code
;

72 
˝u
 *
c
;

73 *
°ack
;

78 
code
 = 
	`p2v
(0x7000);

79 
	`memmove
(
code
, 
_bö¨y_íåyŸhî_°¨t
, (
uöt
)
_bö¨y_íåyŸhî_size
);

81 
c
 = 
˝us
; c < cpus+
n˝u
; c++){

82 if(
c
 =
˝us
+
	`˝unum
())

88 
°ack
 = 
	`kÆloc
();

89 *(**)(
code
-4Ë
°ack
 + 
KSTACKSIZE
;

90 *(**)(
code
-8Ë
m≥¡î
;

91 *(**)(
code
-12Ë(*Ë
	`v2p
(
íåypgdú
);

93 
	`œpic°¨èp
(
c
->
id
, 
	`v2p
(
code
));

96 
c
->
°¨ãd
 == 0)

99 
	}
}

105 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

106 
pde_t
 
íåypgdú
[
NPDENTRIES
] = {

108 [0] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

110 [
KERNBASE
>>
PDXSHIFT
] = (0Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_PS
,

111 
	}
};

	@memide.c

4 
	~"ty≥s.h
"

5 
	~"defs.h
"

6 
	~"∑øm.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

9 
	~"x86.h
"

10 
	~"å≠s.h
"

11 
	~"•ölock.h
"

12 
	~"fs.h
"

13 
	~"buf.h
"

15 
uch¨
 
_bö¨y_fs_img_°¨t
[], 
_bö¨y_fs_img_size
[];

17 
	gdisksize
;

18 
uch¨
 *
	gmemdisk
;

21 
	$ideöô
()

23 
memdisk
 = 
_bö¨y_fs_img_°¨t
;

24 
disksize
 = (
uöt
)
_bö¨y_fs_img_size
/
BSIZE
;

25 
	}
}

29 
	$ideöå
()

32 
	}
}

38 
	$idîw
(
buf
 *
b
)

40 
uch¨
 *
p
;

42 if(!(
b
->
Êags
 & 
B_BUSY
))

43 
	`∑nic
("iderw: bufÇot busy");

44 if((
b
->
Êags
 & (
B_VALID
|
B_DIRTY
)) == B_VALID)

45 
	`∑nic
("iderw:ÇothingÅo do");

46 if(
b
->
dev
 != 1)

47 
	`∑nic
("iderw:ÑequestÇot for disk 1");

48 if(
b
->
blockno
 >
disksize
)

49 
	`∑nic
("iderw: block out ofÑange");

51 
p
 = 
memdisk
 + 
b
->
blockno
*
BSIZE
;

53 if(
b
->
Êags
 & 
B_DIRTY
){

54 
b
->
Êags
 &~
B_DIRTY
;

55 
	`memmove
(
p
, 
b
->
d©a
, 
BSIZE
);

57 
	`memmove
(
b
->
d©a
, 
p
, 
BSIZE
);

58 
b
->
Êags
 |
B_VALID
;

59 
	}
}

	@memlayout.h

3 
	#EXTMEM
 0x100000

4 
	#PHYSTOP
 0xE000000

5 
	#DEVSPACE
 0xFE000000

6 

	)

8 
	#KERNBASE
 0x80000000

9 
	#KERNLINK
 (
KERNBASE
+
EXTMEM
)

10 

	)

11 #i‚de‡
__ASSEMBLER__


13 
ölöe
 
uöt
 
	$v2p
(*
a
Ë{  ((
uöt
Ë◊)Ë- 
KERNBASE
; 
	}
}

14 
ölöe
 *
	$p2v
(
uöt
 
a
Ë{  (*Ë(◊Ë+ 
KERNBASE
); 
	}
}

18 
	#V2P
(
a
Ë(((
uöt
Ë◊)Ë- 
KERNBASE
)

	)

19 
	#P2V
(
a
Ë(((*Ë◊)Ë+ 
KERNBASE
)

	)

21 
	#V2P_WO
(
x
Ë((xË- 
KERNBASE
)

22 
	#P2V_WO
(
x
Ë((xË+ 
KERNBASE
)

	@mkdir.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage: mkdir files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`mkdú
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "mkdú: %†ÁûedÅÿ¸óã\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@mkfs.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<as£π.h
>

8 
	#°©
 
xv6_°©


9 
	~"ty≥s.h
"

	)

10 
	~"fs.h
"

11 
	~"°©.h
"

12 
	~"∑øm.h
"

14 #i‚de‡
°©ic_as£π


15 
	#°©ic_as£π
(
a
, 
b
Ëdÿ{ 0Ë0: ◊): ; } 0)

	)

18 
	#NINODES
 200

	)

23 
	gnbôm≠
 = 
FSSIZE
/(
BSIZE
*8) + 1;

24 
	gnöodeblocks
 = 
NINODES
 / 
IPB
 + 1;

25 
	g∆og
 = 
LOGSIZE
;

26 
	gnmëa
;

27 
	gnblocks
;

29 
	gfsfd
;

30 
su≥rblock
 
	gsb
;

31 
	gzî€s
[
BSIZE
];

32 
uöt
 
	g‰ìöode
 = 1;

33 
uöt
 
	g‰ìblock
;

36 
bÆloc
();

37 
w£˘
(
uöt
, *);

38 
wöode
(
uöt
, 
döode
*);

39 
röode
(
uöt
 
öum
, 
döode
 *
ù
);

40 
r£˘
(
uöt
 
£c
, *
buf
);

41 
uöt
 
üŒoc
(
ush‹t
 
ty≥
);

42 
üµíd
(
uöt
 
öum
, *
p
, 
n
);

45 
ush‹t


46 
	$xsh‹t
(
ush‹t
 
x
)

48 
ush‹t
 
y
;

49 
uch¨
 *
a
 = (uch¨*)&
y
;

50 
a
[0] = 
x
;

51 
a
[1] = 
x
 >> 8;

52  
y
;

53 
	}
}

55 
uöt


56 
	$xöt
(
uöt
 
x
)

58 
uöt
 
y
;

59 
uch¨
 *
a
 = (uch¨*)&
y
;

60 
a
[0] = 
x
;

61 
a
[1] = 
x
 >> 8;

62 
a
[2] = 
x
 >> 16;

63 
a
[3] = 
x
 >> 24;

64  
y
;

65 
	}
}

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
i
, 
cc
, 
fd
;

71 
uöt
 
roŸöo
, 
öum
, 
off
;

72 
dúít
 
de
;

73 
buf
[
BSIZE
];

74 
döode
 
dö
;

77 
	`°©ic_as£π
(() == 4, "Integers must be 4 bytes!");

79 if(
¨gc
 < 2){

80 
	`Ârötf
(
°dîr
, "Usage: mkfs fs.img files...\n");

81 
	`exô
(1);

84 
	`as£π
((
BSIZE
 % (
döode
)) == 0);

85 
	`as£π
((
BSIZE
 % (
dúít
)) == 0);

87 
fsfd
 = 
	`›í
(
¨gv
[1], 
O_RDWR
|
O_CREAT
|
O_TRUNC
, 0666);

88 if(
fsfd
 < 0){

89 
	`≥º‹
(
¨gv
[1]);

90 
	`exô
(1);

94 
nmëa
 = 2 + 
∆og
 + 
nöodeblocks
 + 
nbôm≠
;

95 
nblocks
 = 
FSSIZE
 - 
nmëa
;

97 
sb
.
size
 = 
	`xöt
(
FSSIZE
);

98 
sb
.
nblocks
 = 
	`xöt
(nblocks);

99 
sb
.
nöodes
 = 
	`xöt
(
NINODES
);

100 
sb
.
∆og
 = 
	`xöt
(nlog);

101 
sb
.
log°¨t
 = 
	`xöt
(2);

102 
sb
.
öode°¨t
 = 
	`xöt
(2+
∆og
);

103 
sb
.
bm≠°¨t
 = 
	`xöt
(2+
∆og
+
nöodeblocks
);

105 
	`¥ötf
("nmeta %d (boot, super,Üog blocks %u inode blocks %u, bitmap blocks %u) blocks %dÅotal %d\n",

106 
nmëa
, 
∆og
, 
nöodeblocks
, 
nbôm≠
, 
nblocks
, 
FSSIZE
);

108 
‰ìblock
 = 
nmëa
;

110 
i
 = 0; i < 
FSSIZE
; i++)

111 
	`w£˘
(
i
, 
zî€s
);

113 
	`mem£t
(
buf
, 0, (buf));

114 
	`memmove
(
buf
, &
sb
, (sb));

115 
	`w£˘
(1, 
buf
);

117 
roŸöo
 = 
	`üŒoc
(
T_DIR
);

118 
	`as£π
(
roŸöo
 =
ROOTINO
);

120 
	`bzîo
(&
de
, (de));

121 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

122 
	`°r˝y
(
de
.
«me
, ".");

123 
	`üµíd
(
roŸöo
, &
de
, (de));

125 
	`bzîo
(&
de
, (de));

126 
de
.
öum
 = 
	`xsh‹t
(
roŸöo
);

127 
	`°r˝y
(
de
.
«me
, "..");

128 
	`üµíd
(
roŸöo
, &
de
, (de));

130 
i
 = 2; i < 
¨gc
; i++){

131 
	`as£π
(
	`ödex
(
¨gv
[
i
], '/') == 0);

133 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

134 
	`≥º‹
(
¨gv
[
i
]);

135 
	`exô
(1);

142 if(
¨gv
[
i
][0] == '_')

143 ++
¨gv
[
i
];

145 
öum
 = 
	`üŒoc
(
T_FILE
);

147 
	`bzîo
(&
de
, (de));

148 
de
.
öum
 = 
	`xsh‹t
(inum);

149 
	`°∫˝y
(
de
.
«me
, 
¨gv
[
i
], 
DIRSIZ
);

150 
	`üµíd
(
roŸöo
, &
de
, (de));

152 (
cc
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0)

153 
	`üµíd
(
öum
, 
buf
, 
cc
);

155 
	`˛o£
(
fd
);

159 
	`röode
(
roŸöo
, &
dö
);

160 
off
 = 
	`xöt
(
dö
.
size
);

161 
off
 = ((off/
BSIZE
) + 1) * BSIZE;

162 
dö
.
size
 = 
	`xöt
(
off
);

163 
	`wöode
(
roŸöo
, &
dö
);

165 
	`bÆloc
(
‰ìblock
);

167 
	`exô
(0);

168 
	}
}

171 
	$w£˘
(
uöt
 
£c
, *
buf
)

173 if(
	`l£ek
(
fsfd
, 
£c
 * 
BSIZE
, 0) != sec * BSIZE){

174 
	`≥º‹
("lseek");

175 
	`exô
(1);

177 if(
	`wrôe
(
fsfd
, 
buf
, 
BSIZE
) != BSIZE){

178 
	`≥º‹
("write");

179 
	`exô
(1);

181 
	}
}

184 
	$wöode
(
uöt
 
öum
, 
döode
 *
ù
)

186 
buf
[
BSIZE
];

187 
uöt
 
bn
;

188 
döode
 *
dù
;

190 
bn
 = 
	`IBLOCK
(
öum
, 
sb
);

191 
	`r£˘
(
bn
, 
buf
);

192 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

193 *
dù
 = *
ù
;

194 
	`w£˘
(
bn
, 
buf
);

195 
	}
}

198 
	$röode
(
uöt
 
öum
, 
döode
 *
ù
)

200 
buf
[
BSIZE
];

201 
uöt
 
bn
;

202 
döode
 *
dù
;

204 
bn
 = 
	`IBLOCK
(
öum
, 
sb
);

205 
	`r£˘
(
bn
, 
buf
);

206 
dù
 = ((
döode
*)
buf
Ë+ (
öum
 % 
IPB
);

207 *
ù
 = *
dù
;

208 
	}
}

211 
	$r£˘
(
uöt
 
£c
, *
buf
)

213 if(
	`l£ek
(
fsfd
, 
£c
 * 
BSIZE
, 0) != sec * BSIZE){

214 
	`≥º‹
("lseek");

215 
	`exô
(1);

217 if(
	`ªad
(
fsfd
, 
buf
, 
BSIZE
) != BSIZE){

218 
	`≥º‹
("read");

219 
	`exô
(1);

221 
	}
}

223 
uöt


224 
	$üŒoc
(
ush‹t
 
ty≥
)

226 
uöt
 
öum
 = 
‰ìöode
++;

227 
döode
 
dö
;

229 
	`bzîo
(&
dö
, (din));

230 
dö
.
ty≥
 = 
	`xsh‹t
(type);

231 
dö
.
∆ök
 = 
	`xsh‹t
(1);

232 
dö
.
size
 = 
	`xöt
(0);

233 
	`wöode
(
öum
, &
dö
);

234  
öum
;

235 
	}
}

238 
	$bÆloc
(
u£d
)

240 
uch¨
 
buf
[
BSIZE
];

241 
i
;

243 
	`¥ötf
("bÆloc: fú° %d block†havêbì¿Æloˇãd\n", 
u£d
);

244 
	`as£π
(
u£d
 < 
BSIZE
*8);

245 
	`bzîo
(
buf
, 
BSIZE
);

246 
i
 = 0; i < 
u£d
; i++){

247 
buf
[
i
/8] = buf[i/8] | (0x1 << (i%8));

249 
	`¥ötf
("bÆloc: wrôêbôm≠ blockáà£˘‹ %d\n", 
sb
.
bm≠°¨t
);

250 
	`w£˘
(
sb
.
bm≠°¨t
, 
buf
);

251 
	}
}

253 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

256 
	$üµíd
(
uöt
 
öum
, *
xp
, 
n
)

258 *
p
 = (*)
xp
;

259 
uöt
 
fbn
, 
off
, 
n1
;

260 
döode
 
dö
;

261 
buf
[
BSIZE
];

262 
uöt
 
ödúe˘
[
NINDIRECT
];

263 
uöt
 
x
;

265 
	`röode
(
öum
, &
dö
);

266 
off
 = 
	`xöt
(
dö
.
size
);

268 
n
 > 0){

269 
fbn
 = 
off
 / 
BSIZE
;

270 
	`as£π
(
fbn
 < 
MAXFILE
);

271 if(
fbn
 < 
NDIRECT
){

272 if(
	`xöt
(
dö
.
addrs
[
fbn
]) == 0){

273 
dö
.
addrs
[
fbn
] = 
	`xöt
(
‰ìblock
++);

275 
x
 = 
	`xöt
(
dö
.
addrs
[
fbn
]);

277 if(
	`xöt
(
dö
.
addrs
[
NDIRECT
]) == 0){

278 
dö
.
addrs
[
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

280 
	`r£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

281 if(
ödúe˘
[
fbn
 - 
NDIRECT
] == 0){

282 
ödúe˘
[
fbn
 - 
NDIRECT
] = 
	`xöt
(
‰ìblock
++);

283 
	`w£˘
(
	`xöt
(
dö
.
addrs
[
NDIRECT
]), (*)
ödúe˘
);

285 
x
 = 
	`xöt
(
ödúe˘
[
fbn
-
NDIRECT
]);

287 
n1
 = 
	`mö
(
n
, (
fbn
 + 1Ë* 
BSIZE
 - 
off
);

288 
	`r£˘
(
x
, 
buf
);

289 
	`bc›y
(
p
, 
buf
 + 
off
 - (
fbn
 * 
BSIZE
), 
n1
);

290 
	`w£˘
(
x
, 
buf
);

291 
n
 -
n1
;

292 
off
 +
n1
;

293 
p
 +
n1
;

295 
dö
.
size
 = 
	`xöt
(
off
);

296 
	`wöode
(
öum
, &
dö
);

297 
	}
}

	@mmu.h

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#CR0_PE
 0x00000001

29 
	#CR0_MP
 0x00000002

30 
	#CR0_EM
 0x00000004

31 
	#CR0_TS
 0x00000008

32 
	#CR0_ET
 0x00000010

33 
	#CR0_NE
 0x00000020

34 
	#CR0_WP
 0x00010000

35 
	#CR0_AM
 0x00040000

36 
	#CR0_NW
 0x20000000

37 
	#CR0_CD
 0x40000000

38 
	#CR0_PG
 0x80000000

39 

	)

40 
	#CR4_PSE
 0x00000010

41 

	)

42 
	#SEG_KCODE
 1

43 
	#SEG_KDATA
 2

44 
	#SEG_KCPU
 3

45 
	#SEG_UCODE
 4

46 
	#SEG_UDATA
 5

47 
	#SEG_TSS
 6

48 

	)

50 #i‚de‡
__ASSEMBLER__


52 
	s£gdesc
 {

53 
uöt
 
	mlim_15_0
 : 16;

54 
uöt
 
	mba£_15_0
 : 16;

55 
uöt
 
	mba£_23_16
 : 8;

56 
uöt
 
	mty≥
 : 4;

57 
uöt
 
	ms
 : 1;

58 
uöt
 
	md∂
 : 2;

59 
uöt
 
	mp
 : 1;

60 
uöt
 
	mlim_19_16
 : 4;

61 
uöt
 
	mavl
 : 1;

62 
uöt
 
	mrsv1
 : 1;

63 
uöt
 
	mdb
 : 1;

64 
uöt
 
	mg
 : 1;

65 
uöt
 
	mba£_31_24
 : 8;

69 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

70 { ((
lim
Ë>> 12Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

71 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

72 (
uöt
)(
lim
Ë>> 28, 0, 0, 1, 1, (uöt)(
ba£
Ë>> 24 }

	)

73 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
£gdesc
) \

74 { (
lim
Ë& 0xffff, (
uöt
)(
ba£
) & 0xffff, \

75 ((
uöt
)(
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

76 (
uöt
)(
lim
Ë>> 16, 0, 0, 1, 0, (uöt)(
ba£
Ë>> 24 }

	)

79 
	#DPL_USER
 0x3

80 

	)

82 
	#STA_X
 0x8

83 
	#STA_E
 0x4

84 
	#STA_C
 0x4

85 
	#STA_W
 0x2

86 
	#STA_R
 0x2

87 
	#STA_A
 0x1

88 

	)

90 
	#STS_T16A
 0x1

91 
	#STS_LDT
 0x2

92 
	#STS_T16B
 0x3

93 
	#STS_CG16
 0x4

94 
	#STS_TG
 0x5

95 
	#STS_IG16
 0x6

96 
	#STS_TG16
 0x7

97 
	#STS_T32A
 0x9

98 
	#STS_T32B
 0xB

99 
	#STS_CG32
 0xC

100 
	#STS_IG32
 0xE

101 
	#STS_TG32
 0xF

102 

	)

112 
	#PDX
(
va
Ë(((
uöt
)(vaË>> 
PDXSHIFT
Ë& 0x3FF)

	)

115 
	#PTX
(
va
Ë(((
uöt
)(vaË>> 
PTXSHIFT
Ë& 0x3FF)

	)

118 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöt
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

121 
	#NPDENTRIES
 1024

122 
	#NPTENTRIES
 1024

123 
	#PGSIZE
 4096

124 

	)

125 
	#PGSHIFT
 12

126 
	#PTXSHIFT
 12

127 
	#PDXSHIFT
 22

128 

	)

129 
	#PGROUNDUP
(
sz
Ë(((sz)+
PGSIZE
-1Ë& ~(PGSIZE-1))

	)

130 
	#PGROUNDDOWN
(
a
Ë((◊)Ë& ~(
PGSIZE
-1))

	)

133 
	#PTE_P
 0x001

134 
	#PTE_W
 0x002

135 
	#PTE_U
 0x004

136 
	#PTE_PWT
 0x008

137 
	#PTE_PCD
 0x010

138 
	#PTE_A
 0x020

139 
	#PTE_D
 0x040

140 
	#PTE_PS
 0x080

141 
	#PTE_MBZ
 0x180

142 

	)

144 
	#PTE_ADDR
(
±e
Ë((
uöt
)’ãË& ~0xFFF)

	)

145 
	#PTE_FLAGS
(
±e
Ë((
uöt
)’ãË& 0xFFF)

	)

147 #i‚de‡
__ASSEMBLER__


148 
uöt
 
	t±e_t
;

151 
	sèsk°©e
 {

152 
uöt
 
	mlök
;

153 
uöt
 
	me•0
;

154 
ush‹t
 
	mss0
;

155 
ush‹t
 
	m∑ddög1
;

156 
uöt
 *
	me•1
;

157 
ush‹t
 
	mss1
;

158 
ush‹t
 
	m∑ddög2
;

159 
uöt
 *
	me•2
;

160 
ush‹t
 
	mss2
;

161 
ush‹t
 
	m∑ddög3
;

162 *
	m¸3
;

163 
uöt
 *
	meù
;

164 
uöt
 
	meÊags
;

165 
uöt
 
	móx
;

166 
uöt
 
	mecx
;

167 
uöt
 
	medx
;

168 
uöt
 
	mebx
;

169 
uöt
 *
	me•
;

170 
uöt
 *
	mebp
;

171 
uöt
 
	mesi
;

172 
uöt
 
	medi
;

173 
ush‹t
 
	mes
;

174 
ush‹t
 
	m∑ddög4
;

175 
ush‹t
 
	mcs
;

176 
ush‹t
 
	m∑ddög5
;

177 
ush‹t
 
	mss
;

178 
ush‹t
 
	m∑ddög6
;

179 
ush‹t
 
	mds
;

180 
ush‹t
 
	m∑ddög7
;

181 
ush‹t
 
	mfs
;

182 
ush‹t
 
	m∑ddög8
;

183 
ush‹t
 
	mgs
;

184 
ush‹t
 
	m∑ddög9
;

185 
ush‹t
 
	mldt
;

186 
ush‹t
 
	m∑ddög10
;

187 
ush‹t
 
	mt
;

188 
ush‹t
 
	miomb
;

193 
	sg©edesc
 {

194 
uöt
 
	moff_15_0
 : 16;

195 
uöt
 
	mcs
 : 16;

196 
uöt
 
	m¨gs
 : 5;

197 
uöt
 
	mrsv1
 : 3;

198 
uöt
 
	mty≥
 : 4;

199 
uöt
 
	ms
 : 1;

200 
uöt
 
	md∂
 : 2;

201 
uöt
 
	mp
 : 1;

202 
uöt
 
	moff_31_16
 : 16;

213 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d
) \

215 (
g©e
).
off_15_0
 = (
uöt
)(
off
) & 0xffff; \

216 (
g©e
).
cs
 = (
£l
); \

217 (
g©e
).
¨gs
 = 0; \

218 (
g©e
).
rsv1
 = 0; \

219 (
g©e
).
ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

220 (
g©e
).
s
 = 0; \

221 (
g©e
).
d∂
 = (
d
); \

222 (
g©e
).
p
 = 1; \

223 (
g©e
).
off_31_16
 = (
uöt
)(
off
) >> 16; \

224 }

	)

	@mp.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"∑øm.h
"

8 
	~"memœyout.h
"

9 
	~"mp.h
"

10 
	~"x86.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

14 
˝u
 
	g˝us
[
NCPU
];

15 
˝u
 *
	gb˝u
;

16 
	gismp
;

17 
	gn˝u
;

18 
uch¨
 
	giﬂpicid
;

21 
	$mpb˝u
()

23  
b˝u
-
˝us
;

24 
	}
}

26 
uch¨


27 
	$sum
(
uch¨
 *
addr
, 
Àn
)

29 
i
, 
sum
;

31 
sum
 = 0;

32 
i
=0; i<
Àn
; i++)

33 
sum
 +
addr
[
i
];

34  
sum
;

35 
	}
}

38 
mp
*

39 
	$mp£¨ch1
(
uöt
 
a
, 
Àn
)

41 
uch¨
 *
e
, *
p
, *
addr
;

43 
addr
 = 
	`p2v
(
a
);

44 
e
 = 
addr
+
Àn
;

45 
p
 = 
addr
;Ö < 
e
;Ö +(
mp
))

46 if(
	`memcmp
(
p
, "_MP_", 4Ë=0 && 
	`sum
’, (
mp
)) == 0)

47  (
mp
*)
p
;

49 
	}
}

56 
mp
*

57 
	$mp£¨ch
()

59 
uch¨
 *
bda
;

60 
uöt
 
p
;

61 
mp
 *mp;

63 
bda
 = (
uch¨
 *Ë
	`P2V
(0x400);

64 if((
p
 = ((
bda
[0x0F]<<8)| bda[0x0E]) << 4)){

65 if((
mp
 = 
	`mp£¨ch1
(
p
, 1024)))

66  
mp
;

68 
p
 = ((
bda
[0x14]<<8)|bda[0x13])*1024;

69 if((
mp
 = 
	`mp£¨ch1
(
p
-1024, 1024)))

70  
mp
;

72  
	`mp£¨ch1
(0xF0000, 0x10000);

73 
	}
}

80 
mpc⁄f
*

81 
	$mpc⁄fig
(
mp
 **
pmp
)

83 
mpc⁄f
 *
c⁄f
;

84 
mp
 *mp;

86 if((
mp
 = 
	`mp£¨ch
()Ë=0 || mp->
phyßddr
 == 0)

88 
c⁄f
 = (
mpc⁄f
*Ë
	`p2v
((
uöt
Ë
mp
->
phyßddr
);

89 if(
	`memcmp
(
c⁄f
, "PCMP", 4) != 0)

91 if(
c⁄f
->
vîsi⁄
 != 1 && conf->version != 4)

93 if(
	`sum
((
uch¨
*)
c⁄f
, c⁄f->
Àngth
) != 0)

95 *
pmp
 = 
mp
;

96  
c⁄f
;

97 
	}
}

100 
	$mpöô
()

102 
uch¨
 *
p
, *
e
;

103 
mp
 *mp;

104 
mpc⁄f
 *
c⁄f
;

105 
mµroc
 *
¥oc
;

106 
mpiﬂpic
 *
iﬂpic
;

108 
b˝u
 = &
˝us
[0];

109 if((
c⁄f
 = 
	`mpc⁄fig
(&
mp
)) == 0)

111 
ismp
 = 1;

112 
œpic
 = (
uöt
*)
c⁄f
->
œpiˇddr
;

113 
p
=(
uch¨
*)(
c⁄f
+1), 
e
=(uch¨*)c⁄f+c⁄f->
Àngth
;Ö<e; ){

114 *
p
){

115 
MPPROC
:

116 
¥oc
 = (
mµroc
*)
p
;

117 if(
n˝u
 !
¥oc
->
≠icid
){

118 
	`˝rötf
("mpöô:Ç˝u=%dápicid=%d\n", 
n˝u
, 
¥oc
->
≠icid
);

119 
ismp
 = 0;

121 if(
¥oc
->
Êags
 & 
MPBOOT
)

122 
b˝u
 = &
˝us
[
n˝u
];

123 
˝us
[
n˝u
].
id
 =Çcpu;

124 
n˝u
++;

125 
p
 +(
mµroc
);

127 
MPIOAPIC
:

128 
iﬂpic
 = (
mpiﬂpic
*)
p
;

129 
iﬂpicid
 = 
iﬂpic
->
≠i˙o
;

130 
p
 +(
mpiﬂpic
);

132 
MPBUS
:

133 
MPIOINTR
:

134 
MPLINTR
:

135 
p
 += 8;

138 
	`˝rötf
("mpöô: unknow¿c⁄figÅy≥ %x\n", *
p
);

139 
ismp
 = 0;

142 if(!
ismp
){

144 
n˝u
 = 1;

145 
œpic
 = 0;

146 
iﬂpicid
 = 0;

150 if(
mp
->
im¸p
){

153 
	`outb
(0x22, 0x70);

154 
	`outb
(0x23, 
	`öb
(0x23) | 1);

156 
	}
}

	@mp.h

3 
	smp
 {

4 
uch¨
 
	msig«tuª
[4];

5 *
	mphyßddr
;

6 
uch¨
 
	mÀngth
;

7 
uch¨
 
	m•e¸ev
;

8 
uch¨
 
	mchecksum
;

9 
uch¨
 
	mty≥
;

10 
uch¨
 
	mim¸p
;

11 
uch¨
 
	mª£rved
[3];

14 
	smpc⁄f
 {

15 
uch¨
 
	msig«tuª
[4];

16 
ush‹t
 
	mÀngth
;

17 
uch¨
 
	mvîsi⁄
;

18 
uch¨
 
	mchecksum
;

19 
uch¨
 
	m¥odu˘
[20];

20 
uöt
 *
	m€mèbÀ
;

21 
ush‹t
 
	m€mÀngth
;

22 
ush‹t
 
	míåy
;

23 
uöt
 *
	mœpiˇddr
;

24 
ush‹t
 
	mxÀngth
;

25 
uch¨
 
	mxchecksum
;

26 
uch¨
 
	mª£rved
;

29 
	smµroc
 {

30 
uch¨
 
	mty≥
;

31 
uch¨
 
	m≠icid
;

32 
uch¨
 
	mvîsi⁄
;

33 
uch¨
 
	mÊags
;

34 
	#MPBOOT
 0x02

35 
uch¨
 
sig«tuª
[4];

36 
uöt
 
„©uª
;

37 
uch¨
 
ª£rved
[8];

	)

40 
	smpiﬂpic
 {

41 
uch¨
 
	mty≥
;

42 
uch¨
 
	m≠i˙o
;

43 
uch¨
 
	mvîsi⁄
;

44 
uch¨
 
	mÊags
;

45 
uöt
 *
	maddr
;

49 
	#MPPROC
 0x00

50 
	#MPBUS
 0x01

51 
	#MPIOAPIC
 0x02

52 
	#MPIOINTR
 0x03

53 
	#MPLINTR
 0x04

54 

	)

	@param.h

1 
	#NPROC
 64

2 
	#KSTACKSIZE
 4096

3 
	#NCPU
 8

4 
	#NOFILE
 16

5 
	#NFILE
 100

6 
	#NINODE
 50

7 
	#NDEV
 10

8 
	#ROOTDEV
 1

9 
	#MAXARG
 32

10 
	#MAXOPBLOCKS
 10

11 
	#LOGSIZE
 (
MAXOPBLOCKS
*3)

12 
	#NBUF
 (
MAXOPBLOCKS
*3)

13 
	#FSSIZE
 1000

14 

	)

	@picirq.c

3 
	~"ty≥s.h
"

4 
	~"x86.h
"

5 
	~"å≠s.h
"

8 
	#IO_PIC1
 0x20

9 
	#IO_PIC2
 0xA0

10 

	)

11 
	#IRQ_SLAVE
 2

12 

	)

15 
ush‹t
 
	gúqmask
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

18 
	$pic£tmask
(
ush‹t
 
mask
)

20 
úqmask
 = 
mask
;

21 
	`outb
(
IO_PIC1
+1, 
mask
);

22 
	`outb
(
IO_PIC2
+1, 
mask
 >> 8);

23 
	}
}

26 
	$pi˚«bÀ
(
úq
)

28 
	`pic£tmask
(
úqmask
 & ~(1<<
úq
));

29 
	}
}

33 
	$picöô
()

36 
	`outb
(
IO_PIC1
+1, 0xFF);

37 
	`outb
(
IO_PIC2
+1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
+1, 
T_IRQ0
);

52 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
+1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
+1, 
T_IRQ0
 + 8);

67 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
+1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 if(
úqmask
 != 0xFFFF)

83 
	`pic£tmask
(
úqmask
);

84 
	}
}

	@pipe.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"mmu.h
"

5 
	~"¥oc.h
"

6 
	~"fs.h
"

7 
	~"fûe.h
"

8 
	~"•ölock.h
"

10 
	#PIPESIZE
 512

	)

12 
	spùe
 {

13 
•ölock
 
	mlock
;

14 
	md©a
[
PIPESIZE
];

15 
uöt
 
	mƒód
;

16 
uöt
 
	mnwrôe
;

17 
	mªad›í
;

18 
	mwrôe›í
;

22 
	$pùóŒoc
(
fûe
 **
f0
, fûê**
f1
)

24 
pùe
 *
p
;

26 
p
 = 0;

27 *
f0
 = *
f1
 = 0;

28 if((*
f0
 = 
	`fûóŒoc
()Ë=0 || (*
f1
 = filealloc()) == 0)

29 
bad
;

30 if((
p
 = (
pùe
*)
	`kÆloc
()) == 0)

31 
bad
;

32 
p
->
ªad›í
 = 1;

33 
p
->
wrôe›í
 = 1;

34 
p
->
nwrôe
 = 0;

35 
p
->
ƒód
 = 0;

36 
	`öôlock
(&
p
->
lock
, "pipe");

37 (*
f0
)->
ty≥
 = 
FD_PIPE
;

38 (*
f0
)->
ªadabÀ
 = 1;

39 (*
f0
)->
wrôabÀ
 = 0;

40 (*
f0
)->
pùe
 = 
p
;

41 (*
f1
)->
ty≥
 = 
FD_PIPE
;

42 (*
f1
)->
ªadabÀ
 = 0;

43 (*
f1
)->
wrôabÀ
 = 1;

44 (*
f1
)->
pùe
 = 
p
;

48 
bad
:

49 if(
p
)

50 
	`k‰ì
((*)
p
);

51 if(*
f0
)

52 
	`fûe˛o£
(*
f0
);

53 if(*
f1
)

54 
	`fûe˛o£
(*
f1
);

56 
	}
}

59 
	$pùe˛o£
(
pùe
 *
p
, 
wrôabÀ
)

61 
	`acquúe
(&
p
->
lock
);

62 if(
wrôabÀ
){

63 
p
->
wrôe›í
 = 0;

64 
	`wakeup
(&
p
->
ƒód
);

66 
p
->
ªad›í
 = 0;

67 
	`wakeup
(&
p
->
nwrôe
);

69 if(
p
->
ªad›í
 =0 &&Ö->
wrôe›í
 == 0){

70 
	`ªÀa£
(&
p
->
lock
);

71 
	`k‰ì
((*)
p
);

73 
	`ªÀa£
(&
p
->
lock
);

74 
	}
}

78 
	$pùewrôe
(
pùe
 *
p
, *
addr
, 
n
)

80 
i
;

82 
	`acquúe
(&
p
->
lock
);

83 
i
 = 0; i < 
n
; i++){

84 
p
->
nwrôe
 =p->
ƒód
 + 
PIPESIZE
){

85 if(
p
->
ªad›í
 =0 || 
¥oc
->
kûÀd
){

86 
	`ªÀa£
(&
p
->
lock
);

89 
	`wakeup
(&
p
->
ƒód
);

90 
	`¶ìp
(&
p
->
nwrôe
, &p->
lock
);

92 
p
->
d©a
[p->
nwrôe
++ % 
PIPESIZE
] = 
addr
[
i
];

94 
	`wakeup
(&
p
->
ƒód
);

95 
	`ªÀa£
(&
p
->
lock
);

96  
n
;

97 
	}
}

100 
	$pùîód
(
pùe
 *
p
, *
addr
, 
n
)

102 
i
;

104 
	`acquúe
(&
p
->
lock
);

105 
p
->
ƒód
 =p->
nwrôe
 &&Ö->
wrôe›í
){

106 if(
¥oc
->
kûÀd
){

107 
	`ªÀa£
(&
p
->
lock
);

110 
	`¶ìp
(&
p
->
ƒód
, &p->
lock
);

112 
i
 = 0; i < 
n
; i++){

113 if(
p
->
ƒód
 =p->
nwrôe
)

115 
addr
[
i
] = 
p
->
d©a
[p->
ƒód
++ % 
PIPESIZE
];

117 
	`wakeup
(&
p
->
nwrôe
);

118 
	`ªÀa£
(&
p
->
lock
);

119  
i
;

120 
	}
}

	@printf.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$putc
(
fd
, 
c
)

8 
	`wrôe
(
fd
, &
c
, 1);

9 
	}
}

12 
	$¥ötöt
(
fd
, 
xx
, 
ba£
, 
sgn
)

14 
digôs
[] = "0123456789ABCDEF";

15 
buf
[16];

16 
i
, 
√g
;

17 
uöt
 
x
;

19 
√g
 = 0;

20 if(
sgn
 && 
xx
 < 0){

21 
√g
 = 1;

22 
x
 = -
xx
;

24 
x
 = 
xx
;

27 
i
 = 0;

29 
buf
[
i
++] = 
digôs
[
x
 % 
ba£
];

30 }(
x
 /
ba£
) != 0);

31 if(
√g
)

32 
buf
[
i
++] = '-';

34 --
i
 >= 0)

35 
	`putc
(
fd
, 
buf
[
i
]);

36 
	}
}

40 
	$¥ötf
(
fd
, *
fmt
, ...)

42 *
s
;

43 
c
, 
i
, 
°©e
;

44 
uöt
 *
≠
;

46 
°©e
 = 0;

47 
≠
 = (
uöt
*)(*)&
fmt
 + 1;

48 
i
 = 0; 
fmt
[i]; i++){

49 
c
 = 
fmt
[
i
] & 0xff;

50 if(
°©e
 == 0){

51 if(
c
 == '%'){

52 
°©e
 = '%';

54 
	`putc
(
fd
, 
c
);

56 } if(
°©e
 == '%'){

57 if(
c
 == 'd'){

58 
	`¥ötöt
(
fd
, *
≠
, 10, 1);

59 
≠
++;

60 } if(
c
 == 'x' || c == 'p'){

61 
	`¥ötöt
(
fd
, *
≠
, 16, 0);

62 
≠
++;

63 } if(
c
 == 's'){

64 
s
 = (*)*
≠
;

65 
≠
++;

66 if(
s
 == 0)

67 
s
 = "(null)";

68 *
s
 != 0){

69 
	`putc
(
fd
, *
s
);

70 
s
++;

72 } if(
c
 == 'c'){

73 
	`putc
(
fd
, *
≠
);

74 
≠
++;

75 } if(
c
 == '%'){

76 
	`putc
(
fd
, 
c
);

79 
	`putc
(
fd
, '%');

80 
	`putc
(
fd
, 
c
);

82 
°©e
 = 0;

85 
	}
}

	@proc.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"x86.h
"

7 
	~"¥oc.h
"

8 
	~"•ölock.h
"

11 
•ölock
 
	mlock
;

12 
¥oc
 
	m¥oc
[
NPROC
];

13 } 
	g±abÀ
;

15 
¥oc
 *
	göô¥oc
;

17 
	g√xçid
 = 1;

18 
f‹kªt
();

19 
å≠ªt
();

21 
wakeup1
(*
ch™
);

24 
	$pöô
()

26 
	`öôlock
(&
±abÀ
.
lock
, "ptable");

27 
	}
}

34 
¥oc
*

35 
	$Ælo˝roc
()

37 
¥oc
 *
p
;

38 *
•
;

40 
	`acquúe
(&
±abÀ
.
lock
);

41 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

42 if(
p
->
°©e
 =
UNUSED
)

43 
found
;

44 
	`ªÀa£
(&
±abÀ
.
lock
);

47 
found
:

48 
p
->
°©e
 = 
EMBRYO
;

49 
p
->
pid
 = 
√xçid
++;

50 
	`ªÀa£
(&
±abÀ
.
lock
);

51 
p
->
˘ime
 = 
ticks
;

52 
p
->
πime
 = 0;

55 if((
p
->
k°ack
 = 
	`kÆloc
()) == 0){

56 
p
->
°©e
 = 
UNUSED
;

59 
•
 = 
p
->
k°ack
 + 
KSTACKSIZE
;

62 
•
 - *
p
->
tf
;

63 
p
->
tf
 = (
å≠‰ame
*)
•
;

67 
•
 -= 4;

68 *(
uöt
*)
•
 = (uöt)
å≠ªt
;

70 
•
 - *
p
->
c⁄ãxt
;

71 
p
->
c⁄ãxt
 = (c⁄ãxt*)
•
;

72 
	`mem£t
(
p
->
c⁄ãxt
, 0,  *p->context);

73 
p
->
c⁄ãxt
->
eù
 = (
uöt
)
f‹kªt
;

75  
p
;

76 
	}
}

81 
	$u£röô
()

83 
¥oc
 *
p
;

84 
_bö¨y_öôcode_°¨t
[], 
_bö¨y_öôcode_size
[];

86 
p
 = 
	`Ælo˝roc
();

87 
öô¥oc
 = 
p
;

88 if((
p
->
pgdú
 = 
	`£tupkvm
()) == 0)

89 
	`∑nic
("userinit: out of memory?");

90 
	`öôuvm
(
p
->
pgdú
, 
_bö¨y_öôcode_°¨t
, ()
_bö¨y_öôcode_size
);

91 
p
->
sz
 = 
PGSIZE
;

92 
	`mem£t
(
p
->
tf
, 0, (*p->tf));

93 
p
->
tf
->
cs
 = (
SEG_UCODE
 << 3Ë| 
DPL_USER
;

94 
p
->
tf
->
ds
 = (
SEG_UDATA
 << 3Ë| 
DPL_USER
;

95 
p
->
tf
->
es
 =Ö->tf->
ds
;

96 
p
->
tf
->
ss
 =Ö->tf->
ds
;

97 
p
->
tf
->
eÊags
 = 
FL_IF
;

98 
p
->
tf
->
e•
 = 
PGSIZE
;

99 
p
->
tf
->
eù
 = 0;

101 
	`ß„°r˝y
(
p
->
«me
, "initcode", (p->name));

102 
p
->
cwd
 = 
	`«mei
("/");

104 
p
->
°©e
 = 
RUNNABLE
;

105 
	}
}

110 
	$grow¥oc
(
n
)

112 
uöt
 
sz
;

114 
sz
 = 
¥oc
->sz;

115 if(
n
 > 0){

116 if((
sz
 = 
	`Ælocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

118 } if(
n
 < 0){

119 if((
sz
 = 
	`dóŒocuvm
(
¥oc
->
pgdú
, sz, sz + 
n
)) == 0)

122 
¥oc
->
sz
 = sz;

123 
	`swôchuvm
(
¥oc
);

125 
	}
}

131 
	$f‹k
()

133 
i
, 
pid
;

134 
¥oc
 *
≈
;

137 if((
≈
 = 
	`Ælo˝roc
()) == 0)

141 if((
≈
->
pgdú
 = 
	`c›yuvm
(
¥oc
->pgdú,Öroc->
sz
)) == 0){

142 
	`k‰ì
(
≈
->
k°ack
);

143 
≈
->
k°ack
 = 0;

144 
≈
->
°©e
 = 
UNUSED
;

147 
≈
->
sz
 = 
¥oc
->sz;

148 
≈
->
∑ª¡
 = 
¥oc
;

149 *
≈
->
tf
 = *
¥oc
->tf;

152 
≈
->
tf
->
óx
 = 0;

154 
i
 = 0; i < 
NOFILE
; i++)

155 if(
¥oc
->
ofûe
[
i
])

156 
≈
->
ofûe
[
i
] = 
	`fûedup
(
¥oc
->ofile[i]);

157 
≈
->
cwd
 = 
	`idup
(
¥oc
->cwd);

159 
	`ß„°r˝y
(
≈
->
«me
, 
¥oc
->name, (proc->name));

161 
pid
 = 
≈
->pid;

164 
	`acquúe
(&
±abÀ
.
lock
);

165 
≈
->
°©e
 = 
RUNNABLE
;

166 
	`ªÀa£
(&
±abÀ
.
lock
);

168  
pid
;

169 
	}
}

175 
	$exô
()

177 
¥oc
 *
p
;

178 
fd
;

180 if(
¥oc
 =
öô¥oc
)

181 
	`∑nic
("initÉxiting");

184 
fd
 = 0; fd < 
NOFILE
; fd++){

185 if(
¥oc
->
ofûe
[
fd
]){

186 
	`fûe˛o£
(
¥oc
->
ofûe
[
fd
]);

187 
¥oc
->
ofûe
[
fd
] = 0;

191 
	`begö_›
();

192 
	`ùut
(
¥oc
->
cwd
);

193 
	`íd_›
();

194 
¥oc
->
cwd
 = 0;

196 
	`acquúe
(&
±abÀ
.
lock
);

199 
	`wakeup1
(
¥oc
->
∑ª¡
);

202 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

203 if(
p
->
∑ª¡
 =
¥oc
){

204 
p
->
∑ª¡
 = 
öô¥oc
;

205 if(
p
->
°©e
 =
ZOMBIE
)

206 
	`wakeup1
(
öô¥oc
);

211 
¥oc
->
°©e
 = 
ZOMBIE
;

212 
	`sched
();

213 
	`∑nic
("zombieÉxit");

214 
	}
}

219 
	$waô
()

221 
¥oc
 *
p
;

222 
havekids
, 
pid
;

224 
	`acquúe
(&
±abÀ
.
lock
);

227 
havekids
 = 0;

228 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

229 if(
p
->
∑ª¡
 !
¥oc
)

231 
havekids
 = 1;

232 if(
p
->
°©e
 =
ZOMBIE
){

234 
pid
 = 
p
->pid;

235 
	`k‰ì
(
p
->
k°ack
);

236 
p
->
k°ack
 = 0;

237 
	`‰ìvm
(
p
->
pgdú
);

238 
p
->
°©e
 = 
UNUSED
;

239 
p
->
pid
 = 0;

240 
p
->
∑ª¡
 = 0;

241 
p
->
«me
[0] = 0;

242 
p
->
kûÀd
 = 0;

243 
	`ªÀa£
(&
±abÀ
.
lock
);

244  
pid
;

249 if(!
havekids
 || 
¥oc
->
kûÀd
){

250 
	`ªÀa£
(&
±abÀ
.
lock
);

255 
	`¶ìp
(
¥oc
, &
±abÀ
.
lock
);

257 
	}
}

268 
	$scheduÀr
()

270 
¥oc
 *
p
;

274 
	`°i
();

277 
	`acquúe
(&
±abÀ
.
lock
);

278 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

279 if(
p
->
°©e
 !
RUNNABLE
)

285 
¥oc
 = 
p
;

286 
°¨t
 = 
ticks
;

287 
	`swôchuvm
(
p
);

288 
p
->
°©e
 = 
RUNNING
;

289 
	`swtch
(&
˝u
->
scheduÀr
, 
¥oc
->
c⁄ãxt
);

290 
íd
 = 
ticks
;

291 
p
->
πime
ı->πime+
íd
-
°¨t
;

292 
	`swôchkvm
();

296 
¥oc
 = 0;

298 
	`ªÀa£
(&
±abÀ
.
lock
);

301 
	}
}

306 
	$sched
()

308 
öã«
;

310 if(!
	`hﬁdög
(&
±abÀ
.
lock
))

311 
	`∑nic
("schedÖtable.lock");

312 if(
˝u
->
n˛i
 != 1)

313 
	`∑nic
("schedÜocks");

314 if(
¥oc
->
°©e
 =
RUNNING
)

315 
	`∑nic
("schedÑunning");

316 if(
	`ªadeÊags
()&
FL_IF
)

317 
	`∑nic
("sched interruptible");

318 
öã«
 = 
˝u
->intena;

319 
	`swtch
(&
¥oc
->
c⁄ãxt
, 
˝u
->
scheduÀr
);

320 
˝u
->
öã«
 = intena;

321 
	}
}

325 
	$yõld
()

327 
	`acquúe
(&
±abÀ
.
lock
);

328 
¥oc
->
°©e
 = 
RUNNABLE
;

329 
	`sched
();

330 
	`ªÀa£
(&
±abÀ
.
lock
);

331 
	}
}

336 
	$f‹kªt
()

338 
fú°
 = 1;

340 
	`ªÀa£
(&
±abÀ
.
lock
);

342 i‡(
fú°
) {

346 
fú°
 = 0;

347 
	`iöô
(
ROOTDEV
);

348 
	`öôlog
(
ROOTDEV
);

352 
	}
}

357 
	$¶ìp
(*
ch™
, 
•ölock
 *
lk
)

359 if(
¥oc
 == 0)

360 
	`∑nic
("sleep");

362 if(
lk
 == 0)

363 
	`∑nic
("sleep withoutÜk");

371 if(
lk
 !&
±abÀ
.
lock
){

372 
	`acquúe
(&
±abÀ
.
lock
);

373 
	`ªÀa£
(
lk
);

377 
¥oc
->
ch™
 = chan;

378 
¥oc
->
°©e
 = 
SLEEPING
;

379 
	`sched
();

382 
¥oc
->
ch™
 = 0;

385 if(
lk
 !&
±abÀ
.
lock
){

386 
	`ªÀa£
(&
±abÀ
.
lock
);

387 
	`acquúe
(
lk
);

389 
	}
}

395 
	$wakeup1
(*
ch™
)

397 
¥oc
 *
p
;

399 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++)

400 if(
p
->
°©e
 =
SLEEPING
 &&Ö->
ch™
 == chan)

401 
p
->
°©e
 = 
RUNNABLE
;

402 
	}
}

406 
	$wakeup
(*
ch™
)

408 
	`acquúe
(&
±abÀ
.
lock
);

409 
	`wakeup1
(
ch™
);

410 
	`ªÀa£
(&
±abÀ
.
lock
);

411 
	}
}

417 
	$kûl
(
pid
)

419 
¥oc
 *
p
;

421 
	`acquúe
(&
±abÀ
.
lock
);

422 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

423 if(
p
->
pid
 ==Öid){

424 
p
->
kûÀd
 = 1;

426 if(
p
->
°©e
 =
SLEEPING
)

427 
p
->
°©e
 = 
RUNNABLE
;

428 
	`ªÀa£
(&
±abÀ
.
lock
);

432 
	`ªÀa£
(&
±abÀ
.
lock
);

434 
	}
}

441 
	$¥ocdump
()

443 *
°©es
[] = {

444 [
UNUSED
] "unused",

445 [
EMBRYO
] "embryo",

446 [
SLEEPING
] "sleep ",

447 [
RUNNABLE
] "runble",

448 [
RUNNING
] "run ",

449 [
ZOMBIE
] "zombie"

451 
i
;

452 
¥oc
 *
p
;

453 *
°©e
;

454 
uöt
 
pc
[10];

456 
p
 = 
±abÀ
.
¥oc
;Ö < &±abÀ.¥oc[
NPROC
];Ö++){

457 if(
p
->
°©e
 =
UNUSED
)

459 if(
p
->
°©e
 >0 &&Ö->°©ê< 
	`NELEM
(
°©es
) && states[p->state])

460 
°©e
 = 
°©es
[
p
->state];

462 
°©e
 = "???";

463 
	`˝rötf
("%d %†%s", 
p
->
pid
, 
°©e
,Ö->
«me
);

464 if(
p
->
°©e
 =
SLEEPING
){

465 
	`gëˇŒîpcs
((
uöt
*)
p
->
c⁄ãxt
->
ebp
+2, 
pc
);

466 
i
=0; i<10 && 
pc
[i] != 0; i++)

467 
	`˝rötf
(" %p", 
pc
[
i
]);

469 
	`˝rötf
("\n");

471 
	}
}

	@proc.h

2 
	#NSEGS
 7

	)

5 
	s˝u
 {

6 
uch¨
 
	mid
;

7 
c⁄ãxt
 *
	mscheduÀr
;

8 
èsk°©e
 
	mts
;

9 
£gdesc
 
	mgdt
[
NSEGS
];

10 vﬁ©ûê
uöt
 
	m°¨ãd
;

11 
	mn˛i
;

12 
	möã«
;

15 
˝u
 *
	m˝u
;

16 
¥oc
 *
	m¥oc
;

19 
˝u
 
˝us
[
NCPU
];

20 
n˝u
;

30 
˝u
 *˝u 
asm
("%gs:0");

31 
¥oc
 *¥o¯
asm
("%gs:4");

44 
	sc⁄ãxt
 {

45 
uöt
 
	medi
;

46 
uöt
 
	mesi
;

47 
uöt
 
	mebx
;

48 
uöt
 
	mebp
;

49 
uöt
 
	meù
;

52 
	e¥oc°©e
 { 
	mUNUSED
, 
	mEMBRYO
, 
	mSLEEPING
, 
	mRUNNABLE
, 
	mRUNNING
, 
	mZOMBIE
 };

55 
	s¥oc
 {

56 
uöt
 
	msz
;

57 
pde_t
* 
	mpgdú
;

58 *
	mk°ack
;

59 
¥oc°©e
 
	m°©e
;

60 
	mpid
;

61 
¥oc
 *
	m∑ª¡
;

62 
å≠‰ame
 *
	mtf
;

63 
c⁄ãxt
 *
	mc⁄ãxt
;

64 *
	mch™
;

65 
	mkûÀd
;

66 
fûe
 *
	mofûe
[
NOFILE
];

67 
öode
 *
	mcwd
;

68 
	m«me
[16];

69 
	m˘ime
 ;

70 
	mëime
;

71 
	mπime
;

	@rm.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
;

10 if(
¨gc
 < 2){

11 
	`¥ötf
(2, "Usage:Ñm files...\n");

12 
	`exô
();

15 
i
 = 1; i < 
¨gc
; i++){

16 if(
	`u∆ök
(
¨gv
[
i
]) < 0){

17 
	`¥ötf
(2, "rm: %†ÁûedÅÿdñëe\n", 
¨gv
[
i
]);

22 
	`exô
();

23 
	}
}

	@sh.c

3 
	~"ty≥s.h
"

4 
	~"u£r.h
"

5 
	~"f˙é.h
"

8 
	#EXEC
 1

	)

9 
	#REDIR
 2

	)

10 
	#PIPE
 3

	)

11 
	#LIST
 4

	)

12 
	#BACK
 5

	)

14 
	#MAXARGS
 10

	)

16 
	scmd
 {

17 
	mty≥
;

20 
	sexeccmd
 {

21 
	mty≥
;

22 *
	m¨gv
[
MAXARGS
];

23 *
	mórgv
[
MAXARGS
];

26 
	sªdúcmd
 {

27 
	mty≥
;

28 
cmd
 *
	mcmd
;

29 *
	mfûe
;

30 *
	mefûe
;

31 
	mmode
;

32 
	mfd
;

35 
	spùecmd
 {

36 
	mty≥
;

37 
cmd
 *
	mÀ·
;

38 
cmd
 *
	mright
;

41 
	sli°cmd
 {

42 
	mty≥
;

43 
cmd
 *
	mÀ·
;

44 
cmd
 *
	mright
;

47 
	sbackcmd
 {

48 
	mty≥
;

49 
cmd
 *
	mcmd
;

52 
f‹k1
();

53 
∑nic
(*);

54 
cmd
 *
∑r£cmd
(*);

58 
	$runcmd
(
cmd
 *cmd)

60 
p
[2];

61 
backcmd
 *
bcmd
;

62 
execcmd
 *
ecmd
;

63 
li°cmd
 *
lcmd
;

64 
pùecmd
 *
pcmd
;

65 
ªdúcmd
 *
rcmd
;

67 if(
cmd
 == 0)

68 
	`exô
();

70 
cmd
->
ty≥
){

72 
	`∑nic
("runcmd");

74 
EXEC
:

75 
ecmd
 = (
execcmd
*)
cmd
;

76 if(
ecmd
->
¨gv
[0] == 0)

77 
	`exô
();

78 
	`exec
(
ecmd
->
¨gv
[0],Écmd->argv);

79 
	`¥ötf
(2, "exe¯%†Áûed\n", 
ecmd
->
¨gv
[0]);

82 
REDIR
:

83 
rcmd
 = (
ªdúcmd
*)
cmd
;

84 
	`˛o£
(
rcmd
->
fd
);

85 if(
	`›í
(
rcmd
->
fûe
,Ñcmd->
mode
) < 0){

86 
	`¥ötf
(2, "›í %†Áûed\n", 
rcmd
->
fûe
);

87 
	`exô
();

89 
	`runcmd
(
rcmd
->
cmd
);

92 
LIST
:

93 
lcmd
 = (
li°cmd
*)
cmd
;

94 if(
	`f‹k1
() == 0)

95 
	`runcmd
(
lcmd
->
À·
);

96 
	`waô
();

97 
	`runcmd
(
lcmd
->
right
);

100 
PIPE
:

101 
pcmd
 = (
pùecmd
*)
cmd
;

102 if(
	`pùe
(
p
) < 0)

103 
	`∑nic
("pipe");

104 if(
	`f‹k1
() == 0){

105 
	`˛o£
(1);

106 
	`dup
(
p
[1]);

107 
	`˛o£
(
p
[0]);

108 
	`˛o£
(
p
[1]);

109 
	`runcmd
(
pcmd
->
À·
);

111 if(
	`f‹k1
() == 0){

112 
	`˛o£
(0);

113 
	`dup
(
p
[0]);

114 
	`˛o£
(
p
[0]);

115 
	`˛o£
(
p
[1]);

116 
	`runcmd
(
pcmd
->
right
);

118 
	`˛o£
(
p
[0]);

119 
	`˛o£
(
p
[1]);

120 
	`waô
();

121 
	`waô
();

124 
BACK
:

125 
bcmd
 = (
backcmd
*)
cmd
;

126 if(
	`f‹k1
() == 0)

127 
	`runcmd
(
bcmd
->
cmd
);

130 
	`exô
();

131 
	}
}

134 
	$gëcmd
(*
buf
, 
nbuf
)

136 
	`¥ötf
(2, "$ ");

137 
	`mem£t
(
buf
, 0, 
nbuf
);

138 
	`gës
(
buf
, 
nbuf
);

139 if(
buf
[0] == 0)

142 
	}
}

145 
	$maö
()

147 
buf
[100];

148 
fd
;

151 (
fd
 = 
	`›í
("c⁄sﬁe", 
O_RDWR
)) >= 0){

152 if(
fd
 >= 3){

153 
	`˛o£
(
fd
);

159 
	`gëcmd
(
buf
, (buf)) >= 0){

160 if(
buf
[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){

163 
buf
[
	`°æí
(buf)-1] = 0;

164 if(
	`chdú
(
buf
+3) < 0)

165 
	`¥ötf
(2, "ˇ¬Ÿ cd %s\n", 
buf
+3);

168 if(
	`f‹k1
() == 0)

169 
	`runcmd
(
	`∑r£cmd
(
buf
));

170 
	`waô
();

172 
	`exô
();

173 
	}
}

176 
	$∑nic
(*
s
)

178 
	`¥ötf
(2, "%s\n", 
s
);

179 
	`exô
();

180 
	}
}

183 
	$f‹k1
()

185 
pid
;

187 
pid
 = 
	`f‹k
();

188 if(
pid
 == -1)

189 
	`∑nic
("fork");

190  
pid
;

191 
	}
}

196 
cmd
*

197 
	$execcmd
()

199 
execcmd
 *
cmd
;

201 
cmd
 = 
	`mÆloc
((*cmd));

202 
	`mem£t
(
cmd
, 0, (*cmd));

203 
cmd
->
ty≥
 = 
EXEC
;

204  (
cmd
*)cmd;

205 
	}
}

207 
cmd
*

208 
	$ªdúcmd
(
cmd
 *
subcmd
, *
fûe
, *
efûe
, 
mode
, 
fd
)

210 
ªdúcmd
 *
cmd
;

212 
cmd
 = 
	`mÆloc
((*cmd));

213 
	`mem£t
(
cmd
, 0, (*cmd));

214 
cmd
->
ty≥
 = 
REDIR
;

215 
cmd
->cmd = 
subcmd
;

216 
cmd
->
fûe
 = file;

217 
cmd
->
efûe
 =Éfile;

218 
cmd
->
mode
 = mode;

219 
cmd
->
fd
 = fd;

220  (
cmd
*)cmd;

221 
	}
}

223 
cmd
*

224 
	$pùecmd
(
cmd
 *
À·
, cmd *
right
)

226 
pùecmd
 *
cmd
;

228 
cmd
 = 
	`mÆloc
((*cmd));

229 
	`mem£t
(
cmd
, 0, (*cmd));

230 
cmd
->
ty≥
 = 
PIPE
;

231 
cmd
->
À·
 =Üeft;

232 
cmd
->
right
 =Ñight;

233  (
cmd
*)cmd;

234 
	}
}

236 
cmd
*

237 
	$li°cmd
(
cmd
 *
À·
, cmd *
right
)

239 
li°cmd
 *
cmd
;

241 
cmd
 = 
	`mÆloc
((*cmd));

242 
	`mem£t
(
cmd
, 0, (*cmd));

243 
cmd
->
ty≥
 = 
LIST
;

244 
cmd
->
À·
 =Üeft;

245 
cmd
->
right
 =Ñight;

246  (
cmd
*)cmd;

247 
	}
}

249 
cmd
*

250 
	$backcmd
(
cmd
 *
subcmd
)

252 
backcmd
 *
cmd
;

254 
cmd
 = 
	`mÆloc
((*cmd));

255 
	`mem£t
(
cmd
, 0, (*cmd));

256 
cmd
->
ty≥
 = 
BACK
;

257 
cmd
->cmd = 
subcmd
;

258  (
cmd
*)cmd;

259 
	}
}

263 
	gwhôe•a˚
[] = " \t\r\n\v";

264 
	gsymbﬁs
[] = "<|>&;()";

267 
	$gëtokí
(**
ps
, *
es
, **
q
, **
eq
)

269 *
s
;

270 
ªt
;

272 
s
 = *
ps
;

273 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

274 
s
++;

275 if(
q
)

276 *
q
 = 
s
;

277 
ªt
 = *
s
;

278 *
s
){

287 
s
++;

290 
s
++;

291 if(*
s
 == '>'){

292 
ªt
 = '+';

293 
s
++;

297 
ªt
 = 'a';

298 
s
 < 
es
 && !
	`°rchr
(
whôe•a˚
, *sË&& !°rchr(
symbﬁs
, *s))

299 
s
++;

302 if(
eq
)

303 *
eq
 = 
s
;

305 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

306 
s
++;

307 *
ps
 = 
s
;

308  
ªt
;

309 
	}
}

312 
	$≥ek
(**
ps
, *
es
, *
toks
)

314 *
s
;

316 
s
 = *
ps
;

317 
s
 < 
es
 && 
	`°rchr
(
whôe•a˚
, *s))

318 
s
++;

319 *
ps
 = 
s
;

320  *
s
 && 
	`°rchr
(
toks
, *s);

321 
	}
}

323 
cmd
 *
∑r£löe
(**, *);

324 
cmd
 *
∑r£pùe
(**, *);

325 
cmd
 *
∑r£exec
(**, *);

326 
cmd
 *
nu…îmö©e
(cmd*);

328 
cmd
*

329 
	$∑r£cmd
(*
s
)

331 *
es
;

332 
cmd
 *cmd;

334 
es
 = 
s
 + 
	`°æí
(s);

335 
cmd
 = 
	`∑r£löe
(&
s
, 
es
);

336 
	`≥ek
(&
s
, 
es
, "");

337 if(
s
 !
es
){

338 
	`¥ötf
(2, "À·ovîs: %s\n", 
s
);

339 
	`∑nic
("syntax");

341 
	`nu…îmö©e
(
cmd
);

342  
cmd
;

343 
	}
}

345 
cmd
*

346 
	$∑r£löe
(**
ps
, *
es
)

348 
cmd
 *cmd;

350 
cmd
 = 
	`∑r£pùe
(
ps
, 
es
);

351 
	`≥ek
(
ps
, 
es
, "&")){

352 
	`gëtokí
(
ps
, 
es
, 0, 0);

353 
cmd
 = 
	`backcmd
(cmd);

355 if(
	`≥ek
(
ps
, 
es
, ";")){

356 
	`gëtokí
(
ps
, 
es
, 0, 0);

357 
cmd
 = 
	`li°cmd
(cmd, 
	`∑r£löe
(
ps
, 
es
));

359  
cmd
;

360 
	}
}

362 
cmd
*

363 
	$∑r£pùe
(**
ps
, *
es
)

365 
cmd
 *cmd;

367 
cmd
 = 
	`∑r£exec
(
ps
, 
es
);

368 if(
	`≥ek
(
ps
, 
es
, "|")){

369 
	`gëtokí
(
ps
, 
es
, 0, 0);

370 
cmd
 = 
	`pùecmd
(cmd, 
	`∑r£pùe
(
ps
, 
es
));

372  
cmd
;

373 
	}
}

375 
cmd
*

376 
	$∑r£ªdús
(
cmd
 *cmd, **
ps
, *
es
)

378 
tok
;

379 *
q
, *
eq
;

381 
	`≥ek
(
ps
, 
es
, "<>")){

382 
tok
 = 
	`gëtokí
(
ps
, 
es
, 0, 0);

383 if(
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
) != 'a')

384 
	`∑nic
("missing file forÑedirection");

385 
tok
){

387 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_RDONLY
, 0);

390 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

393 
cmd
 = 
	`ªdúcmd
(cmd, 
q
, 
eq
, 
O_WRONLY
|
O_CREATE
, 1);

397  
cmd
;

398 
	}
}

400 
cmd
*

401 
	$∑r£block
(**
ps
, *
es
)

403 
cmd
 *cmd;

405 if(!
	`≥ek
(
ps
, 
es
, "("))

406 
	`∑nic
("parseblock");

407 
	`gëtokí
(
ps
, 
es
, 0, 0);

408 
cmd
 = 
	`∑r£löe
(
ps
, 
es
);

409 if(!
	`≥ek
(
ps
, 
es
, ")"))

410 
	`∑nic
("syntax - missing )");

411 
	`gëtokí
(
ps
, 
es
, 0, 0);

412 
cmd
 = 
	`∑r£ªdús
(cmd, 
ps
, 
es
);

413  
cmd
;

414 
	}
}

416 
cmd
*

417 
	$∑r£exec
(**
ps
, *
es
)

419 *
q
, *
eq
;

420 
tok
, 
¨gc
;

421 
execcmd
 *
cmd
;

422 
cmd
 *
ªt
;

424 if(
	`≥ek
(
ps
, 
es
, "("))

425  
	`∑r£block
(
ps
, 
es
);

427 
ªt
 = 
	`execcmd
();

428 
cmd
 = (
execcmd
*)
ªt
;

430 
¨gc
 = 0;

431 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

432 !
	`≥ek
(
ps
, 
es
, "|)&;")){

433 if((
tok
=
	`gëtokí
(
ps
, 
es
, &
q
, &
eq
)) == 0)

435 if(
tok
 != 'a')

436 
	`∑nic
("syntax");

437 
cmd
->
¨gv
[
¨gc
] = 
q
;

438 
cmd
->
órgv
[
¨gc
] = 
eq
;

439 
¨gc
++;

440 if(
¨gc
 >
MAXARGS
)

441 
	`∑nic
("too manyárgs");

442 
ªt
 = 
	`∑r£ªdús
‘ë, 
ps
, 
es
);

444 
cmd
->
¨gv
[
¨gc
] = 0;

445 
cmd
->
órgv
[
¨gc
] = 0;

446  
ªt
;

447 
	}
}

450 
cmd
*

451 
	$nu…îmö©e
(
cmd
 *cmd)

453 
i
;

454 
backcmd
 *
bcmd
;

455 
execcmd
 *
ecmd
;

456 
li°cmd
 *
lcmd
;

457 
pùecmd
 *
pcmd
;

458 
ªdúcmd
 *
rcmd
;

460 if(
cmd
 == 0)

463 
cmd
->
ty≥
){

464 
EXEC
:

465 
ecmd
 = (
execcmd
*)
cmd
;

466 
i
=0; 
ecmd
->
¨gv
[i]; i++)

467 *
ecmd
->
órgv
[
i
] = 0;

470 
REDIR
:

471 
rcmd
 = (
ªdúcmd
*)
cmd
;

472 
	`nu…îmö©e
(
rcmd
->
cmd
);

473 *
rcmd
->
efûe
 = 0;

476 
PIPE
:

477 
pcmd
 = (
pùecmd
*)
cmd
;

478 
	`nu…îmö©e
(
pcmd
->
À·
);

479 
	`nu…îmö©e
(
pcmd
->
right
);

482 
LIST
:

483 
lcmd
 = (
li°cmd
*)
cmd
;

484 
	`nu…îmö©e
(
lcmd
->
À·
);

485 
	`nu…îmö©e
(
lcmd
->
right
);

488 
BACK
:

489 
bcmd
 = (
backcmd
*)
cmd
;

490 
	`nu…îmö©e
(
bcmd
->
cmd
);

493  
cmd
;

494 
	}
}

	@spinlock.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"x86.h
"

7 
	~"memœyout.h
"

8 
	~"mmu.h
"

9 
	~"¥oc.h
"

10 
	~"•ölock.h
"

13 
	$öôlock
(
•ölock
 *
lk
, *
«me
)

15 
lk
->
«me
 =Çame;

16 
lk
->
locked
 = 0;

17 
lk
->
˝u
 = 0;

18 
	}
}

25 
	$acquúe
(
•ölock
 *
lk
)

27 
	`push˛i
();

28 if(
	`hﬁdög
(
lk
))

29 
	`∑nic
("acquire");

34 
	`xchg
(&
lk
->
locked
, 1) != 0)

38 
lk
->
˝u
 = cpu;

39 
	`gëˇŒîpcs
(&
lk
,Ük->
pcs
);

40 
	}
}

44 
	$ªÀa£
(
•ölock
 *
lk
)

46 if(!
	`hﬁdög
(
lk
))

47 
	`∑nic
("release");

49 
lk
->
pcs
[0] = 0;

50 
lk
->
˝u
 = 0;

61 
	`xchg
(&
lk
->
locked
, 0);

63 
	`p›˛i
();

64 
	}
}

68 
	$gëˇŒîpcs
(*
v
, 
uöt
 
pcs
[])

70 
uöt
 *
ebp
;

71 
i
;

73 
ebp
 = (
uöt
*)
v
 - 2;

74 
i
 = 0; i < 10; i++){

75 if(
ebp
 =0 ||Éb∞< (
uöt
*)
KERNBASE
 ||Ébp == (uint*)0xffffffff)

77 
pcs
[
i
] = 
ebp
[1];

78 
ebp
 = (
uöt
*)ebp[0];

80 ; 
i
 < 10; i++)

81 
pcs
[
i
] = 0;

82 
	}
}

86 
	$hﬁdög
(
•ölock
 *
lock
)

88  
lock
->
locked
 &&Üock->
˝u
 == cpu;

89 
	}
}

97 
	$push˛i
()

99 
eÊags
;

101 
eÊags
 = 
	`ªadeÊags
();

102 
	`˛i
();

103 if(
˝u
->
n˛i
++ == 0)

104 
˝u
->
öã«
 = 
eÊags
 & 
FL_IF
;

105 
	}
}

108 
	$p›˛i
()

110 if(
	`ªadeÊags
()&
FL_IF
)

111 
	`∑nic
("popcli - interruptible");

112 if(--
˝u
->
n˛i
 < 0)

113 
	`∑nic
("popcli");

114 if(
˝u
->
n˛i
 =0 && cpu->
öã«
)

115 
	`°i
();

116 
	}
}

	@spinlock.h

2 
	s•ölock
 {

3 
uöt
 
	mlocked
;

6 *
	m«me
;

7 
˝u
 *
	m˝u
;

8 
uöt
 
	mpcs
[10];

	@stat.h

1 
	#T_DIR
 1

2 
	#T_FILE
 2

3 
	#T_DEV
 3

4 

	)

5 
	s°©
 {

6 
	mty≥
;

7 
	mdev
;

8 
uöt
 
	möo
;

9 
	m∆ök
;

10 
uöt
 
	msize
;

	@stressfs.c

10 
	~"ty≥s.h
"

11 
	~"°©.h
"

12 
	~"u£r.h
"

13 
	~"fs.h
"

14 
	~"f˙é.h
"

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
fd
, 
i
;

20 
∑th
[] = "stressfs0";

21 
d©a
[512];

23 
	`¥ötf
(1, "stressfs starting\n");

24 
	`mem£t
(
d©a
, 'a', (data));

26 
i
 = 0; i < 4; i++)

27 if(
	`f‹k
() > 0)

30 
	`¥ötf
(1, "wrôê%d\n", 
i
);

32 
∑th
[8] +
i
;

33 
fd
 = 
	`›í
(
∑th
, 
O_CREATE
 | 
O_RDWR
);

34 
i
 = 0; i < 20; i++)

36 
	`wrôe
(
fd
, 
d©a
, (data));

37 
	`˛o£
(
fd
);

39 
	`¥ötf
(1, "read\n");

41 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

42 
i
 = 0; i < 20; i++)

43 
	`ªad
(
fd
, 
d©a
, (data));

44 
	`˛o£
(
fd
);

46 
	`waô
();

48 
	`exô
();

49 
	}
}

	@string.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

5 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

7 i‡(()
d°
%4 =0 && 
n
%4 == 0){

8 
c
 &= 0xFF;

9 
	`°o¶
(
d°
, (
c
<<24)|(c<<16)|(c<<8)|c, 
n
/4);

11 
	`°osb
(
d°
, 
c
, 
n
);

12  
d°
;

13 
	}
}

16 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
uöt
 
n
)

18 c⁄° 
uch¨
 *
s1
, *
s2
;

20 
s1
 = 
v1
;

21 
s2
 = 
v2
;

22 
n
-- > 0){

23 if(*
s1
 !*
s2
)

24  *
s1
 - *
s2
;

25 
s1
++, 
s2
++;

29 
	}
}

32 
	$memmove
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

34 c⁄° *
s
;

35 *
d
;

37 
s
 = 
§c
;

38 
d
 = 
d°
;

39 if(
s
 < 
d
 && s + 
n
 > d){

40 
s
 +
n
;

41 
d
 +
n
;

42 
n
-- > 0)

43 *--
d
 = *--
s
;

45 
n
-- > 0)

46 *
d
++ = *
s
++;

48  
d°
;

49 
	}
}

53 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
uöt
 
n
)

55  
	`memmove
(
d°
, 
§c
, 
n
);

56 
	}
}

59 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
uöt
 
n
)

61 
n
 > 0 && *
p
 && *∞=*
q
)

62 
n
--, 
p
++, 
q
++;

63 if(
n
 == 0)

65  (
uch¨
)*
p
 - (uch¨)*
q
;

66 
	}
}

69 
	$°∫˝y
(*
s
, c⁄° *
t
, 
n
)

71 *
os
;

73 
os
 = 
s
;

74 
n
-- > 0 && (*
s
++ = *
t
++) != 0)

76 
n
-- > 0)

77 *
s
++ = 0;

78  
os
;

79 
	}
}

83 
	$ß„°r˝y
(*
s
, c⁄° *
t
, 
n
)

85 *
os
;

87 
os
 = 
s
;

88 if(
n
 <= 0)

89  
os
;

90 --
n
 > 0 && (*
s
++ = *
t
++) != 0)

92 *
s
 = 0;

93  
os
;

94 
	}
}

97 
	$°æí
(c⁄° *
s
)

99 
n
;

101 
n
 = 0; 
s
[n];Ç++)

103  
n
;

104 
	}
}

	@syscall.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"sysˇŒ.h
"

18 
	$„tchöt
(
uöt
 
addr
, *
ù
)

20 if(
addr
 >
¥oc
->
sz
 ||áddr+4 >Öroc->sz)

22 *
ù
 = *(*)(
addr
);

24 
	}
}

30 
	$„tch°r
(
uöt
 
addr
, **
µ
)

32 *
s
, *
ï
;

34 if(
addr
 >
¥oc
->
sz
)

36 *
µ
 = (*)
addr
;

37 
ï
 = (*)
¥oc
->
sz
;

38 
s
 = *
µ
; s < 
ï
; s++)

39 if(*
s
 == 0)

40  
s
 - *
µ
;

42 
	}
}

46 
	$¨göt
(
n
, *
ù
)

48  
	`„tchöt
(
¥oc
->
tf
->
e•
 + 4 + 4*
n
, 
ù
);

49 
	}
}

55 
	$¨g±r
(
n
, **
µ
, 
size
)

57 
i
;

59 if(
	`¨göt
(
n
, &
i
) < 0)

61 if((
uöt
)
i
 >
¥oc
->
sz
 || (uöt)i+
size
 >Öroc->sz)

63 *
µ
 = (*)
i
;

65 
	}
}

72 
	$¨g°r
(
n
, **
µ
)

74 
addr
;

75 if(
	`¨göt
(
n
, &
addr
) < 0)

77  
	`„tch°r
(
addr
, 
µ
);

78 
	}
}

80 
sys_chdú
();

81 
sys_˛o£
();

82 
sys_dup
();

83 
sys_exec
();

84 
sys_exô
();

85 
sys_f‹k
();

86 
sys_f°©
();

87 
sys_gëpid
();

88 
sys_kûl
();

89 
sys_lök
();

90 
sys_mkdú
();

91 
sys_mknod
();

92 
sys_›í
();

93 
sys_pùe
();

94 
sys_ªad
();

95 
sys_sbrk
();

96 
sys_¶ìp
();

97 
sys_u∆ök
();

98 
sys_waô
();

99 
sys_wrôe
();

100 
sys_u±ime
();

101 
sys_hñlo
();

103 (*
sysˇŒs
[])() = {

104 [
SYS_f‹k
] 
sys_f‹k
,

105 [
SYS_exô
] 
sys_exô
,

106 [
SYS_waô
] 
sys_waô
,

107 [
SYS_pùe
] 
sys_pùe
,

108 [
SYS_ªad
] 
sys_ªad
,

109 [
SYS_kûl
] 
sys_kûl
,

110 [
SYS_exec
] 
sys_exec
,

111 [
SYS_f°©
] 
sys_f°©
,

112 [
SYS_chdú
] 
sys_chdú
,

113 [
SYS_dup
] 
sys_dup
,

114 [
SYS_gëpid
] 
sys_gëpid
,

115 [
SYS_sbrk
] 
sys_sbrk
,

116 [
SYS_¶ìp
] 
sys_¶ìp
,

117 [
SYS_u±ime
] 
sys_u±ime
,

118 [
SYS_›í
] 
sys_›í
,

119 [
SYS_wrôe
] 
sys_wrôe
,

120 [
SYS_mknod
] 
sys_mknod
,

121 [
SYS_u∆ök
] 
sys_u∆ök
,

122 [
SYS_lök
] 
sys_lök
,

123 [
SYS_mkdú
] 
sys_mkdú
,

124 [
SYS_˛o£
] 
sys_˛o£
,

125 [
SYS_hñlo
] 
sys_hñlo
,

126 
	}
};

129 
	$sysˇŒ
()

131 
num
;

133 
num
 = 
¥oc
->
tf
->
óx
;

134 if(
num
 > 0 &&Çum < 
	`NELEM
(
sysˇŒs
) && syscalls[num]) {

135 
¥oc
->
tf
->
óx
 = 
sysˇŒs
[
num
]();

137 
	`˝rötf
("%d %s: unknown sys call %d\n",

138 
¥oc
->
pid
,Öroc->
«me
, 
num
);

139 
¥oc
->
tf
->
óx
 = -1;

141 
	}
}

	@syscall.h

2 
	#SYS_f‹k
 1

	)

3 
	#SYS_exô
 2

	)

4 
	#SYS_waô
 3

	)

5 
	#SYS_pùe
 4

	)

6 
	#SYS_ªad
 5

	)

7 
	#SYS_kûl
 6

	)

8 
	#SYS_exec
 7

	)

9 
	#SYS_f°©
 8

	)

10 
	#SYS_chdú
 9

	)

11 
	#SYS_dup
 10

	)

12 
	#SYS_gëpid
 11

	)

13 
	#SYS_sbrk
 12

	)

14 
	#SYS_¶ìp
 13

	)

15 
	#SYS_u±ime
 14

	)

16 
	#SYS_›í
 15

	)

17 
	#SYS_wrôe
 16

	)

18 
	#SYS_mknod
 17

	)

19 
	#SYS_u∆ök
 18

	)

20 
	#SYS_lök
 19

	)

21 
	#SYS_mkdú
 20

	)

22 
	#SYS_˛o£
 21

	)

23 
	#SYS_hñlo
 22

	)

	@sysfile.c

7 
	~"ty≥s.h
"

8 
	~"defs.h
"

9 
	~"∑øm.h
"

10 
	~"°©.h
"

11 
	~"mmu.h
"

12 
	~"¥oc.h
"

13 
	~"fs.h
"

14 
	~"fûe.h
"

15 
	~"f˙é.h
"

20 
	$¨gfd
(
n
, *
pfd
, 
fûe
 **
pf
)

22 
fd
;

23 
fûe
 *
f
;

25 if(
	`¨göt
(
n
, &
fd
) < 0)

27 if(
fd
 < 0 || fd >
NOFILE
 || (
f
=
¥oc
->
ofûe
[fd]) == 0)

29 if(
pfd
)

30 *
pfd
 = 
fd
;

31 if(
pf
)

32 *
pf
 = 
f
;

34 
	}
}

39 
	$fdÆloc
(
fûe
 *
f
)

41 
fd
;

43 
fd
 = 0; fd < 
NOFILE
; fd++){

44 if(
¥oc
->
ofûe
[
fd
] == 0){

45 
¥oc
->
ofûe
[
fd
] = 
f
;

46  
fd
;

50 
	}
}

53 
	$sys_dup
()

55 
fûe
 *
f
;

56 
fd
;

58 if(
	`¨gfd
(0, 0, &
f
) < 0)

60 if((
fd
=
	`fdÆloc
(
f
)) < 0)

62 
	`fûedup
(
f
);

63  
fd
;

64 
	}
}

67 
	$sys_ªad
()

69 
fûe
 *
f
;

70 
n
;

71 *
p
;

73 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

75  
	`fûîód
(
f
, 
p
, 
n
);

76 
	}
}

79 
	$sys_wrôe
()

81 
fûe
 *
f
;

82 
n
;

83 *
p
;

85 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨göt
(2, &
n
Ë< 0 || 
	`¨g±r
(1, &
p
,Ç) < 0)

87  
	`fûewrôe
(
f
, 
p
, 
n
);

88 
	}
}

91 
	$sys_˛o£
()

93 
fd
;

94 
fûe
 *
f
;

96 if(
	`¨gfd
(0, &
fd
, &
f
) < 0)

98 
¥oc
->
ofûe
[
fd
] = 0;

99 
	`fûe˛o£
(
f
);

101 
	}
}

104 
	$sys_f°©
()

106 
fûe
 *
f
;

107 
°©
 *
°
;

109 if(
	`¨gfd
(0, 0, &
f
Ë< 0 || 
	`¨g±r
(1, (*)&
°
, (*st)) < 0)

111  
	`fûe°©
(
f
, 
°
);

112 
	}
}

116 
	$sys_lök
()

118 
«me
[
DIRSIZ
], *
√w
, *
ﬁd
;

119 
öode
 *
dp
, *
ù
;

121 if(
	`¨g°r
(0, &
ﬁd
Ë< 0 ||árg°r(1, &
√w
) < 0)

124 
	`begö_›
();

125 if((
ù
 = 
	`«mei
(
ﬁd
)) == 0){

126 
	`íd_›
();

130 
	`ûock
(
ù
);

131 if(
ù
->
ty≥
 =
T_DIR
){

132 
	`iu∆ockput
(
ù
);

133 
	`íd_›
();

137 
ù
->
∆ök
++;

138 
	`iupd©e
(
ù
);

139 
	`iu∆ock
(
ù
);

141 if((
dp
 = 
	`«meù¨ít
(
√w
, 
«me
)) == 0)

142 
bad
;

143 
	`ûock
(
dp
);

144 if(
dp
->
dev
 !
ù
->dev || 
	`dúlök
(dp, 
«me
, ip->
öum
) < 0){

145 
	`iu∆ockput
(
dp
);

146 
bad
;

148 
	`iu∆ockput
(
dp
);

149 
	`ùut
(
ù
);

151 
	`íd_›
();

155 
bad
:

156 
	`ûock
(
ù
);

157 
ù
->
∆ök
--;

158 
	`iupd©e
(
ù
);

159 
	`iu∆ockput
(
ù
);

160 
	`íd_›
();

162 
	}
}

166 
	$isdúem±y
(
öode
 *
dp
)

168 
off
;

169 
dúít
 
de
;

171 
off
=2*(
de
); off<
dp
->
size
; off+=(de)){

172 if(
	`ªadi
(
dp
, (*)&
de
, 
off
, (de)) != (de))

173 
	`∑nic
("isdirempty:Ñeadi");

174 if(
de
.
öum
 != 0)

178 
	}
}

182 
	$sys_u∆ök
()

184 
öode
 *
ù
, *
dp
;

185 
dúít
 
de
;

186 
«me
[
DIRSIZ
], *
∑th
;

187 
uöt
 
off
;

189 if(
	`¨g°r
(0, &
∑th
) < 0)

192 
	`begö_›
();

193 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0){

194 
	`íd_›
();

198 
	`ûock
(
dp
);

201 if(
	`«mecmp
(
«me
, ".") == 0 ||Çamecmp(name, "..") == 0)

202 
bad
;

204 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) == 0)

205 
bad
;

206 
	`ûock
(
ù
);

208 if(
ù
->
∆ök
 < 1)

209 
	`∑nic
("unlink:Çlink < 1");

210 if(
ù
->
ty≥
 =
T_DIR
 && !
	`isdúem±y
(ip)){

211 
	`iu∆ockput
(
ù
);

212 
bad
;

215 
	`mem£t
(&
de
, 0, (de));

216 if(
	`wrôei
(
dp
, (*)&
de
, 
off
, (de)) != (de))

217 
	`∑nic
("unlink: writei");

218 if(
ù
->
ty≥
 =
T_DIR
){

219 
dp
->
∆ök
--;

220 
	`iupd©e
(
dp
);

222 
	`iu∆ockput
(
dp
);

224 
ù
->
∆ök
--;

225 
	`iupd©e
(
ù
);

226 
	`iu∆ockput
(
ù
);

228 
	`íd_›
();

232 
bad
:

233 
	`iu∆ockput
(
dp
);

234 
	`íd_›
();

236 
	}
}

238 
öode
*

239 
	$¸óã
(*
∑th
, 
ty≥
, 
maj‹
, 
mö‹
)

241 
uöt
 
off
;

242 
öode
 *
ù
, *
dp
;

243 
«me
[
DIRSIZ
];

245 if((
dp
 = 
	`«meù¨ít
(
∑th
, 
«me
)) == 0)

247 
	`ûock
(
dp
);

249 if((
ù
 = 
	`dúlookup
(
dp
, 
«me
, &
off
)) != 0){

250 
	`iu∆ockput
(
dp
);

251 
	`ûock
(
ù
);

252 if(
ty≥
 =
T_FILE
 && 
ù
->type == T_FILE)

253  
ù
;

254 
	`iu∆ockput
(
ù
);

258 if((
ù
 = 
	`üŒoc
(
dp
->
dev
, 
ty≥
)) == 0)

259 
	`∑nic
("create: ialloc");

261 
	`ûock
(
ù
);

262 
ù
->
maj‹
 = major;

263 
ù
->
mö‹
 = minor;

264 
ù
->
∆ök
 = 1;

265 
	`iupd©e
(
ù
);

267 if(
ty≥
 =
T_DIR
){

268 
dp
->
∆ök
++;

269 
	`iupd©e
(
dp
);

271 if(
	`dúlök
(
ù
, ".", ip->
öum
Ë< 0 || dúlök(ù, "..", 
dp
->inum) < 0)

272 
	`∑nic
("create dots");

275 if(
	`dúlök
(
dp
, 
«me
, 
ù
->
öum
) < 0)

276 
	`∑nic
("create: dirlink");

278 
	`iu∆ockput
(
dp
);

280  
ù
;

281 
	}
}

284 
	$sys_›í
()

286 *
∑th
;

287 
fd
, 
omode
;

288 
fûe
 *
f
;

289 
öode
 *
ù
;

291 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, &
omode
) < 0)

294 
	`begö_›
();

296 if(
omode
 & 
O_CREATE
){

297 
ù
 = 
	`¸óã
(
∑th
, 
T_FILE
, 0, 0);

298 if(
ù
 == 0){

299 
	`íd_›
();

303 if((
ù
 = 
	`«mei
(
∑th
)) == 0){

304 
	`íd_›
();

307 
	`ûock
(
ù
);

308 if(
ù
->
ty≥
 =
T_DIR
 && 
omode
 !
O_RDONLY
){

309 
	`iu∆ockput
(
ù
);

310 
	`íd_›
();

315 if((
f
 = 
	`fûóŒoc
()Ë=0 || (
fd
 = 
	`fdÆloc
(f)) < 0){

316 if(
f
)

317 
	`fûe˛o£
(
f
);

318 
	`iu∆ockput
(
ù
);

319 
	`íd_›
();

322 
	`iu∆ock
(
ù
);

323 
	`íd_›
();

325 
f
->
ty≥
 = 
FD_INODE
;

326 
f
->
ù
 = ip;

327 
f
->
off
 = 0;

328 
f
->
ªadabÀ
 = !(
omode
 & 
O_WRONLY
);

329 
f
->
wrôabÀ
 = (
omode
 & 
O_WRONLY
Ë|| (omodê& 
O_RDWR
);

330  
fd
;

331 
	}
}

334 
	$sys_mkdú
()

336 *
∑th
;

337 
öode
 *
ù
;

339 
	`begö_›
();

340 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`¸óã
’©h, 
T_DIR
, 0, 0)) == 0){

341 
	`íd_›
();

344 
	`iu∆ockput
(
ù
);

345 
	`íd_›
();

347 
	}
}

350 
	$sys_mknod
()

352 
öode
 *
ù
;

353 *
∑th
;

354 
Àn
;

355 
maj‹
, 
mö‹
;

357 
	`begö_›
();

358 if((
Àn
=
	`¨g°r
(0, &
∑th
)) < 0 ||

359 
	`¨göt
(1, &
maj‹
) < 0 ||

360 
	`¨göt
(2, &
mö‹
) < 0 ||

361 (
ù
 = 
	`¸óã
(
∑th
, 
T_DEV
, 
maj‹
, 
mö‹
)) == 0){

362 
	`íd_›
();

365 
	`iu∆ockput
(
ù
);

366 
	`íd_›
();

368 
	}
}

371 
	$sys_chdú
()

373 *
∑th
;

374 
öode
 *
ù
;

376 
	`begö_›
();

377 if(
	`¨g°r
(0, &
∑th
Ë< 0 || (
ù
 = 
	`«mei
(path)) == 0){

378 
	`íd_›
();

381 
	`ûock
(
ù
);

382 if(
ù
->
ty≥
 !
T_DIR
){

383 
	`iu∆ockput
(
ù
);

384 
	`íd_›
();

387 
	`iu∆ock
(
ù
);

388 
	`ùut
(
¥oc
->
cwd
);

389 
	`íd_›
();

390 
¥oc
->
cwd
 = 
ù
;

392 
	}
}

395 
	$sys_exec
()

397 *
∑th
, *
¨gv
[
MAXARG
];

398 
i
;

399 
uöt
 
u¨gv
, 
u¨g
;

401 if(
	`¨g°r
(0, &
∑th
Ë< 0 || 
	`¨göt
(1, (*)&
u¨gv
) < 0){

404 
	`mem£t
(
¨gv
, 0, (argv));

405 
i
=0;; i++){

406 if(
i
 >
	`NELEM
(
¨gv
))

408 if(
	`„tchöt
(
u¨gv
+4*
i
, (*)&
u¨g
) < 0)

410 if(
u¨g
 == 0){

411 
¨gv
[
i
] = 0;

414 if(
	`„tch°r
(
u¨g
, &
¨gv
[
i
]) < 0)

417  
	`exec
(
∑th
, 
¨gv
);

418 
	}
}

421 
	$sys_pùe
()

423 *
fd
;

424 
fûe
 *
rf
, *
wf
;

425 
fd0
, 
fd1
;

427 if(
	`¨g±r
(0, (*)&
fd
, 2*(fd[0])) < 0)

429 if(
	`pùóŒoc
(&
rf
, &
wf
) < 0)

431 
fd0
 = -1;

432 if((
fd0
 = 
	`fdÆloc
(
rf
)Ë< 0 || (
fd1
 = fdÆloc(
wf
)) < 0){

433 if(
fd0
 >= 0)

434 
¥oc
->
ofûe
[
fd0
] = 0;

435 
	`fûe˛o£
(
rf
);

436 
	`fûe˛o£
(
wf
);

439 
fd
[0] = 
fd0
;

440 
fd
[1] = 
fd1
;

442 
	}
}

	@sysproc.c

1 
	~"ty≥s.h
"

2 
	~"x86.h
"

3 
	~"defs.h
"

4 
	~"d©e.h
"

5 
	~"∑øm.h
"

6 
	~"memœyout.h
"

7 
	~"mmu.h
"

8 
	~"¥oc.h
"

11 
	$sys_f‹k
()

13  
	`f‹k
();

14 
	}
}

17 
	$sys_exô
()

19 
	`exô
();

21 
	}
}

24 
	$sys_waô
()

26  
	`waô
();

27 
	}
}

30 
	$sys_kûl
()

32 
pid
;

34 if(
	`¨göt
(0, &
pid
) < 0)

36  
	`kûl
(
pid
);

37 
	}
}

40 
	$sys_gëpid
()

42  
¥oc
->
pid
;

43 
	}
}

46 
	$sys_sbrk
()

48 
addr
;

49 
n
;

51 if(
	`¨göt
(0, &
n
) < 0)

53 
addr
 = 
¥oc
->
sz
;

54 if(
	`grow¥oc
(
n
) < 0)

56  
addr
;

57 
	}
}

60 
	$sys_¶ìp
()

62 
n
;

63 
uöt
 
ticks0
;

65 if(
	`¨göt
(0, &
n
) < 0)

67 
	`acquúe
(&
tick¶ock
);

68 
ticks0
 = 
ticks
;

69 
ticks
 - 
ticks0
 < 
n
){

70 if(
¥oc
->
kûÀd
){

71 
	`ªÀa£
(&
tick¶ock
);

74 
	`¶ìp
(&
ticks
, &
tick¶ock
);

76 
	`ªÀa£
(&
tick¶ock
);

78 
	}
}

83 
	$sys_u±ime
()

85 
uöt
 
xticks
;

87 
	`acquúe
(&
tick¶ock
);

88 
xticks
 = 
ticks
;

89 
	`ªÀa£
(&
tick¶ock
);

90  
xticks
;

91 
	}
}

94 
	$sys_hñlo
()

96  
¥oc
->
πime
;

97 
	}
}

	@timer.c

5 
	~"ty≥s.h
"

6 
	~"defs.h
"

7 
	~"å≠s.h
"

8 
	~"x86.h
"

10 
	#IO_TIMER1
 0x040

11 

	)

16 
	#TIMER_FREQ
 1193182

	)

17 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

19 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

20 
	#TIMER_SEL0
 0x00

21 
	#TIMER_RATEGEN
 0x04

22 
	#TIMER_16BIT
 0x30

23 

	)

25 
	$timîöô
()

28 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

29 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

30 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

31 
	`pi˚«bÀ
(
IRQ_TIMER
);

32 
	}
}

	@trap.c

1 
	~"ty≥s.h
"

2 
	~"defs.h
"

3 
	~"∑øm.h
"

4 
	~"memœyout.h
"

5 
	~"mmu.h
"

6 
	~"¥oc.h
"

7 
	~"x86.h
"

8 
	~"å≠s.h
"

9 
	~"•ölock.h
"

12 
g©edesc
 
	gidt
[256];

13 
uöt
 
ve˘‹s
[];

14 
•ölock
 
	gtick¶ock
;

15 
uöt
 
	gticks
;

18 
	$tvöô
()

20 
i
;

22 
i
 = 0; i < 256; i++)

23 
	`SETGATE
(
idt
[
i
], 0, 
SEG_KCODE
<<3, 
ve˘‹s
[i], 0);

24 
	`SETGATE
(
idt
[
T_SYSCALL
], 1, 
SEG_KCODE
<<3, 
ve˘‹s
[T_SYSCALL], 
DPL_USER
);

26 
	`öôlock
(&
tick¶ock
, "time");

27 
	}
}

30 
	$idtöô
()

32 
	`lidt
(
idt
, (idt));

33 
	}
}

37 
	$å≠
(
å≠‰ame
 *
tf
)

39 if(
tf
->
å≠no
 =
T_SYSCALL
){

40 if(
¥oc
->
kûÀd
)

41 
	`exô
();

42 
¥oc
->
tf
 =Åf;

43 
	`sysˇŒ
();

44 if(
¥oc
->
kûÀd
)

45 
	`exô
();

49 
tf
->
å≠no
){

50 
T_IRQ0
 + 
IRQ_TIMER
:

51 if(
˝u
->
id
 == 0){

52 
	`acquúe
(&
tick¶ock
);

53 
ticks
++;

54 
	`wakeup
(&
ticks
);

55 
	`ªÀa£
(&
tick¶ock
);

57 
	`œpi˚oi
();

59 
T_IRQ0
 + 
IRQ_IDE
:

60 
	`ideöå
();

61 
	`œpi˚oi
();

63 
T_IRQ0
 + 
IRQ_IDE
+1:

66 
T_IRQ0
 + 
IRQ_KBD
:

67 
	`kbdöå
();

68 
	`œpi˚oi
();

70 
T_IRQ0
 + 
IRQ_COM1
:

71 
	`u¨töå
();

72 
	`œpi˚oi
();

74 
T_IRQ0
 + 7:

75 
T_IRQ0
 + 
IRQ_SPURIOUS
:

76 
	`˝rötf
("cpu%d: spurious interruptát %x:%x\n",

77 
˝u
->
id
, 
tf
->
cs
,Åf->
eù
);

78 
	`œpi˚oi
();

83 if(
¥oc
 =0 || (
tf
->
cs
&3) == 0){

85 
	`˝rötf
("unexpectedÅrap %d from cpu %dÉip %x (cr2=0x%x)\n",

86 
tf
->
å≠no
, 
˝u
->
id
,Åf->
eù
, 
	`r¸2
());

87 
	`∑nic
("trap");

90 
	`˝rötf
("pid %d %s:Årap %dÉrr %d on cpu %d "

92 
¥oc
->
pid
,Öroc->
«me
, 
tf
->
å≠no
,Åf->
îr
, 
˝u
->
id
,Åf->
eù
,

93 
	`r¸2
());

94 
¥oc
->
kûÀd
 = 1;

100 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

101 
	`exô
();

105 if(
¥oc
 &&Öroc->
°©e
 =
RUNNING
 && 
tf
->
å≠no
 =
T_IRQ0
+
IRQ_TIMER
)

106 
	`yõld
();

109 if(
¥oc
 &&Öroc->
kûÀd
 && (
tf
->
cs
&3Ë=
DPL_USER
)

110 
	`exô
();

111 
	}
}

	@traps.h

4 
	#T_DIVIDE
 0

5 
	#T_DEBUG
 1

6 
	#T_NMI
 2

7 
	#T_BRKPT
 3

8 
	#T_OFLOW
 4

9 
	#T_BOUND
 5

10 
	#T_ILLOP
 6

11 
	#T_DEVICE
 7

12 
	#T_DBLFLT
 8

14 
	#T_TSS
 10

15 
	#T_SEGNP
 11

16 
	#T_STACK
 12

17 
	#T_GPFLT
 13

18 
	#T_PGFLT
 14

20 
	#T_FPERR
 16

21 
	#T_ALIGN
 17

22 
	#T_MCHK
 18

23 
	#T_SIMDERR
 19

24 

	)

27 
	#T_SYSCALL
 64

28 
	#T_DEFAULT
 500

29 

	)

30 
	#T_IRQ0
 32

31 

	)

32 
	#IRQ_TIMER
 0

	)

33 
	#IRQ_KBD
 1

	)

34 
	#IRQ_COM1
 4

	)

35 
	#IRQ_IDE
 14

	)

36 
	#IRQ_ERROR
 19

	)

37 
	#IRQ_SPURIOUS
 31

	)

	@types.h

1 
	tuöt
;

2 
	tush‹t
;

3 
	tuch¨
;

4 
uöt
 
	tpde_t
;

	@uart.c

3 
	~"ty≥s.h
"

4 
	~"defs.h
"

5 
	~"∑øm.h
"

6 
	~"å≠s.h
"

7 
	~"•ölock.h
"

8 
	~"fs.h
"

9 
	~"fûe.h
"

10 
	~"mmu.h
"

11 
	~"¥oc.h
"

12 
	~"x86.h
"

14 
	#COM1
 0x3f8

	)

16 
	gu¨t
;

19 
	$u¨töô
()

21 *
p
;

24 
	`outb
(
COM1
+2, 0);

27 
	`outb
(
COM1
+3, 0x80);

28 
	`outb
(
COM1
+0, 115200/9600);

29 
	`outb
(
COM1
+1, 0);

30 
	`outb
(
COM1
+3, 0x03);

31 
	`outb
(
COM1
+4, 0);

32 
	`outb
(
COM1
+1, 0x01);

35 if(
	`öb
(
COM1
+5) == 0xFF)

37 
u¨t
 = 1;

41 
	`öb
(
COM1
+2);

42 
	`öb
(
COM1
+0);

43 
	`pi˚«bÀ
(
IRQ_COM1
);

44 
	`iﬂpi˚«bÀ
(
IRQ_COM1
, 0);

47 
p
="xv6...\n"; *p;Ö++)

48 
	`u¨çutc
(*
p
);

49 
	}
}

52 
	$u¨çutc
(
c
)

54 
i
;

56 if(!
u¨t
)

58 
i
 = 0; i < 128 && !(
	`öb
(
COM1
+5) & 0x20); i++)

59 
	`mi¸odñay
(10);

60 
	`outb
(
COM1
+0, 
c
);

61 
	}
}

64 
	$u¨tgëc
()

66 if(!
u¨t
)

68 if(!(
	`öb
(
COM1
+5) & 0x01))

70  
	`öb
(
COM1
+0);

71 
	}
}

74 
	$u¨töå
()

76 
	`c⁄sﬁeöå
(
u¨tgëc
);

77 
	}
}

	@ulib.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"f˙é.h
"

4 
	~"u£r.h
"

5 
	~"x86.h
"

8 
	$°r˝y
(*
s
, *
t
)

10 *
os
;

12 
os
 = 
s
;

13 (*
s
++ = *
t
++) != 0)

15  
os
;

16 
	}
}

19 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

21 *
p
 && *∞=*
q
)

22 
p
++, 
q
++;

23  (
uch¨
)*
p
 - (uch¨)*
q
;

24 
	}
}

26 
uöt


27 
	$°æí
(*
s
)

29 
n
;

31 
n
 = 0; 
s
[n];Ç++)

33  
n
;

34 
	}
}

37 
	$mem£t
(*
d°
, 
c
, 
uöt
 
n
)

39 
	`°osb
(
d°
, 
c
, 
n
);

40  
d°
;

41 
	}
}

44 
	$°rchr
(c⁄° *
s
, 
c
)

46 ; *
s
; s++)

47 if(*
s
 =
c
)

48  (*)
s
;

50 
	}
}

53 
	$gës
(*
buf
, 
max
)

55 
i
, 
cc
;

56 
c
;

58 
i
=0; i+1 < 
max
; ){

59 
cc
 = 
	`ªad
(0, &
c
, 1);

60 if(
cc
 < 1)

62 
buf
[
i
++] = 
c
;

63 if(
c
 == '\n' || c == '\r')

66 
buf
[
i
] = '\0';

67  
buf
;

68 
	}
}

71 
	$°©
(*
n
, 
°©
 *
°
)

73 
fd
;

74 
r
;

76 
fd
 = 
	`›í
(
n
, 
O_RDONLY
);

77 if(
fd
 < 0)

79 
r
 = 
	`f°©
(
fd
, 
°
);

80 
	`˛o£
(
fd
);

81  
r
;

82 
	}
}

85 
	$©oi
(c⁄° *
s
)

87 
n
;

89 
n
 = 0;

90 '0' <*
s
 && *s <= '9')

91 
n
 =Ç*10 + *
s
++ - '0';

92  
n
;

93 
	}
}

96 
	$memmove
(*
vd°
, *
v§c
, 
n
)

98 *
d°
, *
§c
;

100 
d°
 = 
vd°
;

101 
§c
 = 
v§c
;

102 
n
-- > 0)

103 *
d°
++ = *
§c
++;

104  
vd°
;

105 
	}
}

	@umalloc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

4 
	~"∑øm.h
"

9 
	tAlign
;

11 
	uhódî
 {

13 
hódî
 *
	m±r
;

14 
uöt
 
	msize
;

15 } 
	ms
;

16 
Align
 
	mx
;

19 
hódî
 
	tHódî
;

21 
Hódî
 
	gba£
;

22 
Hódî
 *
	g‰ìp
;

25 
	$‰ì
(*
≠
)

27 
Hódî
 *
bp
, *
p
;

29 
bp
 = (
Hódî
*)
≠
 - 1;

30 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr)

31 if(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr))

33 if(
bp
 + bp->
s
.
size
 =
p
->s.
±r
){

34 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

35 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

37 
bp
->
s
.
±r
 = 
p
->s.ptr;

38 if(
p
 +Ö->
s
.
size
 =
bp
){

39 
p
->
s
.
size
 +
bp
->s.size;

40 
p
->
s
.
±r
 = 
bp
->s.ptr;

42 
p
->
s
.
±r
 = 
bp
;

43 
‰ìp
 = 
p
;

44 
	}
}

46 
Hódî
*

47 
	$m‹ec‹e
(
uöt
 
nu
)

49 *
p
;

50 
Hódî
 *
hp
;

52 if(
nu
 < 4096)

53 
nu
 = 4096;

54 
p
 = 
	`sbrk
(
nu
 * (
Hódî
));

55 if(
p
 == (*)-1)

57 
hp
 = (
Hódî
*)
p
;

58 
hp
->
s
.
size
 = 
nu
;

59 
	`‰ì
((*)(
hp
 + 1));

60  
‰ìp
;

61 
	}
}

64 
	$mÆloc
(
uöt
 
nbyãs
)

66 
Hódî
 *
p
, *
¥evp
;

67 
uöt
 
nunôs
;

69 
nunôs
 = (
nbyãs
 + (
Hódî
) - 1)/(Header) + 1;

70 if((
¥evp
 = 
‰ìp
) == 0){

71 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

72 
ba£
.
s
.
size
 = 0;

74 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr){

75 if(
p
->
s
.
size
 >
nunôs
){

76 if(
p
->
s
.
size
 =
nunôs
)

77 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

79 
p
->
s
.
size
 -
nunôs
;

80 
p
 +p->
s
.
size
;

81 
p
->
s
.
size
 = 
nunôs
;

83 
‰ìp
 = 
¥evp
;

84  (*)(
p
 + 1);

86 if(
p
 =
‰ìp
)

87 if((
p
 = 
	`m‹ec‹e
(
nunôs
)) == 0)

90 
	}
}

	@user.h

1 
	g°©
;

2 
	gπcd©e
;

5 
f‹k
();

6 
	$exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

7 
	`waô
();

8 
	`pùe
(*);

9 
	`wrôe
(, *, );

10 
	`ªad
(, *, );

11 
	`˛o£
();

12 
	`kûl
();

13 
	`exec
(*, **);

14 
	`›í
(*, );

15 
	`mknod
(*, , );

16 
	`u∆ök
(*);

17 
	`f°©
(
fd
, 
°©
*);

18 
	`lök
(*, *);

19 
	`mkdú
(*);

20 
	`chdú
(*);

21 
	`dup
();

22 
	`gëpid
();

23 * 
	`sbrk
();

24 
	`¶ìp
();

25 
	`u±ime
();

26 
	`hñlo
();

29 
	`°©
(*, 
°©
*);

30 * 
	`°r˝y
(*, *);

31 *
	`memmove
(*, *, );

32 * 
	`°rchr
(c⁄° *, 
c
);

33 
	`°rcmp
(const *, const *);

34 
	`¥ötf
(, *, ...);

35 * 
	`gës
(*, 
max
);

36 
uöt
 
	`°æí
(*);

37 * 
	`mem£t
(*, , 
uöt
);

38 * 
	`mÆloc
(
uöt
);

39 
	`‰ì
(*);

40 
	`©oi
(const *);

	@usertests.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"°©.h
"

4 
	~"u£r.h
"

5 
	~"fs.h
"

6 
	~"f˙é.h
"

7 
	~"sysˇŒ.h
"

8 
	~"å≠s.h
"

9 
	~"memœyout.h
"

11 
	gbuf
[8192];

12 
	g«me
[3];

13 *
	gechﬂrgv
[] = { "echo", "ALL", "TESTS", "PASSED", 0 };

14 
	g°dout
 = 1;

18 
	$ùuâe°
()

20 
	`¥ötf
(
°dout
, "iputÅest\n");

22 if(
	`mkdú
("iputdir") < 0){

23 
	`¥ötf
(
°dout
, "mkdir failed\n");

24 
	`exô
();

26 if(
	`chdú
("iputdir") < 0){

27 
	`¥ötf
(
°dout
, "chdir iputdir failed\n");

28 
	`exô
();

30 if(
	`u∆ök
("../iputdir") < 0){

31 
	`¥ötf
(
°dout
, "unlink ../iputdir failed\n");

32 
	`exô
();

34 if(
	`chdú
("/") < 0){

35 
	`¥ötf
(
°dout
, "chdir / failed\n");

36 
	`exô
();

38 
	`¥ötf
(
°dout
, "iputÅest ok\n");

39 
	}
}

43 
	$exôùuâe°
()

45 
pid
;

47 
	`¥ötf
(
°dout
, "exitiputÅest\n");

49 
pid
 = 
	`f‹k
();

50 if(
pid
 < 0){

51 
	`¥ötf
(
°dout
, "fork failed\n");

52 
	`exô
();

54 if(
pid
 == 0){

55 if(
	`mkdú
("iputdir") < 0){

56 
	`¥ötf
(
°dout
, "mkdir failed\n");

57 
	`exô
();

59 if(
	`chdú
("iputdir") < 0){

60 
	`¥ötf
(
°dout
, "child chdir failed\n");

61 
	`exô
();

63 if(
	`u∆ök
("../iputdir") < 0){

64 
	`¥ötf
(
°dout
, "unlink ../iputdir failed\n");

65 
	`exô
();

67 
	`exô
();

69 
	`waô
();

70 
	`¥ötf
(
°dout
, "exitiputÅest ok\n");

71 
	}
}

85 
	$›íùuâe°
()

87 
pid
;

89 
	`¥ötf
(
°dout
, "openiputÅest\n");

90 if(
	`mkdú
("oidir") < 0){

91 
	`¥ötf
(
°dout
, "mkdir oidir failed\n");

92 
	`exô
();

94 
pid
 = 
	`f‹k
();

95 if(
pid
 < 0){

96 
	`¥ötf
(
°dout
, "fork failed\n");

97 
	`exô
();

99 if(
pid
 == 0){

100 
fd
 = 
	`›í
("oidú", 
O_RDWR
);

101 if(
fd
 >= 0){

102 
	`¥ötf
(
°dout
, "open directory for write succeeded\n");

103 
	`exô
();

105 
	`exô
();

107 
	`¶ìp
(1);

108 if(
	`u∆ök
("oidir") != 0){

109 
	`¥ötf
(
°dout
, "unlink failed\n");

110 
	`exô
();

112 
	`waô
();

113 
	`¥ötf
(
°dout
, "openiputÅest ok\n");

114 
	}
}

119 
	$›íã°
()

121 
fd
;

123 
	`¥ötf
(
°dout
, "openÅest\n");

124 
fd
 = 
	`›í
("echo", 0);

125 if(
fd
 < 0){

126 
	`¥ötf
(
°dout
, "openÉcho failed!\n");

127 
	`exô
();

129 
	`˛o£
(
fd
);

130 
fd
 = 
	`›í
("doesnotexist", 0);

131 if(
fd
 >= 0){

132 
	`¥ötf
(
°dout
, "open doesnotexist succeeded!\n");

133 
	`exô
();

135 
	`¥ötf
(
°dout
, "openÅest ok\n");

136 
	}
}

139 
	$wrôëe°
()

141 
fd
;

142 
i
;

144 
	`¥ötf
(
°dout
, "small fileÅest\n");

145 
fd
 = 
	`›í
("smÆl", 
O_CREATE
|
O_RDWR
);

146 if(
fd
 >= 0){

147 
	`¥ötf
(
°dout
, "creat small succeeded; ok\n");

149 
	`¥ötf
(
°dout
, "error: creat small failed!\n");

150 
	`exô
();

152 
i
 = 0; i < 100; i++){

153 if(
	`wrôe
(
fd
, "aaaaaaaaaa", 10) != 10){

154 
	`¥ötf
(
°dout
, "îr‹: wrôêØ %dÇew fûêÁûed\n", 
i
);

155 
	`exô
();

157 if(
	`wrôe
(
fd
, "bbbbbbbbbb", 10) != 10){

158 
	`¥ötf
(
°dout
, "îr‹: wrôêbb %dÇew fûêÁûed\n", 
i
);

159 
	`exô
();

162 
	`¥ötf
(
°dout
, "writes ok\n");

163 
	`˛o£
(
fd
);

164 
fd
 = 
	`›í
("smÆl", 
O_RDONLY
);

165 if(
fd
 >= 0){

166 
	`¥ötf
(
°dout
, "open small succeeded ok\n");

168 
	`¥ötf
(
°dout
, "error: open small failed!\n");

169 
	`exô
();

171 
i
 = 
	`ªad
(
fd
, 
buf
, 2000);

172 if(
i
 == 2000){

173 
	`¥ötf
(
°dout
, "read succeeded ok\n");

175 
	`¥ötf
(
°dout
, "read failed\n");

176 
	`exô
();

178 
	`˛o£
(
fd
);

180 if(
	`u∆ök
("small") < 0){

181 
	`¥ötf
(
°dout
, "unlink small failed\n");

182 
	`exô
();

184 
	`¥ötf
(
°dout
, "small fileÅest ok\n");

185 
	}
}

188 
	$wrôëe°1
()

190 
i
, 
fd
, 
n
;

192 
	`¥ötf
(
°dout
, "big filesÅest\n");

194 
fd
 = 
	`›í
("big", 
O_CREATE
|
O_RDWR
);

195 if(
fd
 < 0){

196 
	`¥ötf
(
°dout
, "error: creat big failed!\n");

197 
	`exô
();

200 
i
 = 0; i < 
MAXFILE
; i++){

201 ((*)
buf
)[0] = 
i
;

202 if(
	`wrôe
(
fd
, 
buf
, 512) != 512){

203 
	`¥ötf
(
°dout
, "îr‹: wrôêbig fûêÁûed\n", 
i
);

204 
	`exô
();

208 
	`˛o£
(
fd
);

210 
fd
 = 
	`›í
("big", 
O_RDONLY
);

211 if(
fd
 < 0){

212 
	`¥ötf
(
°dout
, "error: open big failed!\n");

213 
	`exô
();

216 
n
 = 0;

218 
i
 = 
	`ªad
(
fd
, 
buf
, 512);

219 if(
i
 == 0){

220 if(
n
 =
MAXFILE
 - 1){

221 
	`¥ötf
(
°dout
, "ªad o∆y %d block†‰om big", 
n
);

222 
	`exô
();

225 } if(
i
 != 512){

226 
	`¥ötf
(
°dout
, "ªad faûed %d\n", 
i
);

227 
	`exô
();

229 if(((*)
buf
)[0] !
n
){

230 
	`¥ötf
(
°dout
, "read content of block %d is %d\n",

231 
n
, ((*)
buf
)[0]);

232 
	`exô
();

234 
n
++;

236 
	`˛o£
(
fd
);

237 if(
	`u∆ök
("big") < 0){

238 
	`¥ötf
(
°dout
, "unlink big failed\n");

239 
	`exô
();

241 
	`¥ötf
(
°dout
, "big files ok\n");

242 
	}
}

245 
	$¸óãã°
()

247 
i
, 
fd
;

249 
	`¥ötf
(
°dout
, "many creates, followed by unlinkÅest\n");

251 
«me
[0] = 'a';

252 
«me
[2] = '\0';

253 
i
 = 0; i < 52; i++){

254 
«me
[1] = '0' + 
i
;

255 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

256 
	`˛o£
(
fd
);

258 
«me
[0] = 'a';

259 
«me
[2] = '\0';

260 
i
 = 0; i < 52; i++){

261 
«me
[1] = '0' + 
i
;

262 
	`u∆ök
(
«me
);

264 
	`¥ötf
(
°dout
, "many creates, followed by unlink; ok\n");

265 
	}
}

267 
	$dúã°
()

269 
	`¥ötf
(
°dout
, "mkdirÅest\n");

271 if(
	`mkdú
("dir0") < 0){

272 
	`¥ötf
(
°dout
, "mkdir failed\n");

273 
	`exô
();

276 if(
	`chdú
("dir0") < 0){

277 
	`¥ötf
(
°dout
, "chdir dir0 failed\n");

278 
	`exô
();

281 if(
	`chdú
("..") < 0){

282 
	`¥ötf
(
°dout
, "chdir .. failed\n");

283 
	`exô
();

286 if(
	`u∆ök
("dir0") < 0){

287 
	`¥ötf
(
°dout
, "unlink dir0 failed\n");

288 
	`exô
();

290 
	`¥ötf
(
°dout
, "mkdirÅest ok\n");

291 
	}
}

294 
	$exe˘e°
()

296 
	`¥ötf
(
°dout
, "execÅest\n");

297 if(
	`exec
("echo", 
echﬂrgv
) < 0){

298 
	`¥ötf
(
°dout
, "execÉcho failed\n");

299 
	`exô
();

301 
	}
}

306 
	$pùe1
()

308 
fds
[2], 
pid
;

309 
£q
, 
i
, 
n
, 
cc
, 
tŸÆ
;

311 if(
	`pùe
(
fds
) != 0){

312 
	`¥ötf
(1, "pipe() failed\n");

313 
	`exô
();

315 
pid
 = 
	`f‹k
();

316 
£q
 = 0;

317 if(
pid
 == 0){

318 
	`˛o£
(
fds
[0]);

319 
n
 = 0;Ç < 5;Ç++){

320 
i
 = 0; i < 1033; i++)

321 
buf
[
i
] = 
£q
++;

322 if(
	`wrôe
(
fds
[1], 
buf
, 1033) != 1033){

323 
	`¥ötf
(1, "pipe1 oops 1\n");

324 
	`exô
();

327 
	`exô
();

328 } if(
pid
 > 0){

329 
	`˛o£
(
fds
[1]);

330 
tŸÆ
 = 0;

331 
cc
 = 1;

332 (
n
 = 
	`ªad
(
fds
[0], 
buf
, 
cc
)) > 0){

333 
i
 = 0; i < 
n
; i++){

334 if((
buf
[
i
] & 0xffË!(
£q
++ & 0xff)){

335 
	`¥ötf
(1, "pipe1 oops 2\n");

339 
tŸÆ
 +
n
;

340 
cc
 = cc * 2;

341 if(
cc
 > (
buf
))

342 
cc
 = (
buf
);

344 if(
tŸÆ
 != 5 * 1033){

345 
	`¥ötf
(1, "pùe1 o›†3ÅŸÆ %d\n", 
tŸÆ
);

346 
	`exô
();

348 
	`˛o£
(
fds
[0]);

349 
	`waô
();

351 
	`¥ötf
(1, "fork() failed\n");

352 
	`exô
();

354 
	`¥ötf
(1, "pipe1 ok\n");

355 
	}
}

359 
	$¥ìm±
()

361 
pid1
, 
pid2
, 
pid3
;

362 
pfds
[2];

364 
	`¥ötf
(1, "preempt: ");

365 
pid1
 = 
	`f‹k
();

366 if(
pid1
 == 0)

370 
pid2
 = 
	`f‹k
();

371 if(
pid2
 == 0)

375 
	`pùe
(
pfds
);

376 
pid3
 = 
	`f‹k
();

377 if(
pid3
 == 0){

378 
	`˛o£
(
pfds
[0]);

379 if(
	`wrôe
(
pfds
[1], "x", 1) != 1)

380 
	`¥ötf
(1, "preempt writeÉrror");

381 
	`˛o£
(
pfds
[1]);

386 
	`˛o£
(
pfds
[1]);

387 if(
	`ªad
(
pfds
[0], 
buf
, (buf)) != 1){

388 
	`¥ötf
(1, "preemptÑeadÉrror");

391 
	`˛o£
(
pfds
[0]);

392 
	`¥ötf
(1, "kill... ");

393 
	`kûl
(
pid1
);

394 
	`kûl
(
pid2
);

395 
	`kûl
(
pid3
);

396 
	`¥ötf
(1, "wait... ");

397 
	`waô
();

398 
	`waô
();

399 
	`waô
();

400 
	`¥ötf
(1, "preempt ok\n");

401 
	}
}

405 
	$exôwaô
()

407 
i
, 
pid
;

409 
i
 = 0; i < 100; i++){

410 
pid
 = 
	`f‹k
();

411 if(
pid
 < 0){

412 
	`¥ötf
(1, "fork failed\n");

415 if(
pid
){

416 if(
	`waô
(Ë!
pid
){

417 
	`¥ötf
(1, "wait wrongÖid\n");

421 
	`exô
();

424 
	`¥ötf
(1, "exitwait ok\n");

425 
	}
}

428 
	$mem
()

430 *
m1
, *
m2
;

431 
pid
, 
µid
;

433 
	`¥ötf
(1, "memÅest\n");

434 
µid
 = 
	`gëpid
();

435 if((
pid
 = 
	`f‹k
()) == 0){

436 
m1
 = 0;

437 (
m2
 = 
	`mÆloc
(10001)) != 0){

438 *(**)
m2
 = 
m1
;

439 
m1
 = 
m2
;

441 
m1
){

442 
m2
 = *(**)
m1
;

443 
	`‰ì
(
m1
);

444 
m1
 = 
m2
;

446 
m1
 = 
	`mÆloc
(1024*20);

447 if(
m1
 == 0){

448 
	`¥ötf
(1, "couldn'tállocate mem?!!\n");

449 
	`kûl
(
µid
);

450 
	`exô
();

452 
	`‰ì
(
m1
);

453 
	`¥ötf
(1, "mem ok\n");

454 
	`exô
();

456 
	`waô
();

458 
	}
}

465 
	$sh¨edfd
()

467 
fd
, 
pid
, 
i
, 
n
, 
nc
, 
≈
;

468 
buf
[10];

470 
	`¥ötf
(1, "sharedfdÅest\n");

472 
	`u∆ök
("sharedfd");

473 
fd
 = 
	`›í
("sh¨edfd", 
O_CREATE
|
O_RDWR
);

474 if(
fd
 < 0){

475 
	`¥ötf
(1, "fstests: cannot open sharedfd for writing");

478 
pid
 = 
	`f‹k
();

479 
	`mem£t
(
buf
, 
pid
==0?'c':'p', (buf));

480 
i
 = 0; i < 1000; i++){

481 if(
	`wrôe
(
fd
, 
buf
, (buf)) != (buf)){

482 
	`¥ötf
(1, "fstests: write sharedfd failed\n");

486 if(
pid
 == 0)

487 
	`exô
();

489 
	`waô
();

490 
	`˛o£
(
fd
);

491 
fd
 = 
	`›í
("sharedfd", 0);

492 if(
fd
 < 0){

493 
	`¥ötf
(1, "fstests: cannot open sharedfd forÑeading\n");

496 
nc
 = 
≈
 = 0;

497 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

498 
i
 = 0; i < (
buf
); i++){

499 if(
buf
[
i
] == 'c')

500 
nc
++;

501 if(
buf
[
i
] == 'p')

502 
≈
++;

505 
	`˛o£
(
fd
);

506 
	`u∆ök
("sharedfd");

507 if(
nc
 =10000 && 
≈
 == 10000){

508 
	`¥ötf
(1, "sharedfd ok\n");

510 
	`¥ötf
(1, "sh¨edfd o›†%d %d\n", 
nc
, 
≈
);

511 
	`exô
();

513 
	}
}

518 
	$fourfûes
()

520 
fd
, 
pid
, 
i
, 
j
, 
n
, 
tŸÆ
, 
pi
;

521 *
«mes
[] = { "f0", "f1", "f2", "f3" };

522 *
‚ame
;

524 
	`¥ötf
(1, "fourfilesÅest\n");

526 
pi
 = 0;Öi < 4;Öi++){

527 
‚ame
 = 
«mes
[
pi
];

528 
	`u∆ök
(
‚ame
);

530 
pid
 = 
	`f‹k
();

531 if(
pid
 < 0){

532 
	`¥ötf
(1, "fork failed\n");

533 
	`exô
();

536 if(
pid
 == 0){

537 
fd
 = 
	`›í
(
‚ame
, 
O_CREATE
 | 
O_RDWR
);

538 if(
fd
 < 0){

539 
	`¥ötf
(1, "create failed\n");

540 
	`exô
();

543 
	`mem£t
(
buf
, '0'+
pi
, 512);

544 
i
 = 0; i < 12; i++){

545 if((
n
 = 
	`wrôe
(
fd
, 
buf
, 500)) != 500){

546 
	`¥ötf
(1, "wrôêÁûed %d\n", 
n
);

547 
	`exô
();

550 
	`exô
();

554 
pi
 = 0;Öi < 4;Öi++){

555 
	`waô
();

558 
i
 = 0; i < 2; i++){

559 
‚ame
 = 
«mes
[
i
];

560 
fd
 = 
	`›í
(
‚ame
, 0);

561 
tŸÆ
 = 0;

562 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

563 
j
 = 0; j < 
n
; j++){

564 if(
buf
[
j
] !'0'+
i
){

565 
	`¥ötf
(1, "wrong char\n");

566 
	`exô
();

569 
tŸÆ
 +
n
;

571 
	`˛o£
(
fd
);

572 if(
tŸÆ
 != 12*500){

573 
	`¥ötf
(1, "wr⁄gÜígth %d\n", 
tŸÆ
);

574 
	`exô
();

576 
	`u∆ök
(
‚ame
);

579 
	`¥ötf
(1, "fourfiles ok\n");

580 
	}
}

584 
	$¸óãdñëe
()

586 íum { 
N
 = 20 };

587 
pid
, 
i
, 
fd
, 
pi
;

588 
«me
[32];

590 
	`¥ötf
(1, "createdeleteÅest\n");

592 
pi
 = 0;Öi < 4;Öi++){

593 
pid
 = 
	`f‹k
();

594 if(
pid
 < 0){

595 
	`¥ötf
(1, "fork failed\n");

596 
	`exô
();

599 if(
pid
 == 0){

600 
«me
[0] = 'p' + 
pi
;

601 
«me
[2] = '\0';

602 
i
 = 0; i < 
N
; i++){

603 
«me
[1] = '0' + 
i
;

604 
fd
 = 
	`›í
(
«me
, 
O_CREATE
 | 
O_RDWR
);

605 if(
fd
 < 0){

606 
	`¥ötf
(1, "create failed\n");

607 
	`exô
();

609 
	`˛o£
(
fd
);

610 if(
i
 > 0 && (i % 2 ) == 0){

611 
«me
[1] = '0' + (
i
 / 2);

612 if(
	`u∆ök
(
«me
) < 0){

613 
	`¥ötf
(1, "unlink failed\n");

614 
	`exô
();

618 
	`exô
();

622 
pi
 = 0;Öi < 4;Öi++){

623 
	`waô
();

626 
«me
[0] =Çame[1] =Çame[2] = 0;

627 
i
 = 0; i < 
N
; i++){

628 
pi
 = 0;Öi < 4;Öi++){

629 
«me
[0] = 'p' + 
pi
;

630 
«me
[1] = '0' + 
i
;

631 
fd
 = 
	`›í
(
«me
, 0);

632 if((
i
 =0 || i >
N
/2Ë&& 
fd
 < 0){

633 
	`¥ötf
(1, "o›†¸óãdñëê%†didn'àexi°\n", 
«me
);

634 
	`exô
();

635 } if((
i
 >1 && i < 
N
/2Ë&& 
fd
 >= 0){

636 
	`¥ötf
(1, "o›†¸óãdñëê%†didÉxi°\n", 
«me
);

637 
	`exô
();

639 if(
fd
 >= 0)

640 
	`˛o£
(
fd
);

644 
i
 = 0; i < 
N
; i++){

645 
pi
 = 0;Öi < 4;Öi++){

646 
«me
[0] = 'p' + 
i
;

647 
«me
[1] = '0' + 
i
;

648 
	`u∆ök
(
«me
);

652 
	`¥ötf
(1, "createdelete ok\n");

653 
	}
}

657 
	$u∆ökªad
()

659 
fd
, 
fd1
;

661 
	`¥ötf
(1, "unlinkreadÅest\n");

662 
fd
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

663 if(
fd
 < 0){

664 
	`¥ötf
(1, "create unlinkread failed\n");

665 
	`exô
();

667 
	`wrôe
(
fd
, "hello", 5);

668 
	`˛o£
(
fd
);

670 
fd
 = 
	`›í
("u∆ökªad", 
O_RDWR
);

671 if(
fd
 < 0){

672 
	`¥ötf
(1, "open unlinkread failed\n");

673 
	`exô
();

675 if(
	`u∆ök
("unlinkread") != 0){

676 
	`¥ötf
(1, "unlink unlinkread failed\n");

677 
	`exô
();

680 
fd1
 = 
	`›í
("u∆ökªad", 
O_CREATE
 | 
O_RDWR
);

681 
	`wrôe
(
fd1
, "yyy", 3);

682 
	`˛o£
(
fd1
);

684 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

685 
	`¥ötf
(1, "unlinkreadÑead failed");

686 
	`exô
();

688 if(
buf
[0] != 'h'){

689 
	`¥ötf
(1, "unlinkread wrong data\n");

690 
	`exô
();

692 if(
	`wrôe
(
fd
, 
buf
, 10) != 10){

693 
	`¥ötf
(1, "unlinkread write failed\n");

694 
	`exô
();

696 
	`˛o£
(
fd
);

697 
	`u∆ök
("unlinkread");

698 
	`¥ötf
(1, "unlinkread ok\n");

699 
	}
}

702 
	$lökã°
()

704 
fd
;

706 
	`¥ötf
(1, "linktest\n");

708 
	`u∆ök
("lf1");

709 
	`u∆ök
("lf2");

711 
fd
 = 
	`›í
("lf1", 
O_CREATE
|
O_RDWR
);

712 if(
fd
 < 0){

713 
	`¥ötf
(1, "createÜf1 failed\n");

714 
	`exô
();

716 if(
	`wrôe
(
fd
, "hello", 5) != 5){

717 
	`¥ötf
(1, "writeÜf1 failed\n");

718 
	`exô
();

720 
	`˛o£
(
fd
);

722 if(
	`lök
("lf1", "lf2") < 0){

723 
	`¥ötf
(1, "linkÜf1Üf2 failed\n");

724 
	`exô
();

726 
	`u∆ök
("lf1");

728 if(
	`›í
("lf1", 0) >= 0){

729 
	`¥ötf
(1, "unlinkedÜf1 but it is stillÅhere!\n");

730 
	`exô
();

733 
fd
 = 
	`›í
("lf2", 0);

734 if(
fd
 < 0){

735 
	`¥ötf
(1, "openÜf2 failed\n");

736 
	`exô
();

738 if(
	`ªad
(
fd
, 
buf
, (buf)) != 5){

739 
	`¥ötf
(1, "readÜf2 failed\n");

740 
	`exô
();

742 
	`˛o£
(
fd
);

744 if(
	`lök
("lf2", "lf2") >= 0){

745 
	`¥ötf
(1, "linkÜf2Üf2 succeeded! oops\n");

746 
	`exô
();

749 
	`u∆ök
("lf2");

750 if(
	`lök
("lf2", "lf1") >= 0){

751 
	`¥ötf
(1, "linkÇon-existant succeeded! oops\n");

752 
	`exô
();

755 if(
	`lök
(".", "lf1") >= 0){

756 
	`¥ötf
(1, "link .Üf1 succeeded! oops\n");

757 
	`exô
();

760 
	`¥ötf
(1, "linktest ok\n");

761 
	}
}

765 
	$c⁄¸óã
()

767 
fûe
[3];

768 
i
, 
pid
, 
n
, 
fd
;

769 
Á
[40];

771 
ush‹t
 
öum
;

772 
«me
[14];

773 } 
de
;

775 
	`¥ötf
(1, "concreateÅest\n");

776 
fûe
[0] = 'C';

777 
fûe
[2] = '\0';

778 
i
 = 0; i < 40; i++){

779 
fûe
[1] = '0' + 
i
;

780 
	`u∆ök
(
fûe
);

781 
pid
 = 
	`f‹k
();

782 if(
pid
 && (
i
 % 3) == 1){

783 
	`lök
("C0", 
fûe
);

784 } if(
pid
 =0 && (
i
 % 5) == 1){

785 
	`lök
("C0", 
fûe
);

787 
fd
 = 
	`›í
(
fûe
, 
O_CREATE
 | 
O_RDWR
);

788 if(
fd
 < 0){

789 
	`¥ötf
(1, "c⁄¸óã cª©ê%†Áûed\n", 
fûe
);

790 
	`exô
();

792 
	`˛o£
(
fd
);

794 if(
pid
 == 0)

795 
	`exô
();

797 
	`waô
();

800 
	`mem£t
(
Á
, 0, (fa));

801 
fd
 = 
	`›í
(".", 0);

802 
n
 = 0;

803 
	`ªad
(
fd
, &
de
, (de)) > 0){

804 if(
de
.
öum
 == 0)

806 if(
de
.
«me
[0] == 'C' && de.name[2] == '\0'){

807 
i
 = 
de
.
«me
[1] - '0';

808 if(
i
 < 0 || i >(
Á
)){

809 
	`¥ötf
(1, "c⁄¸óã weúd fûê%s\n", 
de
.
«me
);

810 
	`exô
();

812 if(
Á
[
i
]){

813 
	`¥ötf
(1, "c⁄¸óã du∂iˇã fûê%s\n", 
de
.
«me
);

814 
	`exô
();

816 
Á
[
i
] = 1;

817 
n
++;

820 
	`˛o£
(
fd
);

822 if(
n
 != 40){

823 
	`¥ötf
(1, "concreateÇotÉnough files in directoryÜisting\n");

824 
	`exô
();

827 
i
 = 0; i < 40; i++){

828 
fûe
[1] = '0' + 
i
;

829 
pid
 = 
	`f‹k
();

830 if(
pid
 < 0){

831 
	`¥ötf
(1, "fork failed\n");

832 
	`exô
();

834 if(((
i
 % 3Ë=0 && 
pid
 == 0) ||

835 ((
i
 % 3Ë=1 && 
pid
 != 0)){

836 
	`˛o£
(
	`›í
(
fûe
, 0));

837 
	`˛o£
(
	`›í
(
fûe
, 0));

838 
	`˛o£
(
	`›í
(
fûe
, 0));

839 
	`˛o£
(
	`›í
(
fûe
, 0));

841 
	`u∆ök
(
fûe
);

842 
	`u∆ök
(
fûe
);

843 
	`u∆ök
(
fûe
);

844 
	`u∆ök
(
fûe
);

846 if(
pid
 == 0)

847 
	`exô
();

849 
	`waô
();

852 
	`¥ötf
(1, "concreate ok\n");

853 
	}
}

858 
	$löku∆ök
()

860 
pid
, 
i
;

862 
	`¥ötf
(1, "linkunlinkÅest\n");

864 
	`u∆ök
("x");

865 
pid
 = 
	`f‹k
();

866 if(
pid
 < 0){

867 
	`¥ötf
(1, "fork failed\n");

868 
	`exô
();

871 
x
 = (
pid
 ? 1 : 97);

872 
i
 = 0; i < 100; i++){

873 
x
 = x * 1103515245 + 12345;

874 if((
x
 % 3) == 0){

875 
	`˛o£
(
	`›í
("x", 
O_RDWR
 | 
O_CREATE
));

876 } if((
x
 % 3) == 1){

877 
	`lök
("cat", "x");

879 
	`u∆ök
("x");

883 if(
pid
)

884 
	`waô
();

886 
	`exô
();

888 
	`¥ötf
(1, "linkunlink ok\n");

889 
	}
}

893 
	$bigdú
()

895 
i
, 
fd
;

896 
«me
[10];

898 
	`¥ötf
(1, "bigdirÅest\n");

899 
	`u∆ök
("bd");

901 
fd
 = 
	`›í
("bd", 
O_CREATE
);

902 if(
fd
 < 0){

903 
	`¥ötf
(1, "bigdir create failed\n");

904 
	`exô
();

906 
	`˛o£
(
fd
);

908 
i
 = 0; i < 500; i++){

909 
«me
[0] = 'x';

910 
«me
[1] = '0' + (
i
 / 64);

911 
«me
[2] = '0' + (
i
 % 64);

912 
«me
[3] = '\0';

913 if(
	`lök
("bd", 
«me
) != 0){

914 
	`¥ötf
(1, "bigdirÜink failed\n");

915 
	`exô
();

919 
	`u∆ök
("bd");

920 
i
 = 0; i < 500; i++){

921 
«me
[0] = 'x';

922 
«me
[1] = '0' + (
i
 / 64);

923 
«me
[2] = '0' + (
i
 % 64);

924 
«me
[3] = '\0';

925 if(
	`u∆ök
(
«me
) != 0){

926 
	`¥ötf
(1, "bigdir unlink failed");

927 
	`exô
();

931 
	`¥ötf
(1, "bigdir ok\n");

932 
	}
}

935 
	$subdú
()

937 
fd
, 
cc
;

939 
	`¥ötf
(1, "subdirÅest\n");

941 
	`u∆ök
("ff");

942 if(
	`mkdú
("dd") != 0){

943 
	`¥ötf
(1, "subdir mkdir dd failed\n");

944 
	`exô
();

947 
fd
 = 
	`›í
("dd/ff", 
O_CREATE
 | 
O_RDWR
);

948 if(
fd
 < 0){

949 
	`¥ötf
(1, "create dd/ff failed\n");

950 
	`exô
();

952 
	`wrôe
(
fd
, "ff", 2);

953 
	`˛o£
(
fd
);

955 if(
	`u∆ök
("dd") >= 0){

956 
	`¥ötf
(1, "unlink dd (non-empty dir) succeeded!\n");

957 
	`exô
();

960 if(
	`mkdú
("/dd/dd") != 0){

961 
	`¥ötf
(1, "subdir mkdir dd/dd failed\n");

962 
	`exô
();

965 
fd
 = 
	`›í
("dd/dd/ff", 
O_CREATE
 | 
O_RDWR
);

966 if(
fd
 < 0){

967 
	`¥ötf
(1, "create dd/dd/ff failed\n");

968 
	`exô
();

970 
	`wrôe
(
fd
, "FF", 2);

971 
	`˛o£
(
fd
);

973 
fd
 = 
	`›í
("dd/dd/../ff", 0);

974 if(
fd
 < 0){

975 
	`¥ötf
(1, "open dd/dd/../ff failed\n");

976 
	`exô
();

978 
cc
 = 
	`ªad
(
fd
, 
buf
, (buf));

979 if(
cc
 !2 || 
buf
[0] != 'f'){

980 
	`¥ötf
(1, "dd/dd/../ff wrong content\n");

981 
	`exô
();

983 
	`˛o£
(
fd
);

985 if(
	`lök
("dd/dd/ff", "dd/dd/ffff") != 0){

986 
	`¥ötf
(1, "link dd/dd/ff dd/dd/ffff failed\n");

987 
	`exô
();

990 if(
	`u∆ök
("dd/dd/ff") != 0){

991 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

992 
	`exô
();

994 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

995 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded\n");

996 
	`exô
();

999 if(
	`chdú
("dd") != 0){

1000 
	`¥ötf
(1, "chdir dd failed\n");

1001 
	`exô
();

1003 if(
	`chdú
("dd/../../dd") != 0){

1004 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

1005 
	`exô
();

1007 if(
	`chdú
("dd/../../../dd") != 0){

1008 
	`¥ötf
(1, "chdir dd/../../dd failed\n");

1009 
	`exô
();

1011 if(
	`chdú
("./..") != 0){

1012 
	`¥ötf
(1, "chdir ./.. failed\n");

1013 
	`exô
();

1016 
fd
 = 
	`›í
("dd/dd/ffff", 0);

1017 if(
fd
 < 0){

1018 
	`¥ötf
(1, "open dd/dd/ffff failed\n");

1019 
	`exô
();

1021 if(
	`ªad
(
fd
, 
buf
, (buf)) != 2){

1022 
	`¥ötf
(1, "read dd/dd/ffff wrongÜen\n");

1023 
	`exô
();

1025 
	`˛o£
(
fd
);

1027 if(
	`›í
("dd/dd/ff", 
O_RDONLY
) >= 0){

1028 
	`¥ötf
(1, "open (unlinked) dd/dd/ff succeeded!\n");

1029 
	`exô
();

1032 if(
	`›í
("dd/ff/ff", 
O_CREATE
|
O_RDWR
) >= 0){

1033 
	`¥ötf
(1, "create dd/ff/ff succeeded!\n");

1034 
	`exô
();

1036 if(
	`›í
("dd/xx/ff", 
O_CREATE
|
O_RDWR
) >= 0){

1037 
	`¥ötf
(1, "create dd/xx/ff succeeded!\n");

1038 
	`exô
();

1040 if(
	`›í
("dd", 
O_CREATE
) >= 0){

1041 
	`¥ötf
(1, "create dd succeeded!\n");

1042 
	`exô
();

1044 if(
	`›í
("dd", 
O_RDWR
) >= 0){

1045 
	`¥ötf
(1, "open ddÑdwr succeeded!\n");

1046 
	`exô
();

1048 if(
	`›í
("dd", 
O_WRONLY
) >= 0){

1049 
	`¥ötf
(1, "open dd wronly succeeded!\n");

1050 
	`exô
();

1052 if(
	`lök
("dd/ff/ff", "dd/dd/xx") == 0){

1053 
	`¥ötf
(1, "link dd/ff/ff dd/dd/xx succeeded!\n");

1054 
	`exô
();

1056 if(
	`lök
("dd/xx/ff", "dd/dd/xx") == 0){

1057 
	`¥ötf
(1, "link dd/xx/ff dd/dd/xx succeeded!\n");

1058 
	`exô
();

1060 if(
	`lök
("dd/ff", "dd/dd/ffff") == 0){

1061 
	`¥ötf
(1, "link dd/ff dd/dd/ffff succeeded!\n");

1062 
	`exô
();

1064 if(
	`mkdú
("dd/ff/ff") == 0){

1065 
	`¥ötf
(1, "mkdir dd/ff/ff succeeded!\n");

1066 
	`exô
();

1068 if(
	`mkdú
("dd/xx/ff") == 0){

1069 
	`¥ötf
(1, "mkdir dd/xx/ff succeeded!\n");

1070 
	`exô
();

1072 if(
	`mkdú
("dd/dd/ffff") == 0){

1073 
	`¥ötf
(1, "mkdir dd/dd/ffff succeeded!\n");

1074 
	`exô
();

1076 if(
	`u∆ök
("dd/xx/ff") == 0){

1077 
	`¥ötf
(1, "unlink dd/xx/ff succeeded!\n");

1078 
	`exô
();

1080 if(
	`u∆ök
("dd/ff/ff") == 0){

1081 
	`¥ötf
(1, "unlink dd/ff/ff succeeded!\n");

1082 
	`exô
();

1084 if(
	`chdú
("dd/ff") == 0){

1085 
	`¥ötf
(1, "chdir dd/ff succeeded!\n");

1086 
	`exô
();

1088 if(
	`chdú
("dd/xx") == 0){

1089 
	`¥ötf
(1, "chdir dd/xx succeeded!\n");

1090 
	`exô
();

1093 if(
	`u∆ök
("dd/dd/ffff") != 0){

1094 
	`¥ötf
(1, "unlink dd/dd/ff failed\n");

1095 
	`exô
();

1097 if(
	`u∆ök
("dd/ff") != 0){

1098 
	`¥ötf
(1, "unlink dd/ff failed\n");

1099 
	`exô
();

1101 if(
	`u∆ök
("dd") == 0){

1102 
	`¥ötf
(1, "unlinkÇon-empty dd succeeded!\n");

1103 
	`exô
();

1105 if(
	`u∆ök
("dd/dd") < 0){

1106 
	`¥ötf
(1, "unlink dd/dd failed\n");

1107 
	`exô
();

1109 if(
	`u∆ök
("dd") < 0){

1110 
	`¥ötf
(1, "unlink dd failed\n");

1111 
	`exô
();

1114 
	`¥ötf
(1, "subdir ok\n");

1115 
	}
}

1119 
	$bigwrôe
()

1121 
fd
, 
sz
;

1123 
	`¥ötf
(1, "bigwriteÅest\n");

1125 
	`u∆ök
("bigwrite");

1126 
sz
 = 499; sz < 12*512; sz += 471){

1127 
fd
 = 
	`›í
("bigwrôe", 
O_CREATE
 | 
O_RDWR
);

1128 if(
fd
 < 0){

1129 
	`¥ötf
(1, "cannot create bigwrite\n");

1130 
	`exô
();

1132 
i
;

1133 
i
 = 0; i < 2; i++){

1134 
cc
 = 
	`wrôe
(
fd
, 
buf
, 
sz
);

1135 if(
cc
 !
sz
){

1136 
	`¥ötf
(1, "wrôe(%dËªà%d\n", 
sz
, 
cc
);

1137 
	`exô
();

1140 
	`˛o£
(
fd
);

1141 
	`u∆ök
("bigwrite");

1144 
	`¥ötf
(1, "bigwrite ok\n");

1145 
	}
}

1148 
	$bigfûe
()

1150 
fd
, 
i
, 
tŸÆ
, 
cc
;

1152 
	`¥ötf
(1, "bigfileÅest\n");

1154 
	`u∆ök
("bigfile");

1155 
fd
 = 
	`›í
("bigfûe", 
O_CREATE
 | 
O_RDWR
);

1156 if(
fd
 < 0){

1157 
	`¥ötf
(1, "cannot create bigfile");

1158 
	`exô
();

1160 
i
 = 0; i < 20; i++){

1161 
	`mem£t
(
buf
, 
i
, 600);

1162 if(
	`wrôe
(
fd
, 
buf
, 600) != 600){

1163 
	`¥ötf
(1, "write bigfile failed\n");

1164 
	`exô
();

1167 
	`˛o£
(
fd
);

1169 
fd
 = 
	`›í
("bigfile", 0);

1170 if(
fd
 < 0){

1171 
	`¥ötf
(1, "cannot open bigfile\n");

1172 
	`exô
();

1174 
tŸÆ
 = 0;

1175 
i
 = 0; ; i++){

1176 
cc
 = 
	`ªad
(
fd
, 
buf
, 300);

1177 if(
cc
 < 0){

1178 
	`¥ötf
(1, "read bigfile failed\n");

1179 
	`exô
();

1181 if(
cc
 == 0)

1183 if(
cc
 != 300){

1184 
	`¥ötf
(1, "shortÑead bigfile\n");

1185 
	`exô
();

1187 if(
buf
[0] !
i
/2 || buf[299] != i/2){

1188 
	`¥ötf
(1, "read bigfile wrong data\n");

1189 
	`exô
();

1191 
tŸÆ
 +
cc
;

1193 
	`˛o£
(
fd
);

1194 if(
tŸÆ
 != 20*600){

1195 
	`¥ötf
(1, "read bigfile wrongÅotal\n");

1196 
	`exô
();

1198 
	`u∆ök
("bigfile");

1200 
	`¥ötf
(1, "bigfileÅest ok\n");

1201 
	}
}

1204 
	$fouπìn
()

1206 
fd
;

1209 
	`¥ötf
(1, "fourteenÅest\n");

1211 if(
	`mkdú
("12345678901234") != 0){

1212 
	`¥ötf
(1, "mkdir 12345678901234 failed\n");

1213 
	`exô
();

1215 if(
	`mkdú
("12345678901234/123456789012345") != 0){

1216 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 failed\n");

1217 
	`exô
();

1219 
fd
 = 
	`›í
("123456789012345/123456789012345/123456789012345", 
O_CREATE
);

1220 if(
fd
 < 0){

1221 
	`¥ötf
(1, "create 123456789012345/123456789012345/123456789012345 failed\n");

1222 
	`exô
();

1224 
	`˛o£
(
fd
);

1225 
fd
 = 
	`›í
("12345678901234/12345678901234/12345678901234", 0);

1226 if(
fd
 < 0){

1227 
	`¥ötf
(1, "open 12345678901234/12345678901234/12345678901234 failed\n");

1228 
	`exô
();

1230 
	`˛o£
(
fd
);

1232 if(
	`mkdú
("12345678901234/12345678901234") == 0){

1233 
	`¥ötf
(1, "mkdir 12345678901234/12345678901234 succeeded!\n");

1234 
	`exô
();

1236 if(
	`mkdú
("123456789012345/12345678901234") == 0){

1237 
	`¥ötf
(1, "mkdir 12345678901234/123456789012345 succeeded!\n");

1238 
	`exô
();

1241 
	`¥ötf
(1, "fourteen ok\n");

1242 
	}
}

1245 
	$rmdŸ
()

1247 
	`¥ötf
(1, "rmdotÅest\n");

1248 if(
	`mkdú
("dots") != 0){

1249 
	`¥ötf
(1, "mkdir dots failed\n");

1250 
	`exô
();

1252 if(
	`chdú
("dots") != 0){

1253 
	`¥ötf
(1, "chdir dots failed\n");

1254 
	`exô
();

1256 if(
	`u∆ök
(".") == 0){

1257 
	`¥ötf
(1, "rm . worked!\n");

1258 
	`exô
();

1260 if(
	`u∆ök
("..") == 0){

1261 
	`¥ötf
(1, "rm .. worked!\n");

1262 
	`exô
();

1264 if(
	`chdú
("/") != 0){

1265 
	`¥ötf
(1, "chdir / failed\n");

1266 
	`exô
();

1268 if(
	`u∆ök
("dots/.") == 0){

1269 
	`¥ötf
(1, "unlink dots/. worked!\n");

1270 
	`exô
();

1272 if(
	`u∆ök
("dots/..") == 0){

1273 
	`¥ötf
(1, "unlink dots/.. worked!\n");

1274 
	`exô
();

1276 if(
	`u∆ök
("dots") != 0){

1277 
	`¥ötf
(1, "unlink dots failed!\n");

1278 
	`exô
();

1280 
	`¥ötf
(1, "rmdot ok\n");

1281 
	}
}

1284 
	$dúfûe
()

1286 
fd
;

1288 
	`¥ötf
(1, "dir vs file\n");

1290 
fd
 = 
	`›í
("dúfûe", 
O_CREATE
);

1291 if(
fd
 < 0){

1292 
	`¥ötf
(1, "create dirfile failed\n");

1293 
	`exô
();

1295 
	`˛o£
(
fd
);

1296 if(
	`chdú
("dirfile") == 0){

1297 
	`¥ötf
(1, "chdir dirfile succeeded!\n");

1298 
	`exô
();

1300 
fd
 = 
	`›í
("dirfile/xx", 0);

1301 if(
fd
 >= 0){

1302 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1303 
	`exô
();

1305 
fd
 = 
	`›í
("dúfûe/xx", 
O_CREATE
);

1306 if(
fd
 >= 0){

1307 
	`¥ötf
(1, "create dirfile/xx succeeded!\n");

1308 
	`exô
();

1310 if(
	`mkdú
("dirfile/xx") == 0){

1311 
	`¥ötf
(1, "mkdir dirfile/xx succeeded!\n");

1312 
	`exô
();

1314 if(
	`u∆ök
("dirfile/xx") == 0){

1315 
	`¥ötf
(1, "unlink dirfile/xx succeeded!\n");

1316 
	`exô
();

1318 if(
	`lök
("README", "dirfile/xx") == 0){

1319 
	`¥ötf
(1, "linkÅo dirfile/xx succeeded!\n");

1320 
	`exô
();

1322 if(
	`u∆ök
("dirfile") != 0){

1323 
	`¥ötf
(1, "unlink dirfile failed!\n");

1324 
	`exô
();

1327 
fd
 = 
	`›í
(".", 
O_RDWR
);

1328 if(
fd
 >= 0){

1329 
	`¥ötf
(1, "open . for writing succeeded!\n");

1330 
	`exô
();

1332 
fd
 = 
	`›í
(".", 0);

1333 if(
	`wrôe
(
fd
, "x", 1) > 0){

1334 
	`¥ötf
(1, "write . succeeded!\n");

1335 
	`exô
();

1337 
	`˛o£
(
fd
);

1339 
	`¥ötf
(1, "dir vs file OK\n");

1340 
	}
}

1344 
	$úef
()

1346 
i
, 
fd
;

1348 
	`¥ötf
(1, "empty fileÇame\n");

1351 
i
 = 0; i < 50 + 1; i++){

1352 if(
	`mkdú
("irefd") != 0){

1353 
	`¥ötf
(1, "mkdir irefd failed\n");

1354 
	`exô
();

1356 if(
	`chdú
("irefd") != 0){

1357 
	`¥ötf
(1, "chdir irefd failed\n");

1358 
	`exô
();

1361 
	`mkdú
("");

1362 
	`lök
("README", "");

1363 
fd
 = 
	`›í
("", 
O_CREATE
);

1364 if(
fd
 >= 0)

1365 
	`˛o£
(
fd
);

1366 
fd
 = 
	`›í
("xx", 
O_CREATE
);

1367 if(
fd
 >= 0)

1368 
	`˛o£
(
fd
);

1369 
	`u∆ök
("xx");

1372 
	`chdú
("/");

1373 
	`¥ötf
(1, "empty fileÇame OK\n");

1374 
	}
}

1380 
	$f‹kã°
()

1382 
n
, 
pid
;

1384 
	`¥ötf
(1, "forkÅest\n");

1386 
n
=0;Ç<1000;Ç++){

1387 
pid
 = 
	`f‹k
();

1388 if(
pid
 < 0)

1390 if(
pid
 == 0)

1391 
	`exô
();

1394 if(
n
 == 1000){

1395 
	`¥ötf
(1, "fork claimedÅo work 1000Åimes!\n");

1396 
	`exô
();

1399 ; 
n
 > 0;Ç--){

1400 if(
	`waô
() < 0){

1401 
	`¥ötf
(1, "wait stoppedÉarly\n");

1402 
	`exô
();

1406 if(
	`waô
() != -1){

1407 
	`¥ötf
(1, "wait gotÅoo many\n");

1408 
	`exô
();

1411 
	`¥ötf
(1, "forkÅest OK\n");

1412 
	}
}

1415 
	$sbrkã°
()

1417 
fds
[2], 
pid
, 
pids
[10], 
µid
;

1418 *
a
, *
b
, *
c
, *
œ°addr
, *
ﬁdbrk
, *
p
, 
s¸©ch
;

1419 
uöt
 
amt
;

1421 
	`¥ötf
(
°dout
, "sbrkÅest\n");

1422 
ﬁdbrk
 = 
	`sbrk
(0);

1425 
a
 = 
	`sbrk
(0);

1426 
i
;

1427 
i
 = 0; i < 5000; i++){

1428 
b
 = 
	`sbrk
(1);

1429 if(
b
 !
a
){

1430 
	`¥ötf
(
°dout
, "sbrkÅe° faûed %d %x %x\n", 
i
, 
a
, 
b
);

1431 
	`exô
();

1433 *
b
 = 1;

1434 
a
 = 
b
 + 1;

1436 
pid
 = 
	`f‹k
();

1437 if(
pid
 < 0){

1438 
	`¥ötf
(
°dout
, "sbrkÅest fork failed\n");

1439 
	`exô
();

1441 
c
 = 
	`sbrk
(1);

1442 
c
 = 
	`sbrk
(1);

1443 if(
c
 !
a
 + 1){

1444 
	`¥ötf
(
°dout
, "sbrkÅest failedÖost-fork\n");

1445 
	`exô
();

1447 if(
pid
 == 0)

1448 
	`exô
();

1449 
	`waô
();

1452 
	#BIG
 (100*1024*1024)

	)

1453 
a
 = 
	`sbrk
(0);

1454 
amt
 = (
BIG
Ë- (
uöt
)
a
;

1455 
p
 = 
	`sbrk
(
amt
);

1456 i‡(
p
 !
a
) {

1457 
	`¥ötf
(
°dout
, "sbrkÅest failedÅo grow bigáddress space;ÉnoughÖhys mem?\n");

1458 
	`exô
();

1460 
œ°addr
 = (*Ë(
BIG
-1);

1461 *
œ°addr
 = 99;

1464 
a
 = 
	`sbrk
(0);

1465 
c
 = 
	`sbrk
(-4096);

1466 if(
c
 == (*)0xffffffff){

1467 
	`¥ötf
(
°dout
, "sbrk couldÇot deallocate\n");

1468 
	`exô
();

1470 
c
 = 
	`sbrk
(0);

1471 if(
c
 !
a
 - 4096){

1472 
	`¥ötf
(
°dout
, "sbrk dóŒoˇti⁄Örodu˚d wr⁄gáddªss,á %x c %x\n", 
a
, 
c
);

1473 
	`exô
();

1477 
a
 = 
	`sbrk
(0);

1478 
c
 = 
	`sbrk
(4096);

1479 if(
c
 !
a
 || 
	`sbrk
(0) !=á + 4096){

1480 
	`¥ötf
(
°dout
, "sbrkÑe-Æloˇti⁄ faûed,á %x c %x\n", 
a
, 
c
);

1481 
	`exô
();

1483 if(*
œ°addr
 == 99){

1485 
	`¥ötf
(
°dout
, "sbrk de-allocation didn'tÑeally deallocate\n");

1486 
	`exô
();

1489 
a
 = 
	`sbrk
(0);

1490 
c
 = 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1491 if(
c
 !
a
){

1492 
	`¥ötf
(
°dout
, "sbrk downsizêÁûed,á %x c %x\n", 
a
, 
c
);

1493 
	`exô
();

1497 
a
 = (*)(
KERNBASE
);á < (*) (KERNBASE+2000000);á += 50000){

1498 
µid
 = 
	`gëpid
();

1499 
pid
 = 
	`f‹k
();

1500 if(
pid
 < 0){

1501 
	`¥ötf
(
°dout
, "fork failed\n");

1502 
	`exô
();

1504 if(
pid
 == 0){

1505 
	`¥ötf
(
°dout
, "o›†couldÑód %x = %x\n", 
a
, *a);

1506 
	`kûl
(
µid
);

1507 
	`exô
();

1509 
	`waô
();

1514 if(
	`pùe
(
fds
) != 0){

1515 
	`¥ötf
(1, "pipe() failed\n");

1516 
	`exô
();

1518 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1519 if((
pids
[
i
] = 
	`f‹k
()) == 0){

1521 
	`sbrk
(
BIG
 - (
uöt
)sbrk(0));

1522 
	`wrôe
(
fds
[1], "x", 1);

1524 ;;Ë
	`¶ìp
(1000);

1526 if(
pids
[
i
] != -1)

1527 
	`ªad
(
fds
[0], &
s¸©ch
, 1);

1531 
c
 = 
	`sbrk
(4096);

1532 
i
 = 0; i < (
pids
)/(pids[0]); i++){

1533 if(
pids
[
i
] == -1)

1535 
	`kûl
(
pids
[
i
]);

1536 
	`waô
();

1538 if(
c
 == (*)0xffffffff){

1539 
	`¥ötf
(
°dout
, "failed sbrkÜeaked memory\n");

1540 
	`exô
();

1543 if(
	`sbrk
(0Ë> 
ﬁdbrk
)

1544 
	`sbrk
(-(sbrk(0Ë- 
ﬁdbrk
));

1546 
	`¥ötf
(
°dout
, "sbrkÅest OK\n");

1547 
	}
}

1550 
	$vÆid©eöt
(*
p
)

1552 
ªs
;

1553 
	`asm
("mov %%esp, %%ebx\n\t"

1557 "˜" (
ªs
) :

1558 "a" (
SYS_¶ìp
), "n" (
T_SYSCALL
), "c" (
p
) :

1560 
	}
}

1563 
	$vÆid©ëe°
()

1565 
hi
, 
pid
;

1566 
uöt
 
p
;

1568 
	`¥ötf
(
°dout
, "validateÅest\n");

1569 
hi
 = 1100*1024;

1571 
p
 = 0;Ö <(
uöt
)
hi
;Ö += 4096){

1572 if((
pid
 = 
	`f‹k
()) == 0){

1574 
	`vÆid©eöt
((*)
p
);

1575 
	`exô
();

1577 
	`¶ìp
(0);

1578 
	`¶ìp
(0);

1579 
	`kûl
(
pid
);

1580 
	`waô
();

1583 if(
	`lök
("nosuchfûe", (*)
p
) != -1){

1584 
	`¥ötf
(
°dout
, "link shouldÇot succeed\n");

1585 
	`exô
();

1589 
	`¥ötf
(
°dout
, "validate ok\n");

1590 
	}
}

1593 
	gunöô
[10000];

1595 
	$bs°e°
()

1597 
i
;

1599 
	`¥ötf
(
°dout
, "bssÅest\n");

1600 
i
 = 0; i < (
unöô
); i++){

1601 if(
unöô
[
i
] != '\0'){

1602 
	`¥ötf
(
°dout
, "bssÅest failed\n");

1603 
	`exô
();

1606 
	`¥ötf
(
°dout
, "bssÅest ok\n");

1607 
	}
}

1613 
	$big¨gã°
()

1615 
pid
, 
fd
;

1617 
	`u∆ök
("bigarg-ok");

1618 
pid
 = 
	`f‹k
();

1619 if(
pid
 == 0){

1620 *
¨gs
[
MAXARG
];

1621 
i
;

1622 
i
 = 0; i < 
MAXARG
-1; i++)

1623 
¨gs
[
i
] = "bigargsÅest: failed\n ";

1624 
¨gs
[
MAXARG
-1] = 0;

1625 
	`¥ötf
(
°dout
, "bigargÅest\n");

1626 
	`exec
("echo", 
¨gs
);

1627 
	`¥ötf
(
°dout
, "bigargÅest ok\n");

1628 
fd
 = 
	`›í
("big¨g-ok", 
O_CREATE
);

1629 
	`˛o£
(
fd
);

1630 
	`exô
();

1631 } if(
pid
 < 0){

1632 
	`¥ötf
(
°dout
, "bigargtest: fork failed\n");

1633 
	`exô
();

1635 
	`waô
();

1636 
fd
 = 
	`›í
("bigarg-ok", 0);

1637 if(
fd
 < 0){

1638 
	`¥ötf
(
°dout
, "bigargÅest failed!\n");

1639 
	`exô
();

1641 
	`˛o£
(
fd
);

1642 
	`u∆ök
("bigarg-ok");

1643 
	}
}

1648 
	$fsfuŒ
()

1650 
nfûes
;

1651 
fsblocks
 = 0;

1653 
	`¥ötf
(1, "fsfullÅest\n");

1655 
nfûes
 = 0; ;Çfiles++){

1656 
«me
[64];

1657 
«me
[0] = 'f';

1658 
«me
[1] = '0' + 
nfûes
 / 1000;

1659 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1660 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1661 
«me
[4] = '0' + (
nfûes
 % 10);

1662 
«me
[5] = '\0';

1663 
	`¥ötf
(1, "wrôög %s\n", 
«me
);

1664 
fd
 = 
	`›í
(
«me
, 
O_CREATE
|
O_RDWR
);

1665 if(
fd
 < 0){

1666 
	`¥ötf
(1, "›í %†Áûed\n", 
«me
);

1669 
tŸÆ
 = 0;

1671 
cc
 = 
	`wrôe
(
fd
, 
buf
, 512);

1672 if(
cc
 < 512)

1674 
tŸÆ
 +
cc
;

1675 
fsblocks
++;

1677 
	`¥ötf
(1, "wrŸê%d byãs\n", 
tŸÆ
);

1678 
	`˛o£
(
fd
);

1679 if(
tŸÆ
 == 0)

1683 
nfûes
 >= 0){

1684 
«me
[64];

1685 
«me
[0] = 'f';

1686 
«me
[1] = '0' + 
nfûes
 / 1000;

1687 
«me
[2] = '0' + (
nfûes
 % 1000) / 100;

1688 
«me
[3] = '0' + (
nfûes
 % 100) / 10;

1689 
«me
[4] = '0' + (
nfûes
 % 10);

1690 
«me
[5] = '\0';

1691 
	`u∆ök
(
«me
);

1692 
nfûes
--;

1695 
	`¥ötf
(1, "fsfullÅest finished\n");

1696 
	}
}

1698 
	gønd°©e
 = 1;

1700 
	$ønd
()

1702 
ønd°©e
 =Ñandstate * 1664525 + 1013904223;

1703  
ønd°©e
;

1704 
	}
}

1707 
	$maö
(
¨gc
, *
¨gv
[])

1709 
	`¥ötf
(1, "usertests starting\n");

1711 if(
	`›í
("usertests.ran", 0) >= 0){

1712 
	`¥ötf
(1, "alreadyÑan userÅests --Ñebuild fs.img\n");

1713 
	`exô
();

1715 
	`˛o£
(
	`›í
("u£πe°s.øn", 
O_CREATE
));

1717 
	`¸óãdñëe
();

1718 
	`löku∆ök
();

1719 
	`c⁄¸óã
();

1720 
	`fourfûes
();

1721 
	`sh¨edfd
();

1723 
	`big¨gã°
();

1724 
	`bigwrôe
();

1725 
	`big¨gã°
();

1726 
	`bs°e°
();

1727 
	`sbrkã°
();

1728 
	`vÆid©ëe°
();

1730 
	`›íã°
();

1731 
	`wrôëe°
();

1732 
	`wrôëe°1
();

1733 
	`¸óãã°
();

1735 
	`›íùuâe°
();

1736 
	`exôùuâe°
();

1737 
	`ùuâe°
();

1739 
	`mem
();

1740 
	`pùe1
();

1741 
	`¥ìm±
();

1742 
	`exôwaô
();

1744 
	`rmdŸ
();

1745 
	`fouπìn
();

1746 
	`bigfûe
();

1747 
	`subdú
();

1748 
	`lökã°
();

1749 
	`u∆ökªad
();

1750 
	`dúfûe
();

1751 
	`úef
();

1752 
	`f‹kã°
();

1753 
	`bigdú
();

1754 
	`exe˘e°
();

1756 
	`exô
();

1757 
	}
}

	@vm.c

1 
	~"∑øm.h
"

2 
	~"ty≥s.h
"

3 
	~"defs.h
"

4 
	~"x86.h
"

5 
	~"memœyout.h
"

6 
	~"mmu.h
"

7 
	~"¥oc.h
"

8 
	~"ñf.h
"

10 
d©a
[];

11 
pde_t
 *
	gkpgdú
;

12 
£gdesc
 
	ggdt
[
NSEGS
];

17 
	$£göô
()

19 
˝u
 *
c
;

25 
c
 = &
˝us
[
	`˝unum
()];

26 
c
->
gdt
[
SEG_KCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 0);

27 
c
->
gdt
[
SEG_KDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 0);

28 
c
->
gdt
[
SEG_UCODE
] = 
	`SEG
(
STA_X
|
STA_R
, 0, 0xffffffff, 
DPL_USER
);

29 
c
->
gdt
[
SEG_UDATA
] = 
	`SEG
(
STA_W
, 0, 0xffffffff, 
DPL_USER
);

32 
c
->
gdt
[
SEG_KCPU
] = 
	`SEG
(
STA_W
, &c->
˝u
, 8, 0);

34 
	`lgdt
(
c
->
gdt
, (c->gdt));

35 
	`lﬂdgs
(
SEG_KCPU
 << 3);

38 
˝u
 = 
c
;

39 
¥oc
 = 0;

40 
	}
}

45 
±e_t
 *

46 
	$wÆkpgdú
(
pde_t
 *
pgdú
, c⁄° *
va
, 
Æloc
)

48 
pde_t
 *
pde
;

49 
±e_t
 *
pgèb
;

51 
pde
 = &
pgdú
[
	`PDX
(
va
)];

52 if(*
pde
 & 
PTE_P
){

53 
pgèb
 = (
±e_t
*)
	`p2v
(
	`PTE_ADDR
(*
pde
));

55 if(!
Æloc
 || (
pgèb
 = (
±e_t
*)
	`kÆloc
()) == 0)

58 
	`mem£t
(
pgèb
, 0, 
PGSIZE
);

62 *
pde
 = 
	`v2p
(
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

64  &
pgèb
[
	`PTX
(
va
)];

65 
	}
}

71 
	$m≠∑ges
(
pde_t
 *
pgdú
, *
va
, 
uöt
 
size
, uöà
∑
, 
≥rm
)

73 *
a
, *
œ°
;

74 
±e_t
 *
±e
;

76 
a
 = (*)
	`PGROUNDDOWN
((
uöt
)
va
);

77 
œ°
 = (*)
	`PGROUNDDOWN
(((
uöt
)
va
Ë+ 
size
 - 1);

79 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
a
, 1)) == 0)

81 if(*
±e
 & 
PTE_P
)

82 
	`∑nic
("remap");

83 *
±e
 = 
∑
 | 
≥rm
 | 
PTE_P
;

84 if(
a
 =
œ°
)

86 
a
 +
PGSIZE
;

87 
∑
 +
PGSIZE
;

90 
	}
}

115 
	skm≠
 {

116 *
	mvút
;

117 
uöt
 
	mphys_°¨t
;

118 
uöt
 
	mphys_íd
;

119 
	m≥rm
;

120 } 
	gkm≠
[] = {

121 { (*)
KERNBASE
, 0, 
EXTMEM
, 
PTE_W
},

122 { (*)
KERNLINK
, 
V2P
(KERNLINK), V2P(
d©a
), 0},

123 { (*)
d©a
, 
V2P
(d©a), 
PHYSTOP
, 
PTE_W
},

124 { (*)
DEVSPACE
, DEVSPACE, 0, 
PTE_W
},

128 
pde_t
*

129 
	$£tupkvm
()

131 
pde_t
 *
pgdú
;

132 
km≠
 *
k
;

134 if((
pgdú
 = (
pde_t
*)
	`kÆloc
()) == 0)

136 
	`mem£t
(
pgdú
, 0, 
PGSIZE
);

137 i‡(
	`p2v
(
PHYSTOP
Ë> (*)
DEVSPACE
)

138 
	`∑nic
("PHYSTOPÅoo high");

139 
k
 = 
km≠
; k < &km≠[
	`NELEM
(kmap)]; k++)

140 if(
	`m≠∑ges
(
pgdú
, 
k
->
vút
, k->
phys_íd
 - k->
phys_°¨t
,

141 (
uöt
)
k
->
phys_°¨t
, k->
≥rm
) < 0)

143  
pgdú
;

144 
	}
}

149 
	$kvmÆloc
()

151 
kpgdú
 = 
	`£tupkvm
();

152 
	`swôchkvm
();

153 
	}
}

158 
	$swôchkvm
()

160 
	`l¸3
(
	`v2p
(
kpgdú
));

161 
	}
}

165 
	$swôchuvm
(
¥oc
 *
p
)

167 
	`push˛i
();

168 
˝u
->
gdt
[
SEG_TSS
] = 
	`SEG16
(
STS_T32A
, &˝u->
ts
, (cpu->ts)-1, 0);

169 
˝u
->
gdt
[
SEG_TSS
].
s
 = 0;

170 
˝u
->
ts
.
ss0
 = 
SEG_KDATA
 << 3;

171 
˝u
->
ts
.
e•0
 = (
uöt
)
¥oc
->
k°ack
 + 
KSTACKSIZE
;

172 
	`…r
(
SEG_TSS
 << 3);

173 if(
p
->
pgdú
 == 0)

174 
	`∑nic
("switchuvm:ÇoÖgdir");

175 
	`l¸3
(
	`v2p
(
p
->
pgdú
));

176 
	`p›˛i
();

177 
	}
}

182 
	$öôuvm
(
pde_t
 *
pgdú
, *
öô
, 
uöt
 
sz
)

184 *
mem
;

186 if(
sz
 >
PGSIZE
)

187 
	`∑nic
("inituvm: moreÅhanáÖage");

188 
mem
 = 
	`kÆloc
();

189 
	`mem£t
(
mem
, 0, 
PGSIZE
);

190 
	`m≠∑ges
(
pgdú
, 0, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

191 
	`memmove
(
mem
, 
öô
, 
sz
);

192 
	}
}

197 
	$lﬂduvm
(
pde_t
 *
pgdú
, *
addr
, 
öode
 *
ù
, 
uöt
 
off£t
, uöà
sz
)

199 
uöt
 
i
, 
∑
, 
n
;

200 
±e_t
 *
±e
;

202 if((
uöt
Ë
addr
 % 
PGSIZE
 != 0)

203 
	`∑nic
("loaduvm:áddr must beÖageáligned");

204 
i
 = 0; i < 
sz
; i +
PGSIZE
){

205 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, 
addr
+
i
, 0)) == 0)

206 
	`∑nic
("loaduvm:áddress shouldÉxist");

207 
∑
 = 
	`PTE_ADDR
(*
±e
);

208 if(
sz
 - 
i
 < 
PGSIZE
)

209 
n
 = 
sz
 - 
i
;

211 
n
 = 
PGSIZE
;

212 if(
	`ªadi
(
ù
, 
	`p2v
(
∑
), 
off£t
+
i
, 
n
) !=Ç)

216 
	}
}

221 
	$Ælocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

223 *
mem
;

224 
uöt
 
a
;

226 if(
√wsz
 >
KERNBASE
)

228 if(
√wsz
 < 
ﬁdsz
)

229  
ﬁdsz
;

231 
a
 = 
	`PGROUNDUP
(
ﬁdsz
);

232 ; 
a
 < 
√wsz
;á +
PGSIZE
){

233 
mem
 = 
	`kÆloc
();

234 if(
mem
 == 0){

235 
	`˝rötf
("allocuvm out of memory\n");

236 
	`dóŒocuvm
(
pgdú
, 
√wsz
, 
ﬁdsz
);

239 
	`mem£t
(
mem
, 0, 
PGSIZE
);

240 
	`m≠∑ges
(
pgdú
, (*)
a
, 
PGSIZE
, 
	`v2p
(
mem
), 
PTE_W
|
PTE_U
);

242  
√wsz
;

243 
	}
}

250 
	$dóŒocuvm
(
pde_t
 *
pgdú
, 
uöt
 
ﬁdsz
, uöà
√wsz
)

252 
±e_t
 *
±e
;

253 
uöt
 
a
, 
∑
;

255 if(
√wsz
 >
ﬁdsz
)

256  
ﬁdsz
;

258 
a
 = 
	`PGROUNDUP
(
√wsz
);

259 ; 
a
 < 
ﬁdsz
;á +
PGSIZE
){

260 
±e
 = 
	`wÆkpgdú
(
pgdú
, (*)
a
, 0);

261 if(!
±e
)

262 
a
 +(
NPTENTRIES
 - 1Ë* 
PGSIZE
;

263 if((*
±e
 & 
PTE_P
) != 0){

264 
∑
 = 
	`PTE_ADDR
(*
±e
);

265 if(
∑
 == 0)

266 
	`∑nic
("kfree");

267 *
v
 = 
	`p2v
(
∑
);

268 
	`k‰ì
(
v
);

269 *
±e
 = 0;

272  
√wsz
;

273 
	}
}

278 
	$‰ìvm
(
pde_t
 *
pgdú
)

280 
uöt
 
i
;

282 if(
pgdú
 == 0)

283 
	`∑nic
("freevm:ÇoÖgdir");

284 
	`dóŒocuvm
(
pgdú
, 
KERNBASE
, 0);

285 
i
 = 0; i < 
NPDENTRIES
; i++){

286 if(
pgdú
[
i
] & 
PTE_P
){

287 * 
v
 = 
	`p2v
(
	`PTE_ADDR
(
pgdú
[
i
]));

288 
	`k‰ì
(
v
);

291 
	`k‰ì
((*)
pgdú
);

292 
	}
}

297 
	$˛óΩãu
(
pde_t
 *
pgdú
, *
uva
)

299 
±e_t
 *
±e
;

301 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

302 if(
±e
 == 0)

303 
	`∑nic
("clearpteu");

304 *
±e
 &~
PTE_U
;

305 
	}
}

309 
pde_t
*

310 
	$c›yuvm
(
pde_t
 *
pgdú
, 
uöt
 
sz
)

312 
pde_t
 *
d
;

313 
±e_t
 *
±e
;

314 
uöt
 
∑
, 
i
, 
Êags
;

315 *
mem
;

317 if((
d
 = 
	`£tupkvm
()) == 0)

319 
i
 = 0; i < 
sz
; i +
PGSIZE
){

320 if((
±e
 = 
	`wÆkpgdú
(
pgdú
, (*Ë
i
, 0)) == 0)

321 
	`∑nic
("copyuvm:Öte shouldÉxist");

322 if(!(*
±e
 & 
PTE_P
))

323 
	`∑nic
("copyuvm:ÖageÇotÖresent");

324 
∑
 = 
	`PTE_ADDR
(*
±e
);

325 
Êags
 = 
	`PTE_FLAGS
(*
±e
);

326 if((
mem
 = 
	`kÆloc
()) == 0)

327 
bad
;

328 
	`memmove
(
mem
, (*)
	`p2v
(
∑
), 
PGSIZE
);

329 if(
	`m≠∑ges
(
d
, (*)
i
, 
PGSIZE
, 
	`v2p
(
mem
), 
Êags
) < 0)

330 
bad
;

332  
d
;

334 
bad
:

335 
	`‰ìvm
(
d
);

337 
	}
}

342 
	$uva2ka
(
pde_t
 *
pgdú
, *
uva
)

344 
±e_t
 *
±e
;

346 
±e
 = 
	`wÆkpgdú
(
pgdú
, 
uva
, 0);

347 if((*
±e
 & 
PTE_P
) == 0)

349 if((*
±e
 & 
PTE_U
) == 0)

351  (*)
	`p2v
(
	`PTE_ADDR
(*
±e
));

352 
	}
}

358 
	$c›yout
(
pde_t
 *
pgdú
, 
uöt
 
va
, *
p
, uöà
Àn
)

360 *
buf
, *
∑0
;

361 
uöt
 
n
, 
va0
;

363 
buf
 = (*)
p
;

364 
Àn
 > 0){

365 
va0
 = (
uöt
)
	`PGROUNDDOWN
(
va
);

366 
∑0
 = 
	`uva2ka
(
pgdú
, (*)
va0
);

367 if(
∑0
 == 0)

369 
n
 = 
PGSIZE
 - (
va
 - 
va0
);

370 if(
n
 > 
Àn
)

371 
n
 = 
Àn
;

372 
	`memmove
(
∑0
 + (
va
 - 
va0
), 
buf
, 
n
);

373 
Àn
 -
n
;

374 
buf
 +
n
;

375 
va
 = 
va0
 + 
PGSIZE
;

378 
	}
}

	@wc.c

1 
	~"ty≥s.h
"

2 
	~"°©.h
"

3 
	~"u£r.h
"

5 
	gbuf
[512];

8 
	$wc
(
fd
, *
«me
)

10 
i
, 
n
;

11 
l
, 
w
, 
c
, 
öw‹d
;

13 
l
 = 
w
 = 
c
 = 0;

14 
öw‹d
 = 0;

15 (
n
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0){

16 
i
=0; i<
n
; i++){

17 
c
++;

18 if(
buf
[
i
] == '\n')

19 
l
++;

20 if(
	`°rchr
(" \r\t\n\v", 
buf
[
i
]))

21 
öw‹d
 = 0;

22 if(!
öw‹d
){

23 
w
++;

24 
öw‹d
 = 1;

28 if(
n
 < 0){

29 
	`¥ötf
(1, "wc:ÑeadÉrror\n");

30 
	`exô
();

32 
	`¥ötf
(1, "%d %d %d %s\n", 
l
, 
w
, 
c
, 
«me
);

33 
	}
}

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
fd
, 
i
;

40 if(
¨gc
 <= 1){

41 
	`wc
(0, "");

42 
	`exô
();

45 
i
 = 1; i < 
¨gc
; i++){

46 if((
fd
 = 
	`›í
(
¨gv
[
i
], 0)) < 0){

47 
	`¥ötf
(1, "wc: c™nŸ o≥¿%s\n", 
¨gv
[
i
]);

48 
	`exô
();

50 
	`wc
(
fd
, 
¨gv
[
i
]);

51 
	`˛o£
(
fd
);

53 
	`exô
();

54 
	}
}

	@x86.h

3 
ölöe
 
uch¨


4 
	$öb
(
ush‹t
 
p‹t
)

6 
uch¨
 
d©a
;

8 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

9  
d©a
;

10 
	}
}

12 
ölöe
 

13 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

15 
asm
 volatile("cld;Ñep insl" :

16 "=D" (
addr
), "=c" (
˙t
) :

17 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

19 
	}
}

21 
ölöe
 

22 
	$outb
(
ush‹t
 
p‹t
, 
uch¨
 
d©a
)

24 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

25 
	}
}

27 
ölöe
 

28 
	$outw
(
ush‹t
 
p‹t
, ush‹à
d©a
)

30 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

31 
	}
}

33 
ölöe
 

34 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

36 
asm
 volatile("cld;Ñep outsl" :

37 "=S" (
addr
), "=c" (
˙t
) :

38 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

40 
	}
}

42 
ölöe
 

43 
	$°osb
(*
addr
, 
d©a
, 
˙t
)

45 
asm
 volatile("cld;Ñep stosb" :

46 "=D" (
addr
), "=c" (
˙t
) :

47 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

49 
	}
}

51 
ölöe
 

52 
	$°o¶
(*
addr
, 
d©a
, 
˙t
)

54 
asm
 volatile("cld;Ñep stosl" :

55 "=D" (
addr
), "=c" (
˙t
) :

56 "0" (
addr
), "1" (
˙t
), "a" (
d©a
) :

58 
	}
}

60 
	g£gdesc
;

62 
ölöe
 

63 
	$lgdt
(
£gdesc
 *
p
, 
size
)

65 vﬁ©ûê
ush‹t
 
pd
[3];

67 
pd
[0] = 
size
-1;

68 
pd
[1] = (
uöt
)
p
;

69 
pd
[2] = (
uöt
)
p
 >> 16;

71 
asm
 vﬁ©ûe("lgdà(%0)" : : "r" (
pd
));

72 
	}
}

74 
	gg©edesc
;

76 
ölöe
 

77 
	$lidt
(
g©edesc
 *
p
, 
size
)

79 vﬁ©ûê
ush‹t
 
pd
[3];

81 
pd
[0] = 
size
-1;

82 
pd
[1] = (
uöt
)
p
;

83 
pd
[2] = (
uöt
)
p
 >> 16;

85 
asm
 vﬁ©ûe("lidà(%0)" : : "r" (
pd
));

86 
	}
}

88 
ölöe
 

89 
	$…r
(
ush‹t
 
£l
)

91 
asm
 vﬁ©ûe("…∏%0" : : "r" (
£l
));

92 
	}
}

94 
ölöe
 
uöt


95 
	$ªadeÊags
()

97 
uöt
 
eÊags
;

98 
asm
 vﬁ©ûe("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

99  
eÊags
;

100 
	}
}

102 
ölöe
 

103 
	$lﬂdgs
(
ush‹t
 
v
)

105 
asm
 vﬁ©ûe("movw %0, %%gs" : : "r" (
v
));

106 
	}
}

108 
ölöe
 

109 
	$˛i
()

111 
asm
 volatile("cli");

112 
	}
}

114 
ölöe
 

115 
	$°i
()

117 
asm
 volatile("sti");

118 
	}
}

120 
ölöe
 
uöt


121 
	$xchg
(vﬁ©ûê
uöt
 *
addr
, uöà
√wvÆ
)

123 
uöt
 
ªsu…
;

126 
asm
 volatile("lock; xchgl %0, %1" :

127 "+m" (*
addr
), "˜" (
ªsu…
) :

128 "1" (
√wvÆ
) :

130  
ªsu…
;

131 
	}
}

133 
ölöe
 
uöt


134 
	$r¸2
()

136 
uöt
 
vÆ
;

137 
asm
 vﬁ©ûe("mov»%%¸2,%0" : "Ù" (
vÆ
));

138  
vÆ
;

139 
	}
}

141 
ölöe
 

142 
	$l¸3
(
uöt
 
vÆ
)

144 
asm
 vﬁ©ûe("mov»%0,%%¸3" : : "r" (
vÆ
));

145 
	}
}

150 
	så≠‰ame
 {

152 
uöt
 
	medi
;

153 
uöt
 
	mesi
;

154 
uöt
 
	mebp
;

155 
uöt
 
	m€•
;

156 
uöt
 
	mebx
;

157 
uöt
 
	medx
;

158 
uöt
 
	mecx
;

159 
uöt
 
	móx
;

162 
ush‹t
 
	mgs
;

163 
ush‹t
 
	m∑ddög1
;

164 
ush‹t
 
	mfs
;

165 
ush‹t
 
	m∑ddög2
;

166 
ush‹t
 
	mes
;

167 
ush‹t
 
	m∑ddög3
;

168 
ush‹t
 
	mds
;

169 
ush‹t
 
	m∑ddög4
;

170 
uöt
 
	må≠no
;

173 
uöt
 
	mîr
;

174 
uöt
 
	meù
;

175 
ush‹t
 
	mcs
;

176 
ush‹t
 
	m∑ddög5
;

177 
uöt
 
	meÊags
;

180 
uöt
 
	me•
;

181 
ush‹t
 
	mss
;

182 
ush‹t
 
	m∑ddög6
;

	@zombie.c

4 
	~"ty≥s.h
"

5 
	~"°©.h
"

6 
	~"u£r.h
"

9 
	$maö
()

11 if(
	`f‹k
() > 0)

12 
	`¶ìp
(5);

13 
	`exô
();

14 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


175 *
	$°rdup
 (c⁄° *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 c⁄° *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 c⁄° *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 const *

228 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 const *

255 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 const *

307 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

324 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

326 #ifde‡
__OPTIMIZE__


327 
__exã∫_Æways_ölöe
 *

328 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


330  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

333 
__exã∫_Æways_ölöe
 const *

334 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


336  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

339 
	}
}

341 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
__END_NAMESPACE_STD


353 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

354 c⁄° *
__ª°ri˘
 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

357 #ifde‡
__USE_POSIX


358 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

359 **
__ª°ri˘
 
__ßve_±r
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

363 #ifde‡
__USE_GNU


365 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


366 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

369 c⁄° *
__√edÀ
)

370 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

373 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

377 #ifde‡
__USE_GNU


381 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

382 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

387 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

390 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

391 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

392 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

396 
__BEGIN_NAMESPACE_STD


398 
size_t
 
	$°æí
 (c⁄° *
__s
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

400 
__END_NAMESPACE_STD


402 #ifdef 
__USE_XOPEN2K8


405 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

406 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 
__BEGIN_NAMESPACE_STD


412 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

413 
__END_NAMESPACE_STD


414 #ifde‡
__USE_XOPEN2K


422 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


425 #ifde‡
__REDIRECT_NTH


426 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

427 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

428 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

430 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

437 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

442 #ifde‡
__USE_XOPEN2K8


444 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

450 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

452 #ifde‡
__USE_MISC


454 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

461 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

462 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


468 *
	`ödex
 (*
__s
, 
__c
)

469 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

471 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

473 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


474 
__exã∫_Æways_ölöe
 *

475 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


477  
	`__buûtö_ödex
 (
__s
, 
__c
);

480 
__exã∫_Æways_ölöe
 const *

481 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


483  
	`__buûtö_ödex
 (
__s
, 
__c
);

486 
	}
}

488 *
	$ödex
 (c⁄° *
__s
, 
__c
)

489 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

493 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


496 *
	`rödex
 (*
__s
, 
__c
)

497 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

499 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

501 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


502 
__exã∫_Æways_ölöe
 *

503 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


505  
	`__buûtö_rödex
 (
__s
, 
__c
);

508 
__exã∫_Æways_ölöe
 const *

509 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


511  
	`__buûtö_rödex
 (
__s
, 
__c
);

514 
	}
}

516 *
	$rödex
 (c⁄° *
__s
, 
__c
)

517 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

522 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

526 #ifdef 
__USE_GNU


527 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

533 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

538 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

541 #ifdef 
__USE_GNU


544 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

548 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

549 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

553 #ifdef 
__USE_MISC


556 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

557 c⁄° *
__ª°ri˘
 
__dñim
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

561 #ifdef 
__USE_XOPEN2K8


563 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

566 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 #ifdef 
__USE_GNU


583 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

584 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

587 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #i‚de‡
ba£«me


597 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


598 "C++" *
	$ba£«me
 (*
__fûíame
)

599 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

601 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

610 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

611 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


631 
	~<bôs/°rög.h
>

634 
	~<bôs/°rög2.h
>

637 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


639 
	~<bôs/°rög3.h
>

643 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_MISC
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_MISC


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_MISC


886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

231 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

232 
	#_POSIX_SOURCE
 1

	)

233 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

234 
	#_POSIX_C_SOURCE
 2

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

236 
	#_POSIX_C_SOURCE
 199506L

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

238 
	#_POSIX_C_SOURCE
 200112L

	)

240 
	#_POSIX_C_SOURCE
 200809L

	)

242 
	#__USE_POSIX_IMPLICITLY
 1

	)

245 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 21

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
84
887
asm.h
bio.c
bootmain.c
buf.h
cat.c
console.c
date.h
defs.h
echo.c
elf.h
exec.c
fcntl.h
file.c
file.h
forktest.c
fs.c
fs.h
grep.c
ide.c
init.c
ioapic.c
kalloc.c
kbd.c
kbd.h
kill.c
lapic.c
ln.c
log.c
ls.c
main.c
memide.c
memlayout.h
mkdir.c
mkfs.c
mmu.h
mp.c
mp.h
param.h
picirq.c
pipe.c
printf.c
proc.c
proc.h
rm.c
sh.c
spinlock.c
spinlock.h
stat.h
stressfs.c
string.c
syscall.c
syscall.h
sysfile.c
sysproc.c
timer.c
trap.c
traps.h
types.h
uart.c
ulib.c
umalloc.c
user.h
usertests.c
vm.c
wc.c
x86.h
zombie.c
/usr/include/assert.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/stdc-predef.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
